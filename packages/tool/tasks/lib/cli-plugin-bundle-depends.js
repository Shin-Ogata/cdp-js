'use strict';

const {
    ensureDirSync,
    existsSync,
    unlinkSync,
    symlinkSync,
    readFileSync,
    writeFileSync,
    outputJsonSync,
} = require('fs-extra');
const { resolve }     = require('path');
const chalk           = require('chalk');
const command         = require('../command');
const { pkg, dir }    = require('../config');
const banner          = require('../banner');
const getBundleConfig = require('./dts-bundle-config');

const COMMAND = 'bundle-depends';
const TEMP_DTS_BUNDLE_CONFIG_PATH = 'dts-bundle/config.json';

function defineCommands(commander, cmd, isDefault) {
    commander
        .command(`${COMMAND} <mode>`)
        .alias('bd')
        .description('manage bundled dev-dependencis')
        .option('-c, --config <path>', 'specified config file')
        .option('-v, --validate',      'validate for bundle task')
        .action((mode, options) => {
            cmd.action = COMMAND;
            const { cwd, silent } = commander;
            const { config, validate } = options;
            cmd[COMMAND] = isDefault ? defaultOptions() : {
                cwd: cwd || process.cwd(),
                silent,
                mode,
                config,
                validate,
            };
        })
        .on('--help', () => {
            console.log(
`
Examples:
  $ cdp-task bundle-depends setup                  for setup bundled dev-dependencis
  $ cdp-task bundle-depends dts --config=<config>  for bundling d.ts by config-file
`
            );
        });

    return '  $ cdp-task bundle-depends <mode> [options] manage bundled dev-dependencis';
}

function defaultOptions() {
    return {
        cwd: process.cwd(),
        silent: false,
    };
}

function queryTargets(cwd) {
    const { devDependencies: depends } = pkg;
    const targets = [];
    for (const key of Object.keys(depends)) {
        if (/^file:/.test(depends[key])) {
            let [root, link] = key.split('/');
            if (!link) {
                link = root;
                root = undefined;
            }
            targets.push({
                module: key,
                location: resolve(cwd, depends[key].split(':')[1]),
                root,
                link,
            });
        }
    }

//  console.log(`targets:\n${JSON.stringify(targets, null, 4)}`);
    return targets;
}

function linkTestUnit(cwd, target) {
    const { location, root, link } = target;
    const { test, unit } = dir;

    let dstRoot = resolve(cwd, test, unit);
    if (root) {
        dstRoot = resolve(dstRoot, root);
        ensureDirSync(dstRoot);
    }

    const src = resolve(location, test, unit);
    const dst = resolve(dstRoot, link);
    if (existsSync(dst)) {
        unlinkSync(dst);
    }
    symlinkSync(src, dst, ('win32' === process.platform ? 'junction' : 'dir'));
}

function setup(cwd) {
    const targets = queryTargets(cwd);
    for (const target of targets) {
        linkTestUnit(cwd, target);
    }
}

async function bundleDTS(cwd, config, validate) {
    const bundleInfo = getBundleConfig(cwd, queryTargets(cwd), config, validate);
    const { bundle, indent } = bundleInfo;
    // preProcess
    if ('function' === typeof bundleInfo.preProcess) {
        await bundleInfo.preProcess();
    }

    const tempConfigPath = resolve(cwd, dir.temp, TEMP_DTS_BUNDLE_CONFIG_PATH);
    outputJsonSync(tempConfigPath, bundle);

    try {
        await command('dts-bundle-generator', `--config ${tempConfigPath}`);
    } catch (e) {
        console.log(chalk.cyan.underline(`â†‘  "dts-bundle-generator" validate faild. You should fix it manually.`));
    }

    for (const [index, entry] of bundle.entries.entries()) {
        // eslint-disable-next-line
        let code = readFileSync(entry.outFile)
                    .toString()
                    .replace(/\t/gm, indent)        // tab to space
                    .replace(/^export {};/m, '')    // trim 'export {};'
                    .replace(/[\n\s]*$/, '')        // trim surplus line feed

            + '\n'; // add final line feed
        // postProcess
        if ('function' === typeof bundleInfo.postProcess) {
            code = await bundleInfo.postProcess(index, code);
        }
        { // banner
            const includes = entry.libraries.inlinedLibraries;
            const seps = '\n *     - ';
            let description = `Generated by 'cdp-task bundle-depends dts' task.`;
            if (includes.length) {
                description += `\n *   - includes:${seps}${includes.join(seps)}`;
            }
            code = banner(Object.assign({ description }, bundleInfo)) + code;
        }
        writeFileSync(entry.outFile, code);
    }
}

async function exec(options) {
    options = options || defaultOptions();
    const { cwd, mode, config, validate } = options;

    switch (mode) {
        case 'setup':
            setup(cwd);
            break;
        case 'dts':
            await bundleDTS(cwd, config, validate);
            break;
        default:
            break;
    }
}

module.exports = {
    exec,
    defineCommands,
    command: COMMAND,
};
