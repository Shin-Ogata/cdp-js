{"version":3,"sources":["cdp:///CDP/UI/jqm/Theme.ts","cdp:///CDP/UI/jqm/ExtensionManager.ts","cdp:///CDP/UI/jqm/Toast.ts","cdp:///CDP/UI/jqm/Dialog.ts","cdp:///CDP/UI/jqm/DialogCommons.ts","cdp:///CDP/UI/jqm/BaseHeaderView.ts","cdp:///CDP/UI/jqm/BasePage.ts","cdp:///CDP/UI/jqm/PageView.ts","cdp:///CDP/UI/jqm/PageContainerView.ts","cdp:///CDP/UI/jqm/TabHostView.ts","cdp:///CDP/UI/jqm/TabView.ts","cdp:///CDP/UI/jqm/PageListView.ts","cdp:///CDP/UI/jqm/PageExpandableListView.ts","cdp:///CDP/UI/jqm/Extension/Ripple.ts","cdp:///CDP/UI/jqm/Extension/Spinner.ts","cdp:///CDP/UI/jqm/Extension/FloatLabel.ts","cdp:///CDP/UI/jqm/Extension/FlipSwitch.ts","cdp:///CDP/UI/jqm/Extension/Slider.ts","cdp:///CDP/UI/jqm/Extension/IScroll.ts"],"names":["CDP","UI","Config","Framework","Theme","ExtensionManager","TAG","Promise","Dialog","initialize","options","opt","$","extend","platform","reserveScrollbarRegion","detectUIPlatform","setCurrentUIPlatform","console","warn","getCurrentUIPlatform","$htms","i","n","s_platforms","length","hasClass","indexOf","$htms_1","forEach","target","removeClass","addClass","Platform","iOS","DEBUG","Mobile","css","registerUIPlatforms","platforms","registerPageTransitionMap","map","s_pageTransitionMap","registerDialogTransitionMap","s_dialogTransitionMap","queryPageTransition","original","convert","fallback","queryDialogTransition","platform-default","ios","android","platform-alternative","waitForInitialize","done","jqmChangePage","mobile","changePage","bind","to","_","isString","transition","registerDomExtension","func","this","s_domExtensions","push","applyDomExtension","$ui","Toast","OffsetX","OffsetY","LENGTH_SHORT","LENGTH_LONG","StyleBuilderDefault","prototype","getClass","getStyle","padding","display","background-color","border-color","color","text-shadow","font-weight","opacity","getOffsetPoint","CENTER","BOTTOM","getOffsetX","getOffsetY","show","message","duration","style","$mobile","info","setCSS","msg","replace","box","top","left","appendTo","pageContainer","posX","posY","offsetPoint","$window","window","box_width","width","parseInt","box_height","height","LEFT","RIGHT","TOP","delay","fadeOut","remove","id","_template","_settings","_$dialog","initCommonCondition","s_defaultOptions","Tools","Template","getJST","src","_this","$document","document","$body","$page","pagecontainer","ofcHidden","overflow","overflow-x","overflow-y","ofcBody","parentScrollPos","scrollTop","ofcPage","scrollEvent","scrollHander","event","preventDefault","afterclose","forceOverwriteAfterClose","_titleState","title","localize","append","resolveTheme","on","register","enhanceWithin","domExtensionOptions","onBeforeShow","popup","positionTo","ui","off","autoClose","attr","defaultAutoClose","close","fail","error","trigger","Object","defineProperty","resolve","candidateTheme","queryTheme","jqmData","theme","overlayTheme","setDefaultOptions","dialog","s_activeDialog","isInitialized","s_oldBackKeyHandler","setBackButtonHandler","customBackKeyHandler","idPositive","idNegative","getDefaultClickEvent","dismissible","labelPositive","labelNegative","backKey","Router","View","BaseHeaderView","BasePage","PageView","PageContainerView","SUPPRESS_WARNING_INITIAL_HEIGHT","TabView","PageListView","PageExpandableListView","patch_IScroll_utils_click","s_applied","alert","confirm","DialogPrompt","_super","call","_eventOK","eventOK","__extends","onCommit","text","$el","find","val","keyCode","prompt","_owner","_options","el","backCommandSelector","backCommandKind","baseTemplate","setElement","create","createHeaderBase","activate","showIndicator","inactivate","hideIndicator","release","releaseHeaderBase","$header","s_$headerBase","s_refCount","body","_hasBackIndicator","events","eventMap","onCommandBack","handled","onCommand","back","url","baseHeader","backCommandHandler","onPageBeforeCreate","_baseHeader","onPageInit","onPageBeforeShow","data","onPageBeforeHide","onPageRemove","onHardwareBackButton","retval","kind","Page","_pageOptions","_basePage","_statusMgr","owner","basePage","StatusManager","delegates","statusAddRef","status","statusRelease","statusScope","callback","isStatusIn","active","$footer","intent","newIntent","onOrientationChanged","newOrientation","onBeforeRouteChange","onInitialize","onPageShow","onPageHide","listenTo","stopListening","_Config","TABVIEW_CLASS","TABVIEW_SELECTOR","TABHOST_CLASS","TABHOST_SELECTOR","TABHOST_REFRESH_COEFF","TABHOST_REFRESH_INTERVAL","TabHostView","_tabs","_activeTabIndex","_flipsnap","_flipEndEventHandler","_flipMoveEventHandler","_flipDeltaCache","_scrollEndEventHandler","_scrollMoveEventHandler","_refreshTimerId","global","Flipsnap","tabContexts","tabMoveHandler","delta","tabStopHandler","newIndex","moved","fsEvent","originalEvent","onTabChanged","newPoint","enableBounce","direction","moveToPoint","onTabMoving","tabview","onTabScrolling","preprocess","onScrollStop","onScroll","initialWidth","initialHeight","slice","context","ctor","host","delayRegister","onTabViewSetupRequest","initImmediate","initializeTabViews","setFlipsnapCondition","distance","setActiveTab","$tabs","index","destroy","resetFlipsnapCondition","onDestroy","getBaseHeight","registerTabView","getTabIndexOf","resetTabPosition","scrollTo","refresh","transitionDuration","initial","validTab","lastActiveTabIndex_1","changeTab_1","postprocess","setTimeout","getTabCount","getActiveTabIndex","getSwipeDelta","EVENT_TAB_MOVE","EVENT_TAB_STOP","getScrollPos","_activeTabView","getScrollPosMax","pos","animate","time","EVENT_SCROLL_MOVE","EVENT_SCROLL_STOP","setScrollHandler","handler","setScrollStopHandler","clearTimeout","proc_1","_maxPoint","rebuild","needRebuild","element","toIndex","treatScrollPosition","lastActiveTabIndex","inactiveVisibleTabDistance","onVisibilityChanged","onTabSelected","onTabReleased","_host","_needRebuild","core","$root","Backbone","visible","setActiveState","position","offset","_scrollMgr","_tabIndex","isActive","tabIndex","ListView","autoDestoryElement","ScrollManager","reserveRebuild","setBaseHeight","getPageBaseHeight","addItem","initializer","insertTo","_addLine","LineProfile","Math","floor","removeItem","arg2","arg3","getItemInfo","update","backup","key","restore","hasBackup","clearBackup","backupData","ensureVisible","_line","_expandManager","ExpandManager","newGroup","getGroup","registerTopGroup","topGroup","getTopGroups","expandAll","collapseAll","isExpanding","isCollapsing","isSwitching","layoutKey","Extension","fn","ripple","Patch","s_vclickEvent","surface","prepend","ink","d","max","outerWidth","outerHeight","x","pageX","y","pageY","rippleColor","ev","background","NO_RIPPLE_CLASS","selector","filter","elem","is","join","each","$target","dataUrl","PREFIX","valid","prop","match","Date","now","toString","spinner","clr","param","borderTop","border","spinnerify","floating","$elem","$input","_getAllSwitches","_getInputFromSwitch","$switch","$select","_change","nodeName","flipswitch","currentTarget","changeTo","isSupportedVclick","labels","_getLabelsFromSwitch","$label","name","parent","blur","e","clientX","clientY","changedTouches","test","tagName","createEvent","initMouseEvent","view","screenX","screenY","ctrlKey","altKey","shiftKey","metaKey","_constructed","dispatchEvent","IScroll","utils","click"],"mappings":";;;;;gMAAA,IAAUA,EAAIC,EAEHC,EACAC,EAoCPC,ECvCMJ,EAAIC,EAsBVI,ECpBML,EAAIC,EAEJK,ECJAN,EAAIC,EAEHM,EACAJ,EAEDG,EAmCNE,gBHxCMR,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAEHC,EAAeF,EAAIE,OACnBC,EAAeH,EAAIG,UAoC1BC,EAAA,WAAA,SAAAA,KA4KA,OA5IkBA,EAAAK,WAAd,SAAyBC,GACrB,IAAMC,EAAMC,EAAEC,WACVC,SAAU,OACVC,wBAAwB,GACzBL,GAEH,MAAI,SAAWC,EAAIG,SACRV,EAAMY,iBAAiBL,EAAII,wBAE9BX,EAAMa,qBAAqBN,EAAIG,UACxBH,EAAIG,cAEXI,QAAQC,KAAKb,4DAAqDK,EAAIG,WAUpEV,EAAAgB,qBAAd,WAEI,IADA,IAAMC,EAAQT,EAAE,QACPU,EAAI,EAAGC,EAAInB,EAAMoB,YAAYC,OAAQH,EAAIC,EAAGD,IACjD,GAAID,EAAMK,SAAS,eAAiBtB,EAAMoB,YAAYF,IAClD,OAAOlB,EAAMoB,YAAYF,GAGjC,OAAO,MAQGlB,EAAAa,qBAAd,SAAmCH,GAC/B,GAAI,MAAQA,GAAmD,GAAvCV,EAAMoB,YAAYG,QAAQb,GAAgB,CAC9D,IAAMc,EAAQhB,EAAE,QAOhB,OANAR,EAAMoB,YAAYK,QAAQ,SAACC,GACvBF,EAAMG,YAAY,eAAiBD,KAEnChB,GACAc,EAAMI,SAAS,eAAiBlB,IAE7B,EAEP,OAAO,GAUDV,EAAAY,iBAAd,SAA+BD,QAAA,IAAAA,IAAAA,GAAA,GAC3B,IAAID,EAAW,GAaf,OAXIX,EAAU8B,SAASC,KACnBtB,EAAE,QAAQoB,SAAS,mBACnBlB,EAAW,QAEXF,EAAE,QAAQoB,SAAS,uBACnBlB,EAAW,WAGXZ,EAAOiC,OAASpB,IAA2BZ,EAAU8B,SAASG,QAC9DxB,EAAE,QAAQyB,IAAI,aAAc,UAEzBvB,GASGV,EAAAkC,oBAAd,SAAkCC,GAC1BA,IACAnC,EAAMoB,YAAce,IAUdnC,EAAAoC,0BAAd,SAAwCC,GAChCA,IACArC,EAAMsC,oBAAsBD,IAUtBrC,EAAAuC,4BAAd,SAA0CF,GAClCA,IACArC,EAAMwC,sBAAwBH,IAUxBrC,EAAAyC,oBAAd,SAAkCC,GAC9B,IAAMC,EAAU3C,EAAMsC,oBAAoBI,GAC1C,OAAIC,EACOA,EAAQ3C,EAAMgB,yBAA2B2B,EAAQC,SAEjDF,GAUD1C,EAAA6C,sBAAd,SAAoCH,GAChC,IAAMC,EAAU3C,EAAMwC,sBAAsBE,GAC5C,OAAIC,EACOA,EAAQ3C,EAAMgB,yBAA2B2B,EAAQC,SAEjDF,GAvKA1C,EAAAoB,aAAyB,MAAO,WAChCpB,EAAAsC,qBACXQ,oBACIC,IAAK,QACLC,QAAS,UACTJ,SAAU,SAEdK,wBACIF,IAAK,UACLC,QAAS,UACTJ,SAAU,YAGH5C,EAAAwC,uBACXM,oBACIC,IAAK,UACLC,QAAS,YACTJ,SAAU,SAyJtB5C,EA5KA,GAAaH,EAAAG,MAAKA,EAiMlBD,EAAUmD,oBACLC,KAAK,WAjBV,IACUC,EAAAA,EAAgE5C,EAAE6C,OAAOC,WAAWC,KAAK/C,EAAE6C,QAWjG7C,EAAE6C,OAAOC,WATT,SAA0BE,EAASlD,GAC3BmD,EAAEC,SAASF,IACPlD,GAAWA,EAAQqD,aACnBrD,EAAQqD,WAAa3D,EAAMyC,oBAAoBnC,EAAQqD,aAG/DP,EAAcI,EAAIlD,MCjOpBV,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAsBVI,EAAA,WAAA,SAAAA,KAwBA,OAfkBA,EAAA2D,qBAAd,SAAmCC,GAC/BC,KAAKC,gBAAgBC,KAAKH,IAShB5D,EAAAgE,kBAAd,SAAgCC,EAAa5D,GACzCwD,KAAKC,gBAAgBtC,QAAQ,SAACoC,GAC1BA,EAAKK,EAAK5D,MAnBHL,EAAA8D,mBAsBnB9D,EAxBA,GAAaJ,EAAAI,iBAAgBA,ECpBvBL,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAEJK,EAAM,kBAOZ,SAAciE,GAOV,IAAYC,EAAAA,EAOAC,EAAAA,EAXDF,EAAAG,aAAe,KACfH,EAAAI,YAAe,KAGdH,EAAAA,EAAAD,EAAAC,UAAAD,EAAAC,aACRA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,UAIQC,EAAAA,EAAAF,EAAAE,UAAAF,EAAAE,aACRA,EAAA,IAAA,IAAA,MACAA,EAAAA,EAAA,OAAA,IAAA,SACAA,EAAAA,EAAA,OAAA,IAAA,SAyBJ,IAAAG,EAAA,WAAA,SAAAA,KAoCA,OAjCIA,EAAAC,UAAAC,SAAA,WACI,MAAO,6CAIXF,EAAAC,UAAAE,SAAA,WAWI,OATIC,QAAoB,oBACpBC,QAAoB,QACpBC,mBAAoB,UACpBC,eAAoB,UACpBC,MAAoB,OACpBC,cAAoB,eACpBC,cAAoB,OACpBC,QAAoB,KAM5BX,EAAAC,UAAAW,eAAA,WACI,OAAOhB,EAAQiB,OAAShB,EAAQiB,QAIpCd,EAAAC,UAAAc,WAAA,WACI,OAAO,GAIXf,EAAAC,UAAAe,WAAA,WACI,OAAQ,IAEhBhB,EApCA,GAAaL,EAAAK,oBAAmBA,EA6ChBL,EAAAsB,KAAhB,SAAqBC,EAAiBC,EAAuCC,QAAvC,IAAAD,IAAAA,EAAmBxB,EAAMG,cAC3D,IAAMuB,EAAUrF,EAAE6C,OACZyC,EAAOF,GAAS,IAAIpB,EACpBuB,IAASD,EAAKnB,WAGdqB,EAAMN,EAAQO,QAAQ,MAAO,SAI7BC,EAAM1F,EADC,QAAUwF,EAAM,UACTpE,SAASkE,EAAKpB,YAC9BqB,GACAG,EAAIjE,IAAI6D,EAAKnB,YAIjBuB,EAAIjE,KACAkE,IAAO,EACPC,KAAQ,IACTC,SAASR,EAAQS,eAGpB,IAEIC,EAAMC,EAFJC,EAAcX,EAAKV,iBACnBsB,EAAUlG,EAAEmG,QAGZC,EAAYV,EAAIW,QAAUC,SAASZ,EAAIjE,IAAI,gBAAiB,IAAM6E,SAASZ,EAAIjE,IAAI,iBAAkB,IACrG8E,EAAab,EAAIc,SAAWF,SAASZ,EAAIjE,IAAI,eAAgB,IAAM6E,SAASZ,EAAIjE,IAAI,kBAAmB,IAE7G,OAAsB,GAAdwE,GACJ,KAAKrC,EAAQ6C,KACTV,EAAO,EAAIT,EAAKP,aAChB,MACJ,KAAKnB,EAAQ8C,MACTX,EAAOG,EAAQG,QAAUD,EAAYd,EAAKP,aAC1C,MACJ,KAAKnB,EAAQiB,OACTkB,EAAQG,EAAQG,QAAU,EAAMD,EAAY,EAAKd,EAAKP,aACtD,MACJ,QACIzE,QAAQC,KAAKb,EAAM,8BAA8C,GAAduG,IACnDF,EAAQG,EAAQG,QAAU,EAAMD,EAAY,EAAKd,EAAKP,aAI9D,OAAsB,IAAdkB,GACJ,KAAKpC,EAAQ8C,IACTX,EAAO,EAAIV,EAAKN,aAChB,MACJ,KAAKnB,EAAQiB,OACTkB,EAAOE,EAAQM,SAAWD,EAAajB,EAAKN,aAC5C,MACJ,KAAKnB,EAAQgB,OACTmB,EAAQE,EAAQM,SAAW,EAAMD,EAAa,EAAKjB,EAAKN,aACxD,MACJ,QACI1E,QAAQC,KAAKb,EAAM,8BAA8C,IAAduG,IACnDD,EAAQE,EAAQM,SAAW,EAAMD,EAAa,EAAKjB,EAAKN,aAKhEU,EAAIjE,KACAkE,IAAOK,EACPJ,KAAQG,IAEXa,MAAMzB,GACN0B,QAAQ,IAAK,WACV7G,EAAEsD,MAAMwD,YA3JpB,CAAczH,EAAAsE,QAAAtE,EAAAsE,WCXRvE,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAEHM,EAAeP,EAAIO,QACnBJ,EAAeH,EAAIG,UAEpBG,EAAM,mBAmCZE,EAAA,WAgBI,SAAAA,EAAYmH,EAAYjH,GAdhBwD,KAAA0D,UAAuB,KACvB1D,KAAA2D,UAA2B,KAC3B3D,KAAA4D,SAAmB,KAcvBtH,EAAOuH,sBAEP7D,KAAK2D,UAAYjH,EAAEC,UAAWL,EAAOwH,iBAAkBtH,GAEvDwD,KAAK0D,UAAY5H,EAAAiI,MAAMC,SAASC,OAAOR,EAAIzD,KAAK2D,UAAUO,KAoQlE,OAvPW5H,EAAAqE,UAAAgB,KAAP,SAAYnF,GAAZ,IAAA2H,EAAAnE,KACUoE,EAAY1H,EAAE2H,UACdC,EAAQ5H,EAAE,QACV6H,EAAcD,EAAOE,cAAc,iBAEnCC,GACFC,SAAgB,SAChBC,aAAgB,SAChBC,aAAgB,UAEdC,GACFH,SAAgBJ,EAAMnG,IAAI,YAC1BwG,aAAgBL,EAAMnG,IAAI,cAC1ByG,aAAgBN,EAAMnG,IAAI,eAExB2G,EAAkBR,EAAMS,YACxBC,GACFN,SAAgBH,EAAMpG,IAAI,YAC1BwG,aAAgBJ,EAAMpG,IAAI,cAC1ByG,aAAgBL,EAAMpG,IAAI,eAGxB8G,EAAc,2CAEdC,EAAe,SAACC,GACd,SAAWhB,EAAKR,UAAUsB,YAC1BE,EAAMC,iBACC,WAAajB,EAAKR,UAAUsB,aACnCX,EAAMS,UAAUD,IAsFxB,OAjFI,MAAQtI,IACRwD,KAAK2D,UAAYjH,EAAEC,UAAWqD,KAAK2D,UAAWnH,IAI9CwD,KAAK2D,UAAU0B,aAAerF,KAAK2D,UAAU2B,2BAC7CtI,QAAQC,KAAKb,EAAM,2FACZ4D,KAAK2D,UAAU0B,YAIpBrF,KAAK2D,UAAW4B,YAAcvF,KAAK2D,UAAU6B,MAAQ,eAAiB,cAO5ExF,KAAK4D,SAAWlH,EAAEsD,KAAK0D,UAAU1D,KAAK2D,YACtC3D,KAAK4D,SAAS6B,WACdnB,EAAMoB,OAAO1F,KAAK4D,UAGlB5D,KAAK2F,eAEL3F,KAAK4D,SACAgC,GAAG,cAAe,SAACT,GAEZ,UAAYhB,EAAKR,UAAUsB,aAC3Bb,EAAUwB,GAAGX,EAAaC,GAE9BZ,EAAMnG,IAAIsG,GACVF,EAAMpG,IAAIsG,GACVnI,EAAOuJ,SAAS1B,KAEnB2B,gBAGD,MAAQ9F,KAAK2D,UAAUoC,qBACvBhK,EAAAI,iBAAiBgE,kBAAkBH,KAAK4D,SAAU5D,KAAK2D,UAAUoC,qBAGrE/F,KAAKgG,eACA3G,KAAK,WAEF8E,EAAKP,SACAqC,MAAMvJ,EAAEC,WACLuJ,WAAY,SACZb,WAAY,SAACF,EAAqBgB,GAE9B5B,EAAMpG,IAAI6G,GACVV,EAAMnG,IAAI0G,GACN,UAAYV,EAAKR,UAAUsB,aAC3Bb,EAAUgC,IAAInB,EAAaC,GAE/B5I,EAAOuJ,SAAS,MAChB1B,EAAKP,SAASJ,SACdW,EAAKP,SAAW,OAErBO,EAAKR,YACPsC,MAAM,QAAQL,GAAGzB,EAAKR,UAAUwB,MAAO,SAACA,GAErC,IAAIkB,EAAY3J,EAAEyI,EAAMvH,QAAQ0I,KAAK,mBACjC,MAAQD,IACRA,EAAYlC,EAAKR,UAAU4C,iBAAmB,OAAS,SAEvD,UAAYF,IAGhBlC,EAAKqC,QACLrB,EAAMC,sBAIjBqB,KAAK,SAACC,GACH1J,QAAQ0J,MAAMtK,EAAM,yBAChB+H,EAAKP,UACLO,EAAKP,SAAS+C,QAAQ,QAASD,KAIpC1G,KAAK4D,UAQTtH,EAAAqE,UAAA6F,MAAP,WACQxG,KAAK4D,UACL5D,KAAK4D,SAASqC,MAAM,UAK5BW,OAAAC,eAAWvK,EAAAqE,UAAA,WAAX,WACI,OAAOX,KAAK4D,0CAYNtH,EAAAqE,UAAAqF,aAAV,WACI,OAAO3J,EAAQyK,WAOTxK,EAAAqE,UAAAgF,aAAV,WACI,IAIIoB,EAJEC,EAAa,WACf,OAAOtK,EAAE,mBAAmBuK,QAAQ,UAKnCjH,KAAK2D,UAAUuD,OACClH,KAAK4D,SAASqD,QAAQ,WAEnCjH,KAAK2D,UAAUuD,MAAQH,EAAiBC,KAI3ChH,KAAK2D,UAAUwD,cACQnH,KAAK4D,SAASqD,QAAQ,mBAE1CjH,KAAK2D,UAAUwD,aAAeJ,GAAkBC,KAKxDhH,KAAK2D,UAAU9D,WAAa9D,EAAAG,MAAM6C,sBAAsBiB,KAAK2D,UAAU9D,aAY7DvD,EAAA8K,kBAAd,SAAgC5K,GAE5BF,EAAOuH,sBACPnH,EAAEC,QAAO,EAAML,EAAOwH,iBAAkBtH,IAO7BF,EAAAuJ,SAAf,SAAwBwB,GAChB,MAAQA,GAAU,MAAQ/K,EAAOgL,gBACjCtK,QAAQC,KAAKb,EAAM,0FAEvBE,EAAOgL,eAAiBD,GAMb/K,EAAAuH,oBAAf,WAES5H,EAAUsL,gBAKX,MAAQjL,EAAOkL,sBAEflL,EAAOkL,oBAAsB1L,EAAI2L,qBAAqB,MACtD3L,EAAI2L,qBAAqBnL,EAAOoL,sBAGhCpL,EAAOwH,kBACH6D,WAAwB,mBACxBC,WAAwB,mBACxBzC,MAAwBlJ,EAAU4L,uBAClCC,aAAwB,EACxBvB,kBAAwB,EACxB1G,WAAwB,mBACxBkI,cAAwB,KACxBC,cAAwB,SACxBC,QAAwB,QACxBhD,YAAwB,OACxBc,yBArBJ/I,QAAQC,KAAKb,EAAM,wEA6BZE,EAAAoL,qBAAf,SAAoCvC,GAC5B,MAAQ7I,EAAOgL,eAQnBhL,EAAOkL,oBAAoBrC,GAPnB,UAAY7I,EAAOgL,eAAe3D,UAAUsE,QAC5C3L,EAAOgL,eAAed,QACf,mBAAsBlK,EAAOgL,eAAe3D,UAAUsE,SACtC3L,EAAOgL,eAAe3D,UAAUsE,QAAS9C,IA9Q7D7I,EAAAgL,eAAyB,KACzBhL,EAAAkL,oBAAsD,KACtDlL,EAAAwH,iBAAkC,KAkRrDxH,EA1RA,GAAaP,EAAAO,OAAMA,QCtCbR,ECFAA,EAAIC,EAEHmM,EAGAC,EAEAnE,EAqBPoE,EC1BMtM,EAAIC,EAsBVsM,ECtBMvM,EAAIC,EACHM,EAgCPiM,ECjCMxM,EAAIC,EAkBVwM,ECbMzM,ECPAA,EAAIC,EAKJyM,EAMNC,ECTM3M,EAAIC,EAkBV2M,ECpBM5M,EAAIC,EAUV4M,ECHM7M,EAAIC,EAEHE,ECFDH,EAAIC,ECPJD,GAAIC,GCAJD,GAAIC,GAEHE,GCFDH,GAAIC,GCAJD,GAAIC,GAGJ6M,GA4BFC,uTd7BM,SAAA9M,GAYMA,EAAA+M,MAAhB,SAAsBlH,EAAiBpF,GAoBnC,OALiB,IAAIT,EAAAO,OAdJ,moBAcqBI,EAAEC,WACpCuH,IAAK,KACLtC,QAASA,GACVpF,IAEamF,QAWJ5F,EAAAgN,QAAhB,SAAwBnH,EAAiBpF,GAqBrC,OALmB,IAAIT,EAAAO,OAfN,iwBAeuBI,EAAEC,WACtCuH,IAAK,KACLtC,QAASA,GACVpF,IAEemF,QAetB,IAAAqH,EAAA,SAAAC,GAQI,SAAAD,EAAYvF,EAAYjH,GAAxB,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMyD,EAAIjH,IAAQwD,YAClBmE,EAAKgF,SAAW3M,EAAQ4M,SAAW,aAyB3C,OAnC2BC,GAAAL,EAAAC,GAcbD,EAAArI,UAAAqF,aAAV,WAAA,IAAA7B,EAAAnE,KACUsJ,EAAW,SAACnE,GACd,IAAMoE,EAAOpF,EAAKqF,IAAIC,KAAK,eAAeC,MAC1CvF,EAAKqF,IAAI7C,QAAQxC,EAAKgF,SAAUI,GAChCpF,EAAKqC,QACLrB,EAAMC,kBAcV,OAXApF,KAAKwJ,IACA5D,GAAG,SAAU,sBAAuB,SAACT,GAClCmE,EAASnE,KAEZS,GAAG,UAAW,cAAe,SAACT,GACJ,KACAA,EAAMwE,SACzBL,EAASnE,KAId8D,EAAAtI,UAAMqF,aAAYkD,KAAAlJ,OAEjCgJ,EAnCA,CAA2BjN,EAAAO,QA4CXP,EAAA6N,OAAhB,SAAuBhI,EAAiBpF,GAuBpC,OALkB,IAAIwM,EAjBL,07BAiB4BtM,EAAEC,WAC3CuH,IAAK,KACLtC,QAASA,GACVpF,IAEcmF,QAlJX,EAAJ7F,EAAAA,IAAAA,OAAIC,KAAAD,EAAAC,QCFJD,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAEHmM,EAAepM,EAAIG,UAAUiM,OAG7BC,EAAerM,EAAIG,UAAUkM,KAE7BnE,EAAelI,EAAIiI,MAAMC,SAqBhCoE,EAAA,SAAAa,GAYI,SAAAb,EAAoByB,EAAuBC,GAA3C,IAAA3F,EACI8E,EAAAC,KAAAlJ,KAAM8J,EAAWpN,EAAEC,QACfoN,GAAIF,EAAOtF,MAAMkF,KAAK,wBACtBO,oBAAqB,gBACrBC,gBAAiB,YAClBH,KAAU9J,YALGmE,EAAA0F,OAAAA,GAAuB1F,EAAA2F,SAAAA,GAQ1BI,aACT/F,EAAKT,UAAYoG,EAASI,aAE1B/F,EAAKT,UAAYM,EAASC,OAAO,gSAUrCE,EAAKgG,WAAWhG,EAAKqF,KAAK,KA+GlC,OAhJkEH,GAAAjB,EAAAa,GA0CvDb,EAAAzH,UAAAyJ,OAAP,WACI,OAAOpK,KAAKqK,oBAMTjC,EAAAzH,UAAA2J,SAAP,WACI,OAAOtK,KAAKuK,iBAMTnC,EAAAzH,UAAA6J,WAAP,WACI,OAAOxK,KAAKyK,iBAMTrC,EAAAzH,UAAA+J,QAAP,WACI,OAAO1K,KAAK2K,qBAORvC,EAAAzH,UAAA0J,iBAAR,WAeI,MAbI,UAAYrK,KAAK6J,OAAOe,QAAQ3D,QAAQ,cACpC,MAAQmB,EAAeyC,gBACvBzC,EAAeyC,cAAgBnO,EAAEsD,KAAK0D,WAClCwD,MAAOlH,KAAK6J,OAAOtF,MAAM0C,QAAQ,aAGzCmB,EAAe0C,aACf1C,EAAeyC,cAActI,SAAS7F,EAAE2H,SAAS0G,QAGjD,EAAI/K,KAAKwJ,IAAIC,KAAK,sBAAsBlM,SACxCyC,KAAKgL,mBAAoB,GAEtB5C,EAAeyC,eAIlBzC,EAAAzH,UAAA4J,cAAR,WAKI,OAHI,MAAQnC,EAAeyC,eAAiB7K,KAAKgL,mBAC7C5C,EAAeyC,cAAcpB,KAAK,4BAA4B3L,SAAS,QAEpEsK,EAAeyC,eAIlBzC,EAAAzH,UAAA8J,cAAR,WAII,OAHI,MAAQrC,EAAeyC,eACvBzC,EAAeyC,cAAcpB,KAAK,4BAA4B5L,YAAY,QAEvEuK,EAAeyC,eAIlBzC,EAAAzH,UAAAgK,kBAAR,WAWI,MATI,UAAY3K,KAAK6J,OAAOe,QAAQ3D,QAAQ,aACpC,MAAQmB,EAAeyC,eAEnB,KADJzC,EAAe0C,aAEX1C,EAAeyC,cAAcrH,SAC7B4E,EAAeyC,cAAgB,MAIpCzC,EAAeyC,eAO1BzC,EAAAzH,UAAAsK,OAAA,WACI,IAAMC,KAIN,OAHIlL,KAAK8J,WACLoB,EAAS,UAAYlL,KAAK8J,SAASE,qBAAuBhK,KAAKmL,eAE5DD,GAIH9C,EAAAzH,UAAAwK,cAAR,SAAsBhG,GAClBA,EAAMC,iBACN,IAAIgG,GAAU,EACVpL,KAAK6J,SACLuB,EAAUpL,KAAK6J,OAAOwB,UAAUlG,EAAOnF,KAAK8J,SAASG,kBAEpDmB,GACDlD,EAAOoD,QA1IAlD,EAAA0C,WAAa,EA6IhC1C,EAhJA,CAAkED,GAArDpM,EAAAqM,eAAcA,EC1BrBtM,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAsBVsM,EAAA,SAAAY,GAWI,SAAAZ,EAAYkD,EAAa9H,EAAoBqG,GAA7C,IAAA3F,EACI8E,EAAAC,KAAAlJ,KAAMuL,EAAK9H,EAAIqG,EAAWpN,EAAEC,QACxB6O,WAAYzP,EAAAqM,eACZqD,mBAAoB,aACpBxB,gBAAiB,WACjBlE,wBACD+D,KAAU9J,YAN4BmE,EAAA2F,SAAAA,IA2GjD,OAtHgFT,GAAAhB,EAAAY,GA4B5EZ,EAAA1H,UAAA+K,mBAAA,SAAmBvG,GACXnF,KAAK8J,SAAS0B,aACdxL,KAAK2L,YAAc,IAAI3L,KAAK8J,SAAS0B,WAAWxL,KAAMA,KAAK8J,UAC3D9J,KAAK2L,YAAYvB,UAErBnB,EAAAtI,UAAM+K,mBAAkBxC,KAAAlJ,KAACmF,IAQ7BkD,EAAA1H,UAAAiL,WAAA,SAAWzG,GACH,MAAQnF,KAAK8J,SAAS/D,qBACtBhK,EAAAI,iBAAiBgE,kBAAkBH,KAAKuE,MAAOvE,KAAK8J,SAAS/D,qBAEjEkD,EAAAtI,UAAMiL,WAAU1C,KAAAlJ,KAACmF,IASrBkD,EAAA1H,UAAAkL,iBAAA,SAAiB1G,EAAqB2G,GAC9B9L,KAAK2L,aACL3L,KAAK2L,YAAYrB,WAErBrB,EAAAtI,UAAMkL,iBAAgB3C,KAAAlJ,KAACmF,EAAO2G,IASlCzD,EAAA1H,UAAAoL,iBAAA,SAAiB5G,EAAqB2G,GAC9B9L,KAAK2L,aACL3L,KAAK2L,YAAYnB,aAErBvB,EAAAtI,UAAMoL,iBAAgB7C,KAAAlJ,KAACmF,EAAO2G,IAQlCzD,EAAA1H,UAAAqL,aAAA,SAAa7G,GACLnF,KAAK2L,cACL3L,KAAK2L,YAAYjB,UACjB1K,KAAK2L,YAAc,MAEvB1C,EAAAtI,UAAMqL,aAAY9C,KAAAlJ,KAACmF,IASvBkD,EAAA1H,UAAAsL,qBAAA,SAAqB9G,GACjB,IAAI+G,EAASjD,EAAAtI,UAAMsL,qBAAoB/C,KAAAlJ,KAACmF,GAIxC,OAHK+G,IACDA,EAASlM,KAAKqL,UAAUlG,EAAOnF,KAAK8J,SAASG,kBAE1CiC,GAYX7D,EAAA1H,UAAA0K,UAAA,SAAUlG,EAAqBgH,GAC3B,QAAInM,KAAK8J,SAASG,kBAAoBkC,IAC9BnM,KAAK6J,SAAU7J,KAAK6J,OAAO7J,KAAK8J,SAAS2B,sBAClCzL,KAAK6J,OAAO7J,KAAK8J,SAAS2B,oBAAoBtG,IAKrEkD,EAtHA,CApBmBvM,EAAIG,UAoBmEmQ,MAA7ErQ,EAAAsM,SAAQA,ECtBfvM,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OACHM,EAAeP,EAAIO,QAgC1BiM,EAAA,SAAAW,GAaI,SAAAX,EAAYiD,EAAa9H,EAAYjH,GAArC,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMxD,IAAQwD,KAZRmE,EAAAkI,aAAiD,KACjDlI,EAAAmI,UAA4B,KAC9BnI,EAAAoI,WAA4B,KAahCpI,EAAKkI,aAAe3P,EAAEC,WAAa6P,MAAOrI,GAAQ3H,GAClD2H,EAAKmI,UAAYnI,EAAKkI,aAAaI,SAAW,IAAItI,EAAKkI,aAAaI,SAASlB,EAAK9H,EAAIU,EAAKkI,cAAgB,IAAItQ,EAAAsM,SAASkD,EAAK9H,EAAIU,EAAKkI,cAGtIlI,EAAKoI,WAAa,IAAIxQ,EAAA2Q,cAEtB,IAAMC,IAAkBxI,EAAM8G,cAC9B9G,EAAKgG,WAAWhG,EAAKI,MAAOoI,KA+KpC,OAvMgFtD,GAAAf,EAAAW,GAmC5EX,EAAA3H,UAAAiM,aAAA,SAAaC,GACT,OAAO7M,KAAKuM,WAAWK,aAAaC,IAQxCvE,EAAA3H,UAAAmM,cAAA,SAAcD,GACV,OAAO7M,KAAKuM,WAAWO,cAAcD,IASzCvE,EAAA3H,UAAAoM,YAAA,SAAYF,EAAgBG,GACxBhN,KAAKuM,WAAWQ,YAAYF,EAAQG,IASxC1E,EAAA3H,UAAAsM,WAAA,SAAWJ,GACP,OAAO7M,KAAKuM,WAAWU,WAAWJ,IAMtCjG,OAAAC,eAAIyB,EAAA3H,UAAA,cAAJ,WAA0C,OAAOX,KAAKsM,UAAUY,wCAChEtG,OAAAC,eAAIyB,EAAA3H,UAAA,WAAJ,WAA0C,OAAOX,KAAKsM,UAAUf,qCAChE3E,OAAAC,eAAIyB,EAAA3H,UAAA,UAAJ,WAA0C,OAAOX,KAAKsM,UAAYtM,KAAKsM,UAAU7I,GAAK,sCACtFmD,OAAAC,eAAIyB,EAAA3H,UAAA,aAAJ,WAA0C,OAAOX,KAAKsM,UAAU/H,uCAChEqC,OAAAC,eAAIyB,EAAA3H,UAAA,eAAJ,WAA0C,OAAOX,KAAKsM,UAAU1B,yCAChEhE,OAAAC,eAAIyB,EAAA3H,UAAA,eAAJ,WAA0C,OAAOX,KAAKsM,UAAUa,yCAChEvG,OAAAC,eAAIyB,EAAA3H,UAAA,cAAJ,WAA0C,OAAOX,KAAKsM,UAAUc,YAChE,SAAWC,GAA+BrN,KAAKsM,UAAUc,OAASC,mCAOlE/E,EAAA3H,UAAA2M,qBAAA,SAAqBC,GACjBvN,KAAK2G,QAAO,+BAAsC4G,IAStDjF,EAAA3H,UAAAsL,qBAAA,SAAqB9G,GACjB,OAAO,GASXmD,EAAA3H,UAAA6M,oBAAA,WACI,OAAOnR,EAAQyK,WAUnBwB,EAAA3H,UAAA0K,UAAA,SAAUlG,EAAsBgH,GAC5B,OAAO,GAQX7D,EAAA3H,UAAA8M,aAAA,SAAatI,GACTnF,KAAK2G,QAAO,sBAA6BxB,IAQ7CmD,EAAA3H,UAAA+K,mBAAA,SAAmBvG,GACfnF,KAAKmK,WAAWnK,KAAKuE,OAAO,GAC5BvE,KAAK2G,QAAO,yBAAqCxB,IAQrDmD,EAAA3H,UAAAiL,WAAA,SAAWzG,GACPnF,KAAK2G,QAAO,qBAA4BxB,IAS5CmD,EAAA3H,UAAAkL,iBAAA,SAAiB1G,EAAqB2G,GAClC9L,KAAK2G,QAAO,uBAAmCxB,EAAO2G,IAS1DxD,EAAA3H,UAAA+M,WAAA,SAAWvI,EAAqB2G,GAC5B9L,KAAK2G,QAAO,gBAA4BxB,EAAO2G,IASnDxD,EAAA3H,UAAAoL,iBAAA,SAAiB5G,EAAqB2G,GAClC9L,KAAK2G,QAAO,uBAAmCxB,EAAO2G,IAS1DxD,EAAA3H,UAAAgN,WAAA,SAAWxI,EAAqB2G,GAC5B9L,KAAK2G,QAAO,gBAA4BxB,EAAO2G,IAQnDxD,EAAA3H,UAAAqL,aAAA,SAAa7G,GACTnF,KAAK2G,QAAO,kBAA8BxB,GAC1CnF,KAAKwD,SACLxD,KAAK+J,GAAM,KACX/J,KAAKwJ,IAAM,MAEnBlB,EAvMA,CA/BsBxM,EAAIG,UA+BgEkM,MAA7EpM,EAAAuM,SAAQA,ECjCfxM,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAkBVwM,EAAA,SAAAU,GAOI,SAAAV,EAAY/L,GAAZ,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMxD,IAAQwD,KAEd,GARImE,EAAA0F,OAAmB,KAOvB1F,EAAK0F,OAASrN,EAAQgQ,MAClBhQ,EAAQgN,IAAK,CACb,IAAMmD,IAAkBxI,EAAM8G,OAC9B9G,EAAKgG,WAAW3N,EAAQgN,IAAKmD,UAGjCxI,EAAKyJ,SAASzJ,EAAK0F,OAAM,+BAAuC1F,EAAKmJ,qBAAqB7N,KAAK0E,IAC/FA,EAAKyJ,SAASzJ,EAAK0F,OAAM,sBAA8B1F,EAAKsJ,aAAahO,KAAK0E,IAC9EA,EAAKyJ,SAASzJ,EAAK0F,OAAM,yBAAsC1F,EAAKuH,mBAAmBjM,KAAK0E,IAC5FA,EAAKyJ,SAASzJ,EAAK0F,OAAM,qBAA6B1F,EAAKyH,WAAWnM,KAAK0E,IAC3EA,EAAKyJ,SAASzJ,EAAK0F,OAAM,uBAAoC1F,EAAK0H,iBAAiBpM,KAAK0E,IACxFA,EAAKyJ,SAASzJ,EAAK0F,OAAM,gBAA6B1F,EAAKuJ,WAAWjO,KAAK0E,IAC3EA,EAAKyJ,SAASzJ,EAAK0F,OAAM,uBAAoC1F,EAAK4H,iBAAiBtM,KAAK0E,IACxFA,EAAKyJ,SAASzJ,EAAK0F,OAAM,gBAA6B1F,EAAKwJ,WAAWlO,KAAK0E,IAC3EA,EAAKyJ,SAASzJ,EAAK0F,OAAM,kBAA+B1F,EAAK6H,aAAavM,KAAK0E,MAkGvF,OAzHyFkF,GAAAd,EAAAU,GA8BrFrC,OAAAC,eAAI0B,EAAA5H,UAAA,aAAJ,WACI,OAAOX,KAAK6J,wCAWhBtB,EAAA5H,UAAA2M,qBAAA,SAAqBC,KASrBhF,EAAA5H,UAAA8M,aAAA,SAAatI,KASboD,EAAA5H,UAAA+K,mBAAA,SAAmBvG,KASnBoD,EAAA5H,UAAAiL,WAAA,SAAWzG,KAUXoD,EAAA5H,UAAAkL,iBAAA,SAAiB1G,EAAqB2G,KAUtCvD,EAAA5H,UAAA+M,WAAA,SAAWvI,EAAqB2G,KAUhCvD,EAAA5H,UAAAoL,iBAAA,SAAiB5G,EAAqB2G,KAUtCvD,EAAA5H,UAAAgN,WAAA,SAAWxI,EAAqB2G,KAShCvD,EAAA5H,UAAAqL,aAAA,SAAa7G,GACTnF,KAAK6N,iBAEbtF,EAzHA,CAjBmBzM,EAAIG,UAiB4EkM,MAAtFpM,EAAAwM,kBAAiBA,ECbpB,SAAAxM,GAMV,IAEU+R,EAAAA,EAFJ1R,EAAM,yBAEF0R,EAAAA,IAAAA,OACOC,cAAgB,aAChBD,EAAAE,iBAAmB,IAAMF,EAAAC,cACzBD,EAAAG,cAAgB,aAChBH,EAAAI,iBAAmB,IAAMJ,EAAAG,cACzBH,EAAAK,sBAAwB,EACxBL,EAAAM,yBAA2B,IA+G5C,IAAAC,EAAA,SAAApF,GAwBI,SAAAoF,EAAY7R,GAAZ,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMxD,IAAQwD,KAGd,GA1BImE,EAAAmK,SAEAnK,EAAAoK,gBAA0B,EAC1BpK,EAAAqK,UAAuB,KACvBrK,EAAAsK,qBAAsD,KACtDtK,EAAAuK,sBAAuD,KACvDvK,EAAAwK,gBAA0B,EAC1BxK,EAAAyK,uBAAwD,KACxDzK,EAAA0K,wBAAyD,MACzD1K,EAAA2K,gBAA0B,OAiBlB/S,EAAAgT,OAAOC,gBACfhS,QAAQ0J,MAAMtK,EAAM,mCAIxB+H,EAAKR,UAAYjH,EAAEC,QACfsS,eACAC,eAAgB,SAACC,KACjBC,eAAgB,SAACC,EAAkBC,MACpC9S,GAGH2H,EAAKsK,qBAAuB,SAACtJ,GACzB,IAAMoK,EAAepK,EAAMqK,cAC3BrL,EAAKwK,gBAAkB,EACvBxK,EAAKsL,aAAaF,EAAQG,SAAUH,EAAQD,QAGhDnL,EAAKuK,sBAAwB,SAACvJ,GAC1B,IAAMoK,EAAepK,EAAMqK,cAC3BrL,EAAKwK,iBAAmBY,EAAQJ,OAG3BhL,EAAKR,UAAUgM,gBACd,IAAMJ,EAAQK,WAAa,IAAMzL,EAAKoK,iBAAmB,EAAIpK,EAAKwK,iBACnE,IAAMY,EAAQK,WAAazL,EAAKoK,kBAAoBpK,EAAKmK,MAAM/Q,OAAS,GAAK4G,EAAKwK,gBAAkB,IAErGxJ,EAAMC,iBACNjB,EAAKqK,UAAUqB,YAAYN,EAAQG,YAEnCvL,EAAK2L,YAAYP,EAAQJ,OACzBhL,EAAKmK,MAAM3Q,QAAQ,SAACoS,GAChBA,EAAQC,eAAe7L,EAAKoK,gBAAiBgB,EAAQJ,SAEzDhL,EAAK8L,WAAW9L,EAAKoK,mBAI7BpK,EAAKyK,uBAAyB,SAACzJ,GAC3BhB,EAAK+L,gBAGT/L,EAAK0K,wBAA0B,SAAC1J,GAC5BhB,EAAKgM,YAILhM,EAAKR,UAAUyM,cACfjM,EAAKqF,IAAIzG,MAAMoB,EAAKR,UAAUyM,cAE9BjM,EAAKR,UAAU0M,eACflM,EAAKqF,IAAItG,OAAOiB,EAAKR,UAAU0M,eAGnC,IAAMD,EAAgBjM,EAAKR,UAAUyM,aAC/BC,EAAgBlM,EAAKqF,IAAItG,SAEzB+L,EAAc9K,EAAKR,UAAUsL,YAAYqB,eAC3C,EAAIrB,EAAY1R,OAChB0R,EAAYtR,QAAQ,SAAC4S,GAEjB,IAAIA,EAAQC,KAAK9T,EAAEC,QACf0T,cAAeA,GAChBE,EAAQ/T,SAAWiU,KAAMtM,EAAMuM,eAAe,OAKrDvM,EAAKwM,sBAAsBN,GAG3BlM,EAAKR,UAAUiN,eACfzM,EAAK0M,qBAIT1M,EAAK2M,qBAAqBpU,EAAEC,WACxBoU,SAAUX,GACXjM,EAAKR,YACRQ,EAAK6M,aAAa7M,EAAKoK,gBAAiB,GAAG,KAqUnD,OAhb+DlF,GAAAgF,EAAApF,GAiHpDoF,EAAA1N,UAAAkQ,mBAAP,WAAA,IAAA1M,EAAAnE,KAGUiR,EAAQjR,KAAKwJ,IAAIC,KAAKqE,EAAQE,kBACpChO,KAAKsO,MAAM3Q,QAAQ,SAACoS,EAAmBmB,GACnCnB,EAAQtC,aAAatJ,EAAMzH,EAAEuU,EAAMC,QAQpC7C,EAAA1N,UAAAwQ,QAAP,WACInR,KAAKoR,yBACLpR,KAAKsO,MAAM3Q,QAAQ,SAACoS,GAChBA,EAAQsB,cAEZrR,KAAKsO,UAOFD,EAAA1N,UAAA2Q,cAAP,WACI,OAAOtR,KAAKwJ,IAAItG,UASbmL,EAAA1N,UAAA4Q,gBAAP,SAAuBxB,GACf,MAAQ/P,KAAKwR,cAAczB,GAC3B/P,KAAKsO,MAAMpO,KAAK6P,GAEhB/S,QAAQC,KAAKb,EAAM,qCAWpBiS,EAAA1N,UAAA6Q,cAAP,SAAqBzB,GACjB,IAAK,IAAI3S,EAAI,EAAGC,EAAI2C,KAAKsO,MAAM/Q,OAAQH,EAAIC,EAAGD,IAC1C,GAAI2S,IAAY/P,KAAKsO,MAAMlR,GACvB,OAAOA,EAGf,OAAO,MAIDiR,EAAA1N,UAAA8Q,iBAAV,WACIzR,KAAKsO,MAAM3Q,QAAQ,SAACoS,GAChBA,EAAQ2B,SAAS,GAAG,EAAO,GAC3B3B,EAAQ4B,YAEZ3R,KAAKgR,aAAa,EAAG,GAAG,IAIlB3C,EAAA1N,UAAAgQ,sBAAV,SAAgCN,KAQzBhC,EAAA1N,UAAAqQ,aAAP,SAAoBE,EAAeU,EAA6BC,GAAhE,IAAA1N,EAAAnE,KACI,GAAIA,KAAK8R,SAASZ,KAAWW,GAAY7R,KAAKuO,kBAAoB2C,GAAS,CAEvElR,KAAKiQ,WAAWiB,GAEhB,IAAMa,EAAqB/R,KAAKuO,gBAChCvO,KAAKuO,gBAAkB2C,EACvBlR,KAAKwO,UAAUqB,YAAY7P,KAAKuO,gBAAiBqD,GAG7C,IAAMI,EAAY,WACd7N,EAAK8N,YAAYF,GACjB5N,EAAKsL,aAAatL,EAAKoK,iBAAiB,IAYhD,OARQ,KADJqD,EAAqBA,GAAsB5O,SAAShD,KAAKwO,UAAUoD,mBAAoB,KAEnFI,IAEAE,WAAW,WACPF,KACDJ,EAAqB9D,EAAQK,wBAGjC,EAEP,OAAO,GASRE,EAAA1N,UAAAwR,YAAP,WACI,OAAOnS,KAAKsO,MAAM/Q,QAIf8Q,EAAA1N,UAAAyR,kBAAP,WACI,OAAOpS,KAAKuO,iBAITF,EAAA1N,UAAA0R,cAAP,WACI,OAAOrS,KAAK2O,iBAINN,EAAA1N,UAAAmP,YAAV,SAAsBX,GAClBnP,KAAK2G,QAAQ0H,EAAYiE,eAAgBnD,IAInCd,EAAA1N,UAAA8O,aAAV,SAAuBJ,EAAkBC,GACjCA,GACAtP,KAAKgR,aAAa3B,GAEtBrP,KAAK2G,QAAQ0H,EAAYkE,eAAgBlD,EAAUC,IAOvDjB,EAAA1N,UAAA6R,aAAA,WACI,OAAIxS,KAAKyS,eACEzS,KAAKyS,eAAeD,eAEpB,GAKfnE,EAAA1N,UAAA+R,gBAAA,WACI,OAAI1S,KAAKyS,eACEzS,KAAKyS,eAAeC,kBAEpB,GAKfrE,EAAA1N,UAAA+Q,SAAA,SAASiB,EAAaC,EAAmBC,GACjC7S,KAAKyS,gBACLzS,KAAKyS,eAAef,SAASiB,EAAKC,EAASC,IAKzCxE,EAAA1N,UAAAwP,SAAV,WACInQ,KAAK2G,QAAQ0H,EAAYyE,oBAInBzE,EAAA1N,UAAAuP,aAAV,WACIlQ,KAAK2G,QAAQ0H,EAAY0E,oBAI7B1E,EAAA1N,UAAAqS,iBAAA,SAAiBC,EAAwCrN,GACjD5F,KAAKyS,gBACLzS,KAAKyS,eAAeO,iBAAiBC,EAASrN,IAKtDyI,EAAA1N,UAAAuS,qBAAA,SAAqBD,EAAwCrN,GACrD5F,KAAKyS,gBACLzS,KAAKyS,eAAeS,qBAAqBD,EAASrN,IAS1DyI,EAAA1N,UAAA2M,qBAAA,SAAqBC,GAArB,IAAApJ,EAAAnE,KAWI,GAVAiJ,EAAAtI,UAAM2M,qBAAoBpE,KAAAlJ,KAACuN,GAE3BvN,KAAKsO,MAAM3Q,QAAQ,SAACoS,GAChBA,EAAQzC,qBAAqBC,KAG7B,MAAQvN,KAAK8O,iBACbqE,aAAanT,KAAK8O,iBAGlB9O,KAAKwO,WAAa,EAAIxO,KAAKsO,MAAM/Q,OAAQ,CACzC,IAAM6V,EAAO,WAELjP,EAAKqK,WAAarK,EAAKqK,UAAU6E,YAAelP,EAAKmK,MAAM/Q,OAAS,GACpE4G,EAAKqK,UAAUmD,UACfxN,EAAK2K,gBAAkBoD,WAAWkB,EAAMtF,EAAQM,2BAEhDjK,EAAK2K,gBAAkB,MAG/B9O,KAAKwO,UAAUmD,UACf3R,KAAK8O,gBAAkBoD,WAAWkB,EAAMtF,EAAQM,4BAKxDC,EAAA1N,UAAA+M,WAAA,SAAWvI,EAAqB2G,GAC5B7C,EAAAtI,UAAM+M,WAAUxE,KAAAlJ,KAACmF,EAAO2G,GACxB9L,KAAKsT,WAOTjF,EAAA1N,UAAA2S,QAAA,WACItT,KAAKsO,MAAM3Q,QAAQ,SAACoS,GACZA,EAAQwD,cACRxD,EAAQuD,UACRvD,EAAQwD,aAAc,MAS1BlF,EAAA1N,UAAAmQ,qBAAR,SAA6BtU,GACzBwD,KAAKwO,UAAYzS,EAAAgT,OAAOC,SAASlB,EAAQI,iBAAkB1R,GAC3DE,EAAEsD,KAAKwO,UAAUgF,SAAS5N,GAAG,aAAc5F,KAAKyO,qBAAqBhP,KAAKO,OAC1EtD,EAAEsD,KAAKwO,UAAUgF,SAAS5N,GAAG,cAAe5F,KAAK0O,sBAAsBjP,KAAKO,QAIxEqO,EAAA1N,UAAAyQ,uBAAR,WACQpR,KAAKwO,YACL9R,EAAEsD,KAAKwO,UAAUgF,SAASpN,IAAI,cAAepG,KAAK0O,sBAAsBjP,KAAKO,OAC7EtD,EAAEsD,KAAKwO,UAAUgF,SAASpN,IAAI,aAAcpG,KAAKyO,qBAAqBhP,KAAKO,OAC3EA,KAAKwO,UAAU2C,UACfnR,KAAKwO,UAAY,MAErBxO,KAAK2O,gBAAkB,GAInBN,EAAA1N,UAAAsP,WAAR,SAAmBwD,GAAnB,IAAAtP,EAAAnE,KACIA,KAAKsO,MAAM3Q,QAAQ,SAACoS,EAAmBmB,GAC/BA,IAAU/M,EAAKoK,iBACfwB,EAAQ2D,uBAGPvP,EAAKoK,gBAAkBkF,GAAYtP,EAAKoK,gBAAkB2C,GAASA,GAASuC,GAC5EA,EAAUtP,EAAKoK,iBAAoBkF,GAAWvC,GAASA,EAAQ/M,EAAKoK,kBAErEwB,EAAQvG,IAAIrL,IAAI,aAAc,cAMlCkQ,EAAA1N,UAAAsR,YAAR,SAAoB0B,GAApB,IAAAxP,EAAAnE,KACIA,KAAKsO,MAAM3Q,QAAQ,SAACoS,EAAmBmB,GACnC,GAAI,MAAQ/M,EAAKR,UAAUiQ,2BAA4B,CAEnD,IAAM7C,EAAW5M,EAAKR,UAAUiQ,2BAC5BzP,EAAKoK,gBAAkBwC,GAAYG,GAASA,GAAS/M,EAAKoK,gBAAkBwC,GAC5EhB,EAAQvG,IAAIrL,IAAI,aAAc,WAC9B4R,EAAQ8D,qBAAoB,KAE5B9D,EAAQvG,IAAIrL,IAAI,aAAc,UAC9B4R,EAAQ8D,qBAAoB,IAGhC3C,IAAU/M,EAAKoK,iBACfwB,EAAQ+D,gBACR/D,EAAQiD,iBAAiB7O,EAAK0K,yBAAyB,GACvDkB,EAAQmD,qBAAqB/O,EAAKyK,wBAAwB,IACnDsC,IAAUyC,IACjB5D,EAAQiD,iBAAiB7O,EAAK0K,yBAAyB,GACvDkB,EAAQmD,qBAAqB/O,EAAKyK,wBAAwB,GAC1DmB,EAAQgE,oBAMZ1F,EAAA1N,UAAAmR,SAAR,SAAiBZ,GACb,OAAI,IAAMlR,KAAKsO,MAAM/Q,SAEV,GAAK2T,GAASA,EAAQlR,KAAKsO,MAAM/Q,SAGxCP,QAAQ0J,MAAMtK,EAAM,6BAA+B8U,IAC5C,KAKftK,OAAAC,eAAYwH,EAAA1N,UAAA,sBAAZ,WACI,OAAOX,KAAKsO,MAAMtO,KAAKuO,kDAhabF,EAAAyE,kBAAoB,qBACpBzE,EAAA0E,kBAAoB,qBACpB1E,EAAAiE,eAAoB,kBACpBjE,EAAAkE,eAAoB,kBA+ZtClE,EAhbA,CAA+DtS,EAAAwM,mBAAlDxM,EAAAsS,YAAWA,EA7Hd,EAAJvS,EAAAA,IAAAA,OAAIC,KAAAD,EAAAC,QCPJD,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAKJyM,EAAkC,EAMxCC,EAAA,SAAAQ,GAUI,SAAAR,EAAYjM,GAAZ,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMtD,EAAEC,WAAa0T,cAAe7H,GAAmChM,KAASwD,YAT5EmE,EAAA6P,MAAqB,KACrB7P,EAAA8P,cAAwB,EAS5B9P,EAAK6P,MAAQxX,EAAQiU,KAChBjU,EAAQkU,eACTvM,EAAK6P,MAAMzC,gBAAgBpN,KAiGvC,OA/G2DkF,GAAAZ,EAAAQ,GAsBvDrC,OAAAC,eAAW4B,EAAA9H,UAAA,YAAX,WACI,OAAOX,KAAKgU,uCAIhBpN,OAAAC,eAAW4B,EAAA9H,UAAA,mBAAX,WACI,OAAOX,KAAKiU,kBAIhB,SAAuBX,GACnBtT,KAAKiU,aAAeX,mCAOxB7K,EAAA9H,UAAA+S,oBAAA,WACI1T,KAAKkU,KAAKR,uBAOdjL,EAAA9H,UAAA8M,aAAA,SAAagD,EAAmB0D,GAC5BnU,KAAKgU,MAAQvD,EACbzQ,KAAKkU,KAAK3X,WAAW4X,EAAO1D,EAAKa,iBACjC8C,SAASjM,KAAKxH,UAAUwJ,WAAWjB,KAAKlJ,KAAMmU,GAAO,IAIzD1L,EAAA9H,UAAA0Q,UAAA,WACIrR,KAAKwD,SACLxD,KAAKgU,MAAQ,MAIjBvL,EAAA9H,UAAAkT,oBAAA,SAAoBQ,KAKpB5L,EAAA9H,UAAAmT,cAAA,WACI9T,KAAKkU,KAAKI,gBAAe,IAI7B7L,EAAA9H,UAAAoT,cAAA,WACI/T,KAAKkU,KAAKI,gBAAe,IAI7B7L,EAAA9H,UAAAqP,eAAA,SAAeuE,EAAkBC,KAQjC/L,EAAA9H,UAAA2M,qBAAA,SAAqBC,KAQrB3G,OAAAC,eAAI4B,EAAA9H,UAAA,YAAJ,WACI,OAAaX,KAAMyU,4CAOvB7N,OAAAC,eAAc4B,EAAA9H,UAAA,gBAAd,WAII,OAHI,MAAQX,KAAK0U,YACb1U,KAAK0U,UAAY1U,KAAKgU,MAAMxC,cAAcxR,OAEvCA,KAAK0U,2CAINjM,EAAA9H,UAAAgU,SAAV,WACI,OAAO3U,KAAK4U,WAAa5U,KAAKgU,MAAM5B,qBAE5C3J,EA/GA,CAA2D1M,EAAA8Y,UAA9C9Y,EAAA0M,QAAOA,ECTd3M,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAkBV2M,EAAA,SAAAO,GAYI,SAAAP,EAAY6C,EAAa9H,EAAYjH,GAArC,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMuL,EAAK9H,EAAI/G,EAAEC,WACbmY,oBAAoB,GACrBtY,KAASwD,YAbRmE,EAAAsQ,WAA4B,KAC5BtQ,EAAA8P,cAAwB,EAa5B9P,EAAKsQ,WAAa,IAAI1Y,EAAAgZ,cAAcvY,KA0L5C,OA1MgE6M,GAAAX,EAAAO,GAoBrDP,EAAA/H,UAAAqU,eAAP,WACIhV,KAAKiU,cAAe,GAOxBvL,EAAA/H,UAAA2M,qBAAA,SAAqBC,GACjBvN,KAAKyU,WAAWQ,cAAcjV,KAAKkV,sBAIvCxM,EAAA/H,UAAA6M,oBAAA,WAII,OAH2CxN,KAAKqM,aAAcyI,oBAC1D9U,KAAKyU,WAAWtD,UAEblI,EAAAtI,UAAM6M,oBAAmBtE,KAAAlJ,OAIpC0I,EAAA/H,UAAAkL,iBAAA,SAAiB1G,EAAqB2G,GAClC7C,EAAAtI,UAAMkL,iBAAgB3C,KAAAlJ,KAACmF,EAAO2G,GAC9B9L,KAAKyU,WAAWlY,WAAWyD,KAAKuE,MAAOvE,KAAKkV,sBAIhDxM,EAAA/H,UAAA+M,WAAA,SAAWvI,EAAqB2G,GAC5B7C,EAAAtI,UAAM+M,WAAUxE,KAAAlJ,KAACmF,EAAO2G,GACxB9L,KAAKyU,WAAWQ,cAAcjV,KAAKkV,qBAC/BlV,KAAKiU,eACLjU,KAAKsT,UACLtT,KAAKiU,cAAe,IAK5BvL,EAAA/H,UAAAqL,aAAA,SAAa7G,GACT8D,EAAAtI,UAAMqL,aAAY9C,KAAAlJ,KAACmF,GACnBnF,KAAK0K,WAOThC,EAAA/H,UAAA4G,cAAA,WACI,OAAOvH,KAAKyU,WAAWlN,iBAI3BmB,EAAA/H,UAAAwU,QAAA,SACIjS,EACAkS,EACApT,EACAqT,GAEArV,KAAKsV,SAAS,IAAIvZ,EAAAwZ,YAAYvV,KAAKyU,WAAYe,KAAKC,MAAMvS,GAASkS,EAAapT,GAAOqT,IAM3F3M,EAAA/H,UAAA+U,WAAA,SAAWxE,EAAYyE,EAAeC,GAClC5V,KAAKyU,WAAWiB,WAAWxE,EAAOyE,EAAMC,IAM5ClN,EAAA/H,UAAAkV,YAAA,SAAYjY,GACR,OAAOoC,KAAKyU,WAAWoB,YAAYjY,IAIvC8K,EAAA/H,UAAAgR,QAAA,WACI3R,KAAKyU,WAAW9C,WAIpBjJ,EAAA/H,UAAAmV,OAAA,WACI9V,KAAKyU,WAAWqB,UAIpBpN,EAAA/H,UAAA2S,QAAA,WACItT,KAAKyU,WAAWnB,WAIpB5K,EAAA/H,UAAA+J,QAAA,WACI1K,KAAKyU,WAAW/J,WAOpBhC,EAAA/H,UAAAoV,OAAA,SAAOC,GACH,OAAOhW,KAAKyU,WAAWsB,OAAOC,IAIlCtN,EAAA/H,UAAAsV,QAAA,SAAQD,EAAa1C,QAAA,IAAAA,IAAAA,GAAA,GACjB,IAAMpH,EAASlM,KAAKyU,WAAWwB,QAAQD,EAAK1C,GAI5C,OAHIpH,IAAWoH,GACXtT,KAAKgV,iBAEF9I,GAIXxD,EAAA/H,UAAAuV,UAAA,SAAUF,GACN,OAAOhW,KAAKyU,WAAWyB,UAAUF,IAIrCtN,EAAA/H,UAAAwV,YAAA,SAAYH,GACR,OAAOhW,KAAKyU,WAAW0B,YAAYH,IAIvCpP,OAAAC,eAAI6B,EAAA/H,UAAA,kBAAJ,WACI,OAAOX,KAAKyU,WAAW2B,4CAO3B1N,EAAA/H,UAAAqS,iBAAA,SAAiBC,EAAwCrN,GACrD5F,KAAKyU,WAAWzB,iBAAiBC,EAASrN,IAI9C8C,EAAA/H,UAAAuS,qBAAA,SAAqBD,EAAwCrN,GACzD5F,KAAKyU,WAAWvB,qBAAqBD,EAASrN,IAIlD8C,EAAA/H,UAAA6R,aAAA,WACI,OAAOxS,KAAKyU,WAAWjC,gBAI3B9J,EAAA/H,UAAA+R,gBAAA,WACI,OAAO1S,KAAKyU,WAAW/B,mBAI3BhK,EAAA/H,UAAA+Q,SAAA,SAASiB,EAAaC,EAAmBC,GACrC7S,KAAKyU,WAAW/C,SAASiB,EAAKC,EAASC,IAI3CnK,EAAA/H,UAAA0V,cAAA,SAAcnF,EAAe1U,GACzBwD,KAAKyU,WAAW4B,cAAcnF,EAAO1U,IAOzCoK,OAAAC,eAAI6B,EAAA/H,UAAA,YAAJ,WACI,OAAOX,KAAKyU,4CAOhB/L,EAAA/H,UAAA2U,SAAA,SAASgB,EAAYjB,GACjBrV,KAAKyU,WAAWa,SAASgB,EAAOjB,IAO5B3M,EAAA/H,UAAAuU,kBAAR,WACI,OAAOxY,EAAEmG,QAAQK,SAAWF,SAAShD,KAAKuE,MAAMpG,IAAI,eAAgB,KAE5EuK,EA1MA,CAAgE3M,EAAAuM,UAAnDvM,EAAA2M,aAAYA,ECpBnB5M,EAAAA,IAAAA,MAAIC,EAAAD,EAAAC,KAAAD,EAAAC,OAUV4M,EAAA,SAAAM,GAWI,SAAAN,EAAY4C,EAAa9H,EAAYjH,GAArC,IAAA2H,EACI8E,EAAAC,KAAAlJ,KAAMuL,EAAK9H,EAAIjH,IAAQwD,YAVnBmE,EAAAoS,eAAgC,KAWpCpS,EAAKoS,eAAiB,IAAIxa,EAAAya,cAAcrS,KA+EhD,OA5F0EkF,GAAAV,EAAAM,GAoBtEN,EAAAhI,UAAA8V,SAAA,SAAShT,GACL,OAAOzD,KAAKuW,eAAeE,SAAShT,IAIxCkF,EAAAhI,UAAA+V,SAAA,SAASjT,GACL,OAAOzD,KAAKuW,eAAeG,SAASjT,IAIxCkF,EAAAhI,UAAAgW,iBAAA,SAAiBC,GACb5W,KAAKuW,eAAeI,iBAAiBC,IAIzCjO,EAAAhI,UAAAkW,aAAA,WACI,OAAO7W,KAAKuW,eAAeM,gBAI/BlO,EAAAhI,UAAAmW,UAAA,WACI9W,KAAKuW,eAAeO,aAIxBnO,EAAAhI,UAAAoW,YAAA,SAAYzT,GACRtD,KAAKuW,eAAeQ,YAAYzT,IAIpCqF,EAAAhI,UAAAqW,YAAA,WACI,OAAOhX,KAAKuW,eAAeS,eAI/BrO,EAAAhI,UAAAsW,aAAA,WACI,OAAOjX,KAAKuW,eAAeU,gBAI/BtO,EAAAhI,UAAAuW,YAAA,WACI,OAAOlX,KAAKuW,eAAeW,eAI/BtQ,OAAAC,eAAI8B,EAAAhI,UAAA,iBAAJ,WACI,OAAOX,KAAKuW,eAAeY,eAI/B,SAAcnB,GACVhW,KAAKuW,eAAeY,UAAYnB,mCAOpCrN,EAAAhI,UAAA+J,QAAA,WACIzB,EAAAtI,UAAM+J,QAAOxB,KAAAlJ,MACbA,KAAKuW,eAAe7L,WAIxB/B,EAAAhI,UAAAoV,OAAA,SAAOC,GACH,OAAOhW,KAAKuW,eAAeR,OAAOC,IAItCrN,EAAAhI,UAAAsV,QAAA,SAAQD,EAAa1C,GACjB,YADiB,IAAAA,IAAAA,GAAA,GACVtT,KAAKuW,eAAeN,QAAQD,EAAK1C,IAEhD3K,EA5FA,CAA0E5M,EAAA2M,cAA7D3M,EAAA4M,uBAAsBA,ECH7B7M,EAAAA,IAAAA,OAAIC,EAAAD,EAAAC,KAAAD,EAAAC,QAAGqb,YAAArb,EAAAqb,cAENnb,EAAYH,EAAIG,UAGvBS,EAAE2a,GAAGC,OAAS,SAAU9a,GACpB,IAAMgN,EAAM9M,EAAEsD,MACd,OAAIwJ,EAAIjM,QAAU,EACPiM,EAEJA,EAAI5D,GAAG3J,EAAUsb,MAAMC,cAAe,SAAUrS,GACnD,IAAMsS,EAAU/a,EAAEsD,MAG4B,IAA1CyX,EAAQhO,KAAK,kBAAkBlM,QAC/Bka,EAAQC,QAAQ,qCAGpB,IAAIC,EAAMF,EAAQhO,KAAK,kBAMvB,GAHAkO,EAAI9Z,YAAY,sBAGX8Z,EAAIzU,WAAayU,EAAI5U,QAAS,CAC/B,IAAM6U,EAAIpC,KAAKqC,IAAIJ,EAAQK,aAAcL,EAAQM,eACjDJ,EAAIxZ,KAAM+E,OAAQ0U,EAAG7U,MAAO6U,IAGhC,IAAMI,EAAI7S,EAAM8S,MAAQR,EAAQjD,SAASlS,KAAQqV,EAAI5U,QAAU,EACzDmV,EAAI/S,EAAMgT,MAAQV,EAAQjD,SAASnS,IAAOsV,EAAIzU,SAAW,EAEzDkV,EAAcX,EAAQ3L,KAAK,gBAIjC6L,EAAI/R,GADwB,kCACA,SAAUyS,GAClCV,EAAIvR,MACJuR,EAAI9Z,YAAY,qBAChB8Z,EAAM,OAIVA,EAAIxZ,KACAkE,IAAK6V,EAAI,KACT5V,KAAM0V,EAAI,KACVM,WAAYF,IACbta,SAAS,wBA2CpB/B,EAAAI,iBAAiB2D,qBAjCjB,SAA2BM,EAAa5D,GACpC,IAAM+b,GACF,kBACA,oBACA,oBACA,mBAGAC,EAAW,UAqBf,OApBIpY,EAAI5C,SAAS,aACbgb,EAAW,uBAGfpY,EAAIqJ,KAAK+O,GACJC,OAAO,SAACvH,EAAOwH,GAEZ,OADchc,EAAEgc,GACNC,GAAGJ,EAAgBK,KAAK,QAMrC9a,SAAS,aAGdsC,EAAIqJ,KAAK,cACJoP,KAAK,SAAC3H,EAAewH,GAClBhc,EAAEgc,GAAMpB,OAAO9a,KAEhB4D,ICtFLtE,EAAAA,IAAAA,MAAO,SAAAsb,GAEb,IAGI1T,EAHGM,EAAWlI,EAAIiI,MAAMC,SAyD5B,SAAA2N,EAAiBmH,GAQb,IAPA,IAMIC,EANEC,GAAU,WAAY,IAEtBC,EAAQ,SAACC,GACX,OAAQA,GAAQ,SAAWA,GAItB9b,EAAI,EAAGC,EAAI2b,EAAOzb,OAAQH,EAAIC,EAAGD,IAAK,CAC3C,IAAK6b,EAAMF,IAEHE,EADJF,EAAUD,EAAQ3a,IAAI6a,EAAO5b,GAAK,eACd,CAEhB,IAAM+b,EAAQJ,EAAQI,MAAM,4DAExBJ,EADAI,EACaA,EAAM,GAAE,QAAQC,KAAKC,MAAMC,SAAS,IAAG,IAAIH,EAAM,GAEpD,KAIlBF,EAAMF,IACND,EAAQ3a,IAAI6a,EAAO5b,GAAK,aAAc2b,GAI9C,OAAOD,EA7EXpc,EAAE2a,GAAGkC,QAAU,SAAU/c,GACrB,MAAI,iBAAoBA,EACbmV,EAAQjV,EAAEsD,OAMzB,SAAoB8Y,EAAiBtc,GACjC,GAAIsc,EAAQvb,QAAU,EAClB,OAAOub,EAGNpV,IACDA,EAAYM,EAASC,OAAO,4uBAiBhC,IAA2BuV,EAOrBtY,EAAQ4X,EAAQhN,KAAK,iBACvB2N,EAAQ,KAOZ,OANIvY,IACA4X,EAAQ3a,KAAM6C,mBAAoBE,IAClCuY,GATIC,UAAW,2BAFQF,EAWGtY,GATuB,IAC7CyY,OAAQ,sBAAwBH,EAAM,MAU9CV,EAAQpT,OAAOhC,EAAU+V,IAElB9H,EAAQmH,GA1CJc,CAAWld,EAAEsD,QA2F5BjE,EAAAI,iBAAiB2D,qBATjB,SAA2BM,EAAa5D,GAKpC,OAJA4D,EAAIqJ,KAAK,iCACJoP,KAAK,SAAC3H,EAAewH,GAClBhc,EAAEgc,GAAMa,QAAQ/c,KAEjB4D,IAnGE,EAAHrE,EAAAD,EAAAC,KAAAD,EAAAC,QAAGqb,YAAArb,EAAAqb,eCPPtb,GAAAA,IAAAA,OAAIC,GAAAD,GAAAC,KAAAD,GAAAC,QAAGqb,YAAArb,GAAAqb,cAuCbrb,GAAAI,iBAAiB2D,qBA/BjB,SAA2BM,EAAa5D,GACpC,IAAMsZ,EAAS,SAAC4C,EAAemB,GAC3B,IAAMC,EAAQpd,EAAEgc,GACZmB,EACAC,EAAMhc,SAAS,2BAEfgc,EAAMjc,YAAY,4BAqB1B,OALAuC,EAAIqJ,KAAK,+CACJoP,KAAK,SAAC3H,EAAewH,GAbN,IAACA,EACXjV,EACAsW,EAFWrB,EAcDA,EAbVjV,EAAK/G,EAAEgc,GAAMpS,KAAK,OAEpB,YADEyT,EAAS3Z,EAAIqJ,KAAK,IAAMhG,IACNwD,QAAQ,SAC5BvK,EAAEgc,GAAM5a,SAAS,2BAErBgY,EAAO4C,IAAQqB,EAAOrQ,OACtBqQ,EAAOnU,GAAG,0CAA2C,SAACT,GAClD2Q,EAAO4C,IAAQhc,EAAEyI,EAAMvH,QAAQ8L,WAShCtJ,ICnCLtE,GAAAA,IAAAA,OAAIC,GAAAD,GAAAC,KAAAD,GAAAC,QAAGqb,YAAArb,GAAAqb,cAENnb,GAAYH,GAAIG,UAuFvBF,GAAAI,iBAAiB2D,qBA/EjB,SAA2BM,EAAa5D,GAMpC,IAAMwd,EAAkB,WACpB,OAAO5Z,EAAIqJ,KAAK,mBAGdwQ,EAAsB,SAACC,GACzB,IAAMH,EAASG,EAAQzQ,KAAK,SAC5B,GAAIsQ,EAAOxc,OACP,OAAOwc,EAEX,IAAMI,EAAUD,EAAQzQ,KAAK,UAC7B,OAAI0Q,EAAQ5c,OACD4c,EAEJ,MAGLC,EAAU,SAACL,EAAgBra,GACzBqa,IACI,UAAYA,EAAO,GAAGM,SACtBN,EAAOb,KAAK,UAAWxZ,GAAI4a,WAAW,WAC/B,WAAaP,EAAO,GAAGM,UAC9BN,EAAOrQ,IAAIhK,EAAK,KAAO,OAAO4a,WAAW,aAgDrD,OA3BAN,IACKpU,GAAG,2BAA4B,SAACT,GAC7B,IAAM+U,EAAUxd,EAAEyI,EAAMoV,eAClBzB,EAAUpc,EAAEyI,EAAMvH,QAClBmc,EAASE,EAAoBC,GAC7BM,GAAYN,EAAQ1c,SAAS,wBAE/Bsb,EAAQtb,SAAS,uBACjB4c,EAAQL,EAAQS,GACT1B,EAAQtb,SAAS,qBACpBvB,GAAU8B,SAASG,QAAUjC,GAAUsb,MAAMkD,sBAC7CL,EAAQL,EAAQS,GAChBrV,EAAMC,oBAIjByT,KAAK,SAAC3H,EAAeoJ,IAhCG,SAACJ,GAC1B,IAAMH,EAASE,EAAoBC,GACnC,GAAIH,EAAQ,CACR,IAAMW,EAAeX,EAAO,GAAIW,OAChC,GAAIA,EACA,OAAOhe,EAAEge,GAGjB,OAAOhe,KAyBHie,CAAqBje,EAAE4d,IAClB1U,GAAG,SAAU,SAACT,GACX,IAxBayV,EACnBC,EAuBYX,GAxBOU,EAwBuBle,EAAEyI,EAAMvH,QAvBlDid,EAAOD,EAAOtU,KAAK,OAClB0T,IAAkBvQ,KAAK,UAAYoR,EAAO,OAuBhCX,EAAQY,SAAStd,SAAS,sBAC3B0c,EAAQvT,QAAQ,qBAEpBxB,EAAMC,qBAIfhF,ICrFLtE,GAAAA,IAAAA,OAAIC,GAAAD,GAAAC,KAAAD,GAAAC,QAAGqb,YAAArb,GAAAqb,cAoBbrb,GAAAI,iBAAiB2D,qBAZjB,SAA2BM,EAAa5D,GAQpC,OAPA4D,EAAIqJ,KAAK,oBACJ7D,GAAG,YAAa,SAACT,GACGzI,EAAEyI,EAAMoV,eACpBO,SACArR,KAAK,qBACDsR,SAEV3a,IChBLtE,GAAAA,IAAAA,OAAIC,GAAAD,GAAAC,KAAAD,GAAAC,QAAGqb,YAAArb,GAAAqb,cA+BTvO,KA5BED,GAA4B,SAAUzD,GACxC,IAEIkT,EAFEza,EAAcuH,EAAMvH,OACpBod,EAAS7V,EAIX,MAAQvH,EAAOqd,SAAW,MAAQrd,EAAOsd,UACrC,MAAQF,EAAE/C,OAAS,MAAQ+C,EAAE7C,OAC7Bva,EAAOqd,QAAUD,EAAE/C,MACnBra,EAAOsd,QAAUF,EAAE7C,OACZ6C,EAAEG,gBAAkBH,EAAEG,eAAe,KAC5Cvd,EAAOqd,QAAUD,EAAEG,eAAe,GAAGlD,MACrCra,EAAOsd,QAAUF,EAAEG,eAAe,GAAGhD,QAIxC,2BAA6BiD,KAAKxd,EAAOyd,YAC1ChD,EAAKhU,SAASiX,YAAY,gBACvBC,eAAe,SAAS,GAAM,EAAMP,EAAEQ,KAAM,EAC3C5d,EAAO6d,QAAS7d,EAAO8d,QAAS9d,EAAOqd,QAASrd,EAAOsd,QACvDF,EAAEW,QAASX,EAAEY,OAAQZ,EAAEa,SAAUb,EAAEc,QACnC,EAAG,MAEDzD,EAAI0D,cAAe,EACzBne,EAAOoe,cAAc3D,MAqB7Btc,GAAAI,iBAAiB2D,qBATjB,SAAoBM,EAAa5D,GAK7B,OAJKqM,IAAa9M,GAAAgT,OAAOkN,SAAWlgB,GAAAgT,OAAOkN,QAAQC,QAC/CngB,GAAAgT,OAAOkN,QAAQC,MAAMC,MAAQvT,GAC7BC,IAAY,GAETzI","sourcesContent":["namespace CDP.UI {\r\n\r\n    import Config       = CDP.Config;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Theme] \";\r\n\r\n    /**\r\n     * @interface PlatformTransition\r\n     * @brief プラットフォームごとの Transition を格納\r\n     */\r\n    export interface PlatformTransition {\r\n        [platform: string]: string;     // ex) ios: \"slide\"\r\n        fallback: string;               // fallback transition prop\r\n    }\r\n\r\n    /**\r\n     * @interface TransitionMap\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface TransitionMap {\r\n        [transitionName: string]: PlatformTransition;\r\n    }\r\n\r\n    /**\r\n     * @interface ThemeInitOptions\r\n     * @brief トランジションマップ\r\n     */\r\n    export interface ThemeInitOptions {\r\n        platform?: string;                  // platform を指定. default:\"auto\"\r\n        reserveScrollbarRegion?: boolean;   // PC デバッグ環境ではスクロールバーを表示. default: \"true\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Theme\r\n     * @brief UI Theme 設定を行うユーティリティクラス\r\n     */\r\n    export class Theme {\r\n\r\n        private static s_platforms: string[] = [\"ios\", \"android\"];\r\n        private static s_pageTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"slide\",\r\n                android: \"floatup\",\r\n                fallback: \"slide\",\r\n            },\r\n            \"platform-alternative\": {\r\n                ios: \"slideup\",\r\n                android: \"floatup\",\r\n                fallback: \"slideup\",\r\n            },\r\n        };\r\n        private static s_dialogTransitionMap: TransitionMap = {\r\n            \"platform-default\": {\r\n                ios: \"popzoom\",\r\n                android: \"crosszoom\",\r\n                fallback: \"none\",\r\n            },\r\n        };\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods:\r\n\r\n        /**\r\n         * Theme の初期化\r\n         *\r\n         * @param options オプション指定\r\n         * @returns true: 成功 / false: 失敗\r\n         */\r\n        public static initialize(options?: ThemeInitOptions): string {\r\n            const opt = $.extend({}, {\r\n                platform: \"auto\",\r\n                reserveScrollbarRegion: true,\r\n            }, options);\r\n\r\n            if (\"auto\" === opt.platform) {\r\n                return Theme.detectUIPlatform(opt.reserveScrollbarRegion);\r\n            } else {\r\n                if (Theme.setCurrentUIPlatform(opt.platform)) {\r\n                    return opt.platform;\r\n                } else {\r\n                    console.warn(TAG + \"setCurrentUIPlatform(), failed. platform: \" + opt.platform);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在指定されている UI Platform を取得\r\n         *\r\n         * @return {String} ex) \"ios\"\r\n         */\r\n        public static getCurrentUIPlatform(): string {\r\n            const $htms = $(\"html\");\r\n            for (let i = 0, n = Theme.s_platforms.length; i < n; i++) {\r\n                if ($htms.hasClass(\"ui-platform-\" + Theme.s_platforms[i])) {\r\n                    return Theme.s_platforms[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * UI Platform を設定\r\n         *\r\n         * @return {String} true: 成功 / false: 失敗\r\n         */\r\n        public static setCurrentUIPlatform(platform: string): boolean {\r\n            if (null == platform || Theme.s_platforms.indexOf(platform) >= 0) {\r\n                const $htms = $(\"html\");\r\n                Theme.s_platforms.forEach((target) => {\r\n                    $htms.removeClass(\"ui-platform-\" + target);\r\n                });\r\n                if (platform) {\r\n                    $htms.addClass(\"ui-platform-\" + platform);\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * 現在の Platform を判定し最適な platform を自動決定\r\n         *\r\n         * @param reserveScrollbarRegion PC デバッグ環境ではスクロールバーを表示. default: true\r\n         * @returns ex) \"ios\"\r\n         */\r\n        public static detectUIPlatform(reserveScrollbarRegion: boolean = true): string {\r\n            let platform = \"\";\r\n            // platform の設定\r\n            if (Framework.Platform.iOS) {\r\n                $(\"html\").addClass(\"ui-platform-ios\");\r\n                platform = \"ios\";\r\n            } else {\r\n                $(\"html\").addClass(\"ui-platform-android\");\r\n                platform = \"android\";\r\n            }\r\n            // PC デバッグ環境ではスクロールバーを表示\r\n            if (Config.DEBUG && reserveScrollbarRegion && !Framework.Platform.Mobile) {\r\n                $(\"body\").css(\"overflow-y\", \"scroll\");\r\n            }\r\n            return platform;\r\n        }\r\n\r\n        /**\r\n         * platform を配列で登録\r\n         * 上書きされる\r\n         *\r\n         * @param {String[]} platforms [in] OS ex): [\"ios\", \"android\"]\r\n         */\r\n        public static registerUIPlatforms(platforms: string[]): void {\r\n            if (platforms) {\r\n                Theme.s_platforms = platforms;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerPageTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_pageTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を登録\r\n         * 上書きされる\r\n         *\r\n         * @param {TransitionMap} map [in] TransitionMap を指定\r\n         */\r\n        public static registerDialogTransitionMap(map: TransitionMap): void {\r\n            if (map) {\r\n                Theme.s_dialogTransitionMap = map;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * page transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryPageTransition(original: string): string {\r\n            const convert = Theme.s_pageTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * dialog transition を取得\r\n         * TransitionMap にアサインされているものであれば変換\r\n         *\r\n         * @return {String[]} \"slide\"\r\n         */\r\n        public static queryDialogTransition(original: string): string {\r\n            const convert = Theme.s_dialogTransitionMap[original];\r\n            if (convert) {\r\n                return convert[Theme.getCurrentUIPlatform()] || convert.fallback;\r\n            } else {\r\n                return original;\r\n            }\r\n        }\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    // jquey.mobile.changePage() の Hook.\r\n    function applyCustomChangePage() {\r\n        const jqmChangePage: (to: any, options?: ChangePageOptions) => void = $.mobile.changePage.bind($.mobile);\r\n\r\n        function customChangePage(to: any, options?: ChangePageOptions): void {\r\n            if (_.isString(to)) {\r\n                if (options && options.transition) {\r\n                    options.transition = Theme.queryPageTransition(options.transition);\r\n                }\r\n            }\r\n            jqmChangePage(to, options);\r\n        }\r\n\r\n        $.mobile.changePage = customChangePage;\r\n    }\r\n\r\n    // framework 初期化後に適用\r\n    Framework.waitForInitialize()\r\n        .done(() => {\r\n            applyCustomChangePage();\r\n        });\r\n}\r\n","namespace CDP.UI {\r\n\r\n    /**\r\n     * @interface DomExtensionOptions\r\n     * @breif DomExtension に渡すオプションインターフェイス\r\n     */\r\n    export interface DomExtensionOptions {\r\n        [key: string]: any;\r\n    }\r\n\r\n    /**\r\n     * @type DomExtension\r\n     * @brief DOM 拡張関数\r\n     */\r\n    export type DomExtension = ($target: JQuery, DomExtensionOptions?: Object) => JQuery;\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class ExtensionManager\r\n     * @brief 拡張機能を管理するユーティリティクラス\r\n     */\r\n    export class ExtensionManager {\r\n\r\n        private static s_domExtensions: DomExtension[] = [];\r\n\r\n        /**\r\n         * DOM 拡張関数の登録\r\n         *\r\n         * @param {DomExtension} func [in] DOM 拡張関数\r\n         */\r\n        public static registerDomExtension(func: DomExtension): void {\r\n            this.s_domExtensions.push(func);\r\n        }\r\n\r\n        /**\r\n         * DOM 拡張を適用\r\n         *\r\n         * @param {jQuery} $ui       [in] 拡張対象の DOM\r\n         * @param {Object} [options] [in] オプション\r\n         */\r\n        public static applyDomExtension($ui: JQuery, options?: DomExtensionOptions): void {\r\n            this.s_domExtensions.forEach((func: DomExtension) => {\r\n                func($ui, options);\r\n            });\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:no-bitwise */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.Toast] \";\r\n\r\n    /**\r\n     * @class Toast\r\n     * @brief Android SDK の Toast クラスのように自動消滅するメッセージ出力ユーティリティ\r\n     *        入れ子の関係を実現するために module で実装\r\n     */\r\n    export module Toast {\r\n\r\n        // 表示時間の定義\r\n        export let LENGTH_SHORT = 1500;   //!< 短い:1500 msec\r\n        export let LENGTH_LONG  = 4000;   //!< 長い:4000 msec\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetX {\r\n            LEFT    = 0x0001,\r\n            RIGHT   = 0x0002,\r\n            CENTER  = 0x0004,\r\n        }\r\n\r\n        //! @enum オフセットの基準\r\n        export enum OffsetY {\r\n            TOP     = 0x0010,\r\n            BOTTOM  = 0x0020,\r\n            CENTER  = 0x0040,\r\n        }\r\n\r\n        /**\r\n         * @interface StyleBuilder\r\n         * @brief     スタイル変更時に使用するインターフェイス\r\n         *            css にスタイルを逃がす場合、独自の class を設定し、getStyle は null を返すこと。\r\n         */\r\n        export interface StyleBuilder {\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string;\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any;\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number;\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number;\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number;\r\n        }\r\n\r\n        /**\r\n         * @class StyleBuilderDefault\r\n         * @brief スタイル変更時に使用する既定の構造体オブジェクト\r\n         */\r\n        export class StyleBuilderDefault implements StyleBuilder {\r\n\r\n            //! class attribute に設定する文字列を取得\r\n            getClass(): string {\r\n                return \"ui-loader ui-overlay-shadow ui-corner-all\";\r\n            }\r\n\r\n            //! style attribute に設定する JSON オブジェクトを取得\r\n            getStyle(): any {\r\n                const style = {\r\n                    \"padding\":          \"7px 25px 7px 25px\",\r\n                    \"display\":          \"block\",\r\n                    \"background-color\": \"#1d1d1d\",\r\n                    \"border-color\":     \"#1b1b1b\",\r\n                    \"color\":            \"#fff\",\r\n                    \"text-shadow\":      \"0 1px 0 #111\",\r\n                    \"font-weight\":      \"bold\",\r\n                    \"opacity\":          0.8,\r\n                };\r\n                return style;\r\n            }\r\n\r\n            //! オフセットの基準位置を取得\r\n            getOffsetPoint(): number {\r\n                return OffsetX.CENTER | OffsetY.BOTTOM;\r\n            }\r\n\r\n            //! X 座標のオフセット値を取得\r\n            getOffsetX(): number {\r\n                return 0;\r\n            }\r\n\r\n            //! Y 座標のオフセット値を取得\r\n            getOffsetY(): number {\r\n                return -75;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Toast 表示\r\n         *\r\n         * @param message  [in] メッセージ\r\n         * @param duration [in] 表示時間を設定 (msec) default: LENGTH_SHORT\r\n         * @param style    [in] スタイル変更する場合には派生クラスオブジェクトを指定\r\n         */\r\n        export function show(message: string, duration: number = Toast.LENGTH_SHORT, style?: StyleBuilder): void {\r\n            const $mobile = $.mobile;\r\n            const info = style || new StyleBuilderDefault();\r\n            const setCSS = info.getStyle() ? true : false;\r\n\r\n            // 改行コードは <br/> に置換する\r\n            const msg = message.replace(/\\n/g, \"<br/>\");\r\n\r\n            // メッセージ element の動的生成\r\n            const html = \"<div>\" + msg + \"</div>\";\r\n            const box = $(html).addClass(info.getClass());\r\n            if (setCSS) {\r\n                box.css(info.getStyle());\r\n            }\r\n\r\n            // 自動改行されてもよいように、基点を設定してから追加\r\n            box.css({\r\n                \"top\": 0,\r\n                \"left\": 0,\r\n            }).appendTo($mobile.pageContainer);\r\n\r\n            // 配置位置の決定\r\n            const offsetPoint = info.getOffsetPoint();\r\n            const $window = $(window);\r\n            let posX, posY;\r\n\r\n            const box_width = box.width() + parseInt(box.css(\"padding-left\"), 10) + parseInt(box.css(\"padding-right\"), 10);\r\n            const box_height = box.height() + parseInt(box.css(\"padding-top\"), 10) + parseInt(box.css(\"padding-bottom\"), 10);\r\n\r\n            switch (offsetPoint & 0x000F) {\r\n                case OffsetX.LEFT:\r\n                    posX = 0 + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.RIGHT:\r\n                    posX = $window.width() - box_width + info.getOffsetX();\r\n                    break;\r\n                case OffsetX.CENTER:\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x000F));\r\n                    posX = ($window.width() / 2) - (box_width / 2) + info.getOffsetX();\r\n                    break;\r\n            }\r\n\r\n            switch (offsetPoint & 0x00F0) {\r\n                case OffsetY.TOP:\r\n                    posY = 0 + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.BOTTOM:\r\n                    posY = $window.height() - box_height + info.getOffsetY();\r\n                    break;\r\n                case OffsetY.CENTER:\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n                default:\r\n                    console.warn(TAG + \"warn. unknown offsetPoint:\" + (offsetPoint & 0x00F0));\r\n                    posY = ($window.height() / 2) - (box_height / 2) + info.getOffsetY();\r\n                    break;\r\n            }\r\n\r\n            // 表示\r\n            box.css({\r\n                \"top\": posY,\r\n                \"left\": posX,\r\n            })\r\n            .delay(duration)\r\n            .fadeOut(400, function () {\r\n                $(this).remove();\r\n            });\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.Dialog] \";\r\n\r\n    /**\r\n     * H/W Back Key Hook 関数\r\n     */\r\n    export type DialogBackKeyHandler = (event?: JQuery.Event) => void;\r\n\r\n    /**\r\n     * @interface DialogOptions\r\n     *            ダイアログオプションインターフェイス\r\n     */\r\n    export interface DialogOptions extends PopupOptions {\r\n        src?: string;                   //!< {String} template ファイルのパス                                 default: undefined\r\n        title?: string;                 //!< {String} ダイアログタイトル                                      default: undefined\r\n        message?: string;               //!< {String} メインメッセージ                                        default: undefined\r\n        idPositive?: string;            //!< {String} Positive ボタンのID                                     default: \"dlg-btn-positive\"\r\n        idNegative?: string;            //!< {String} Nagative ボタンのID                                     default: \"dlg-btn-negative\"\r\n        event?: string;                 //!< {String} Dialog クラスが管理するイベント                         default: \"vclick\"\r\n        defaultAutoClose?: boolean;     //!< {Boolean} data-auto-close が指定されていない場合の既定値         default: false\r\n        forceOverwriteAfterClose?: boolean; //!< {Boolean} afterclose オプションを強制上書きするための設定    default: false\r\n        labelPositive?: string;         //!< {String} Positive ボタンラベル                                   default: \"OK\"\r\n        labelNegative?: string;         //!< {String} Negative ボタンラベル                                   default: \"Cancel\"\r\n        backKey?: \"close\" | \"deny\" | DialogBackKeyHandler;  //!< H/W backKey の振る舞い                       default: \"close\"\r\n        scrollEvent?: \"deny\" | \"allow\" | \"adjust\";   //!< {String} scrollの抑止方式  (※ adjust は試験的)     default: \"deny\"\r\n        domExtensionOptions?: DomExtensionOptions;   //!< DOM拡張オプション. null|undefined で拡張しない      default: {}\r\n        [x: string]: any;               //!< any dialog template parameters.\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class Dialog\r\n     * @brief 汎用ダイアログクラス\r\n     *        jQM の popup widget によって実装\r\n     */\r\n    export class Dialog {\r\n\r\n        private _template: Tools.JST = null;\r\n        private _settings: DialogOptions = null;\r\n        private _$dialog: JQuery = null;\r\n\r\n        private static s_activeDialog: Dialog = null;\r\n        private static s_oldBackKeyHandler: (event?: JQuery.Event) => void = null;\r\n        private static s_defaultOptions: DialogOptions = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param id      {String}        [in] ダイアログ DOM ID を指定 ex) #dialog-hoge\r\n         * @param options {DialogOptions} [in] オプション\r\n         */\r\n        constructor(id: string, options?: DialogOptions) {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            // 設定を更新\r\n            this._settings = $.extend({}, Dialog.s_defaultOptions, options);\r\n            // ダイアログテンプレートを作成\r\n            this._template = Tools.Template.getJST(id, this._settings.src);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 表示\r\n         * 表示をして始めて DOM が有効になる。\r\n         *\r\n         * @param options {DialogOptions} [in] オプション (src は無視される)\r\n         * @return ダイアログの jQuery オブジェクト\r\n         */\r\n        public show(options?: DialogOptions): JQuery {\r\n            const $document = $(document);\r\n            const $body = $(\"body\");\r\n            const $page = (<any>$body).pagecontainer(\"getActivePage\");\r\n\r\n            const ofcHidden = {\r\n                \"overflow\":     \"hidden\",\r\n                \"overflow-x\":   \"hidden\",\r\n                \"overflow-y\":   \"hidden\",\r\n            };\r\n            const ofcBody = { // body overflow context\r\n                \"overflow\":     $body.css(\"overflow\"),\r\n                \"overflow-x\":   $body.css(\"overflow-x\"),\r\n                \"overflow-y\":   $body.css(\"overflow-y\"),\r\n            };\r\n            const parentScrollPos = $body.scrollTop();\r\n            const ofcPage = { // page overflow context\r\n                \"overflow\":     $page.css(\"overflow\"),\r\n                \"overflow-x\":   $page.css(\"overflow-x\"),\r\n                \"overflow-y\":   $page.css(\"overflow-y\"),\r\n            };\r\n\r\n            const scrollEvent = \"scroll touchmove mousemove MSPointerMove\";\r\n\r\n            const scrollHander = (event: JQuery.Event) => {\r\n                if (\"deny\" === this._settings.scrollEvent) {\r\n                    event.preventDefault();\r\n                } else if (\"adjust\" === this._settings.scrollEvent) {\r\n                    $body.scrollTop(parentScrollPos);\r\n                }\r\n            };\r\n\r\n            // option が指定されていた場合更新\r\n            if (null != options) {\r\n                this._settings = $.extend({}, this._settings, options);\r\n            }\r\n\r\n            // afterclose 処理は Dialog の破棄処理を実装するため基本的に設定禁止 (強制上書きモードを設定使用可)\r\n            if (this._settings.afterclose && !this._settings.forceOverwriteAfterClose) {\r\n                console.warn(TAG + \"cannot accept 'afterclose' option. please instead using 'popupafterclose' event.\");\r\n                delete this._settings.afterclose;\r\n            }\r\n\r\n            // title の有無\r\n            (<any>this._settings)._titleState = this._settings.title ? \"ui-has-title\" : \"ui-no-title\";\r\n\r\n            /*\r\n             * template から jQuery オブジェクトを作成し、\r\n             * <body> 直下に追加.\r\n             * $page では Backbone event を受けられないことに注意\r\n             */\r\n            this._$dialog = $(this._template(this._settings));\r\n            this._$dialog.localize();\r\n            $body.append(this._$dialog);\r\n\r\n            // theme を解決\r\n            this.resolveTheme();\r\n\r\n            this._$dialog\r\n                .on(\"popupcreate\", (event: JQuery.Event) => {\r\n                    // スクロールを抑止\r\n                    if (\"allow\" !== this._settings.scrollEvent) {\r\n                        $document.on(scrollEvent, scrollHander);\r\n                    }\r\n                    $body.css(ofcHidden);\r\n                    $page.css(ofcHidden);\r\n                    Dialog.register(this);\r\n                })\r\n                .enhanceWithin();\r\n\r\n            // DOM 拡張\r\n            if (null != this._settings.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this._$dialog, this._settings.domExtensionOptions);\r\n            }\r\n\r\n            this.onBeforeShow()\r\n                .done(() => {\r\n                    // 表示\r\n                    this._$dialog\r\n                        .popup($.extend({}, {\r\n                            positionTo: \"window\",\r\n                            afterclose: (event: JQuery.Event, ui: any) => {\r\n                                // スクロール状態を戻す\r\n                                $page.css(ofcPage);\r\n                                $body.css(ofcBody);\r\n                                if (\"allow\" !== this._settings.scrollEvent) {\r\n                                    $document.off(scrollEvent, scrollHander);\r\n                                }\r\n                                Dialog.register(null);\r\n                                this._$dialog.remove();\r\n                                this._$dialog = null;\r\n                            },\r\n                        }, this._settings))\r\n                        .popup(\"open\").on(this._settings.event, (event: JQuery.Event) => {\r\n                            // \"data-auto-close='false'\" が指定されている要素は dialog を閉じない\r\n                            let autoClose = $(event.target).attr(\"data-auto-close\");\r\n                            if (null == autoClose) {\r\n                                autoClose = this._settings.defaultAutoClose ? \"true\" : \"false\";\r\n                            }\r\n                            if (\"false\" === autoClose) {\r\n                                return;\r\n                            }\r\n                            this.close();\r\n                            event.preventDefault();\r\n                        });\r\n\r\n                })\r\n                .fail((error) => {\r\n                    console.error(TAG + \"Dialog.show() failed.\");\r\n                    if (this._$dialog) {\r\n                        this._$dialog.trigger(\"error\", error);\r\n                    }\r\n                });\r\n\r\n            return this._$dialog;\r\n        }\r\n\r\n        /**\r\n         * 終了\r\n         * 基本的には自動で閉じるが、\r\n         * 表示中のダイアログをクライアント側から閉じるメソッド\r\n         */\r\n        public close(): void {\r\n            if (this._$dialog) {\r\n                this._$dialog.popup(\"close\");\r\n            }\r\n        }\r\n\r\n        //! ダイアログ element を取得\r\n        public get $el(): JQuery {\r\n            return this._$dialog;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods: Override\r\n\r\n        /**\r\n         * ダイアログ表示の直前\r\n         * DOM を操作できるタイミングで呼び出される.\r\n         *\r\n         * @return {IPromiseBase} promise オブジェクト\r\n         */\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            return Promise.resolve<void>();\r\n        }\r\n\r\n        /**\r\n         * ダイアログの使用する Theme を解決\r\n         * 不要な場合はオーバーライドすることも可能\r\n         */\r\n        protected resolveTheme(): void {\r\n            const queryTheme = (): string => {\r\n                return $(\".ui-page-active\").jqmData(\"theme\");\r\n            };\r\n\r\n            let candidateTheme: string;\r\n\r\n            if (!this._settings.theme) {\r\n                const domTheme = this._$dialog.jqmData(\"theme\");\r\n                if (!domTheme) {\r\n                    this._settings.theme = candidateTheme = queryTheme();\r\n                }\r\n\r\n            }\r\n            if (!this._settings.overlayTheme) {\r\n                const domOverlayTheme = this._$dialog.jqmData(\"overlay-theme\");\r\n                if (!domOverlayTheme) {\r\n                    this._settings.overlayTheme = candidateTheme || queryTheme();\r\n                }\r\n            }\r\n\r\n            // transition の更新\r\n            this._settings.transition = Theme.queryDialogTransition(this._settings.transition);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public static methods\r\n\r\n        /**\r\n         * Dialog の既定オプションを更新\r\n         * すべての Dialog が使用する共通設定\r\n         *\r\n         * @param options {DialogOptions} [in] ダイアログオプション\r\n         */\r\n        public static setDefaultOptions(options: DialogOptions): void {\r\n            // Dialog 共通設定の初期化\r\n            Dialog.initCommonCondition();\r\n            $.extend(true, Dialog.s_defaultOptions, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        // 現在 active なダイアログとして登録する\r\n        private static register(dialog: Dialog): void {\r\n            if (null != dialog && null != Dialog.s_activeDialog) {\r\n                console.warn(TAG + \"new dialog proc is called in the past dialog's one. use setTimeout() for post process.\");\r\n            }\r\n            Dialog.s_activeDialog = dialog;\r\n        }\r\n\r\n        /**\r\n         * Dialog 共通設定の初期化\r\n         */\r\n        private static initCommonCondition(): void {\r\n            // Framework の初期化後に処理する必要がある\r\n            if (!Framework.isInitialized()) {\r\n                console.warn(TAG + \"initCommonCondition() should be called after Framework.initialized.\");\r\n                return;\r\n            }\r\n\r\n            if (null == Dialog.s_oldBackKeyHandler) {\r\n                // Back Button Handler\r\n                Dialog.s_oldBackKeyHandler = CDP.setBackButtonHandler(null);\r\n                CDP.setBackButtonHandler(Dialog.customBackKeyHandler);\r\n\r\n                // 既定オプション\r\n                Dialog.s_defaultOptions = {\r\n                    idPositive:             \"dlg-btn-positive\",\r\n                    idNegative:             \"dlg-btn-negative\",\r\n                    event:                  Framework.getDefaultClickEvent(),\r\n                    dismissible:            false,\r\n                    defaultAutoClose:       false,\r\n                    transition:             \"platform-default\",\r\n                    labelPositive:          \"OK\",\r\n                    labelNegative:          \"Cancel\",\r\n                    backKey:                \"close\",\r\n                    scrollEvent:            \"deny\",\r\n                    domExtensionOptions:    {},\r\n                };\r\n            }\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button Handler\r\n         */\r\n        private static customBackKeyHandler(event?: JQuery.Event): void {\r\n            if (null != Dialog.s_activeDialog) {\r\n                if (\"close\" === Dialog.s_activeDialog._settings.backKey) {\r\n                    Dialog.s_activeDialog.close();\r\n                } else if (\"function\" === typeof Dialog.s_activeDialog._settings.backKey) {\r\n                    (<DialogBackKeyHandler>Dialog.s_activeDialog._settings.backKey)(event);\r\n                }\r\n                return; // Dialog が active な場合、常に既定のハンドラには渡さない\r\n            }\r\n            Dialog.s_oldBackKeyHandler(event);\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    const TAG = \"[CDP.UI.DialogCommons] \";\r\n\r\n    /**\r\n     * Alert\r\n     * alert メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function alert(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-solo\">\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-a ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgAlert = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgAlert.show();\r\n    }\r\n\r\n    /**\r\n     * Confirm\r\n     * 確認メッセージ表示\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function confirm(message: string, options?: DialogOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"true\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgConfirm = new Dialog(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgConfirm.show();\r\n    }\r\n\r\n    /**\r\n     * @interface DialogCommonsOptions\r\n     * @brief prompt のオプション\r\n     */\r\n    export interface DialogPromptOptions extends DialogOptions {\r\n        eventOK?: string; //!< OK ボタン押下時の event: default: promptok\r\n    }\r\n\r\n    /**\r\n     * @class DialogPrompt\r\n     * @brief prompt ダイアログ (非公開)\r\n     */\r\n    class DialogPrompt extends Dialog {\r\n\r\n        private _eventOK: string;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(id: string, options?: DialogPromptOptions) {\r\n            super(id, options);\r\n            this._eventOK = options.eventOK || \"promptok\";\r\n        }\r\n\r\n        //! ダイアログ表示の直前\r\n        protected onBeforeShow(): IPromiseBase<void> {\r\n            const onCommit = (event: JQuery.Event) => {\r\n                const text = this.$el.find(\"#_ui-prompt\").val();\r\n                this.$el.trigger(this._eventOK, text);\r\n                this.close();\r\n                event.preventDefault();\r\n            };\r\n\r\n            this.$el\r\n                .on(\"vclick\", \".command-prompt-ok \", (event: JQuery.Event) => {\r\n                    onCommit(event);\r\n                })\r\n                .on(\"keydown\", \"#_ui-prompt\", (event: JQuery.Event) => {\r\n                    const ENTER_KEY_CODE = 13;\r\n                    if (ENTER_KEY_CODE === event.keyCode) {\r\n                        onCommit(event);\r\n                    }\r\n                });\r\n\r\n            return super.onBeforeShow();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prompt\r\n     *\r\n     * @param {String} message   [in] 表示文字列\r\n     * @param {String} [options] [in] ダイアログオプション\r\n     * @return {jQuery} ダイアログの DOM オブジェクト\r\n     */\r\n    export function prompt(message: string, options?: DialogPromptOptions): JQuery {\r\n        const template = `\r\n            <script type=\"text/template\">\r\n                <section class=\"ui-modal\" data-role=\"popup\" data-corners=\"false\">\r\n                    <div class=\"ui-content\">\r\n                        <h1 class=\"ui-title {{_titleState}}\">{{title}}</h1>\r\n                        <p class=\"ui-message\">{{message}}</p>\r\n                        <label for=\"_ui-prompt\" class=\"ui-hidden-accessible\"></label>\r\n                        <input type=\"text\" name=\"_ui-prompt\" id=\"_ui-prompt\">\r\n                    </div>\r\n                    <div class=\"ui-modal-footer ui-grid-a\">\r\n                        <button id=\"{{idNegative}}\" class=\"ui-btn ui-block-a\" data-auto-close=\"true\">{{labelNegative}}</button>\r\n                        <button id=\"{{idPositive}}\" class=\"command-prompt-ok ui-btn ui-block-b ui-text-emphasis\" data-auto-close=\"false\">{{labelPositive}}</button>\r\n                    </div>\r\n                </section>\r\n            </script>\r\n        `;\r\n\r\n        const dlgPrompt = new DialogPrompt(template, $.extend({}, {\r\n            src: null,\r\n            message: message,\r\n        }, options));\r\n\r\n        return dlgPrompt.show();\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Router       = CDP.Framework.Router;\r\n    import IPage        = CDP.Framework.IPage;\r\n    import Model        = CDP.Framework.Model;\r\n    import View         = CDP.Framework.View;\r\n    import ViewOptions  = CDP.Framework.ViewOptions;\r\n    import Template     = CDP.Tools.Template;\r\n    import JST          = CDP.Tools.JST;\r\n\r\n    const TAG: string = \"[CDP.UI.BaseHeaderView] \";\r\n\r\n    /**\r\n     * @interface BaseHeaderViewOptions\r\n     * @brief BaseHeaderView に指定するオプションインターフェイス\r\n     */\r\n    export interface BaseHeaderViewOptions<TModel extends Model = Model> extends ViewOptions<TModel> {\r\n        baseTemplate?: JST;             //!< 固定ヘッダ用 JavaScript テンプレート.\r\n        backCommandSelector?: string;   //!< \"戻る\"コマンドセレクタ. default: \"command-back\"\r\n        backCommandKind?: string;       //!< \"戻る\"コマンド種別 (onCommand 第2引数). default: \"pageback\"\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BaseHeaderView\r\n     * @brief 共通ヘッダを操作するクラス\r\n     */\r\n    export class BaseHeaderView<TModel extends Model = Model> extends View<TModel> {\r\n\r\n        private static s_$headerBase: JQuery;   //!< ページ外に配置される共通ヘッダのベース部品用 jQuery オブジェクト\r\n        private static s_refCount = 0;          //!< 参照カウント\r\n        private _template: JST;\r\n        private _hasBackIndicator: boolean;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {IPage} _owner [in] オーナーページインスタンス\r\n         */\r\n        constructor(private _owner: IPage, private _options?: BaseHeaderViewOptions<TModel>) {\r\n            super(_options = $.extend({\r\n                el: _owner.$page.find(\"[data-role='header']\"),\r\n                backCommandSelector: \".command-back\",\r\n                backCommandKind: \"pageback\",\r\n            }, _options));\r\n\r\n            // template 設定\r\n            if (_options.baseTemplate) {\r\n                this._template = _options.baseTemplate;\r\n            } else {\r\n                this._template = Template.getJST(`\r\n                    <script type='text/template'>\r\n                        <header class='ui-header-base ui-body-{{theme}}'>\r\n                            <div class='ui-fixed-back-indicator'></div>\r\n                        </header>\r\n                    </script>\r\n                `);\r\n            }\r\n\r\n            // Backbone.View 用の初期化\r\n            this.setElement(this.$el, true);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods\r\n\r\n        /**\r\n         * 初期化\r\n         */\r\n        public create(): JQuery {\r\n            return this.createHeaderBase();\r\n        }\r\n\r\n        /**\r\n         * 有効化\r\n         */\r\n        public activate(): JQuery {\r\n            return this.showIndicator();\r\n        }\r\n\r\n        /**\r\n         * 無効化\r\n         */\r\n        public inactivate(): JQuery {\r\n            return this.hideIndicator();\r\n        }\r\n\r\n        /**\r\n         * 破棄\r\n         */\r\n        public release(): JQuery {\r\n            return this.releaseHeaderBase();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods\r\n\r\n        //! 共通ヘッダのベースを準備\r\n        private createHeaderBase(): JQuery {\r\n            // 固定ヘッダのときに有効化\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null == BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_$headerBase = $(this._template({\r\n                        theme: this._owner.$page.jqmData(\"theme\"),\r\n                    }));\r\n                }\r\n                BaseHeaderView.s_refCount++;\r\n                BaseHeaderView.s_$headerBase.appendTo($(document.body));\r\n            }\r\n            // Back Indicator を持っているか判定\r\n            if (0 < this.$el.find(\".ui-back-indicator\").length) {\r\n                this._hasBackIndicator = true;\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の表示\r\n        private showIndicator(): JQuery {\r\n            // Back Indicator を持っていない場合表示しない\r\n            if (null != BaseHeaderView.s_$headerBase && this._hasBackIndicator) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").addClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! indicator の非表示\r\n        private hideIndicator(): JQuery {\r\n            if (null != BaseHeaderView.s_$headerBase) {\r\n                BaseHeaderView.s_$headerBase.find(\".ui-fixed-back-indicator\").removeClass(\"show\");\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        //! 共通ヘッダのベースを破棄\r\n        private releaseHeaderBase(): JQuery {\r\n            // 固定ヘッダ時に参照カウントを管理\r\n            if (\"fixed\" === this._owner.$header.jqmData(\"position\")) {\r\n                if (null != BaseHeaderView.s_$headerBase) {\r\n                    BaseHeaderView.s_refCount--;\r\n                    if (0 === BaseHeaderView.s_refCount) {\r\n                        BaseHeaderView.s_$headerBase.remove();\r\n                        BaseHeaderView.s_$headerBase = null;\r\n                    }\r\n                }\r\n            }\r\n            return BaseHeaderView.s_$headerBase;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Backbone.View\r\n\r\n        //! events binding\r\n        events(): any {\r\n            const eventMap = {};\r\n            if (this._options) {\r\n                eventMap[\"vclick \" + this._options.backCommandSelector] = this.onCommandBack;\r\n            }\r\n            return eventMap;\r\n        }\r\n\r\n        //! back のハンドラ\r\n        private onCommandBack(event: JQuery.Event): void {\r\n            event.preventDefault();\r\n            let handled = false;\r\n            if (this._owner) {\r\n                handled = this._owner.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            if (!handled) {\r\n                Router.back();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG: string = \"[CDP.UI.BasePage] \";\r\n\r\n    /**\r\n     * @interface BasePageOptions\r\n     * @brief BasePage に指定するオプションインターフェイス\r\n     */\r\n    export interface BasePageOptions<TModel extends Framework.Model = Framework.Model> extends Framework.PageConstructOptions, BaseHeaderViewOptions<TModel> {\r\n        baseHeader?: new (owner: Framework.IPage, options?: BaseHeaderViewOptions<TModel>) => BaseHeaderView<TModel>;   //!< Header 機能を提供する基底インスタンス\r\n        backCommandHandler?: string;                //!< \"戻る\" コマンドハンドラメソッド名.                             default: onPageBack\r\n        domExtensionOptions?: DomExtensionOptions;  //!< DOM拡張に渡すオプション. null|undefined を指定すると拡張しない default: {}\r\n    }\r\n\r\n    //__________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class BasePage\r\n     * @brief Header を備える Page クラス\r\n     */\r\n    export class BasePage<TModel extends Framework.Model = Framework.Model> extends Framework.Page {\r\n\r\n        private _baseHeader: BaseHeaderView<TModel>;    //!< ヘッダクラス\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param {String}          url       [in] ページ URL\r\n         * @param {String}          id        [in] ページ ID\r\n         * @param {BasePageOptions} [options] [in] オプション\r\n         */\r\n        constructor(url: string, id: string, private _options?: BasePageOptions<TModel>) {\r\n            super(url, id, _options = $.extend({\r\n                baseHeader: BaseHeaderView,\r\n                backCommandHandler: \"onPageBack\",\r\n                backCommandKind: \"pageback\",\r\n                domExtensionOptions: {},\r\n            }, _options));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Framework Page\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            if (this._options.baseHeader) {\r\n                this._baseHeader = new this._options.baseHeader(this, this._options);\r\n                this._baseHeader.create();\r\n            }\r\n            super.onPageBeforeCreate(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            if (null != this._options.domExtensionOptions) {\r\n                ExtensionManager.applyDomExtension(this.$page, this._options.domExtensionOptions);\r\n            }\r\n            super.onPageInit(event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.activate();\r\n            }\r\n            super.onPageBeforeShow(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.inactivate();\r\n            }\r\n            super.onPageBeforeHide(event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            if (this._baseHeader) {\r\n                this._baseHeader.release();\r\n                this._baseHeader = null;\r\n            }\r\n            super.onPageRemove(event);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            let retval = super.onHardwareBackButton(event);\r\n            if (!retval) {\r\n                retval = this.onCommand(event, this._options.backCommandKind);\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: Custom Event\r\n\r\n        /**\r\n         * \"戻る\" event 発行時にコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event: JQuery.Event, kind: string): boolean {\r\n            if (this._options.backCommandKind === kind) {\r\n                if (this._owner && this._owner[this._options.backCommandHandler]) {\r\n                    return this._owner[this._options.backCommandHandler](event);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Promise      = CDP.Promise;\r\n    import Framework    = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageView] \";\r\n\r\n    /**\r\n     * PageView が発行するイベント定義\r\n     */\r\n    export const enum PAGEVIEW_EVENTS {\r\n        ORIENTATION_CHANGED = \"pageview:orientation-changed\",\r\n        INITIALZSE          = \"pageview:initialize\",\r\n        PAGE_BEFORE_CREATE  = \"pageview:before-create\",\r\n        PAGE_INIT           = \"pageview:page-init\",\r\n        PAGE_BEFORE_SHOW    = \"pageview:before-show\",\r\n        PAGE_SHOW           = \"pageview:show\",\r\n        PAGE_BEFORE_HIDE    = \"pageview:before-hide\",\r\n        PAGE_HIDE           = \"pageview:hide\",\r\n        PAGE_REMOVE         = \"pageview:remove\",\r\n    }\r\n\r\n    /**\r\n     * @interface PageViewConstructOptions\r\n     * @brief Router への登録情報と Backbone.View への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageViewConstructOptions<TModel extends Framework.Model = Framework.Model> extends BasePageOptions<TModel> {\r\n        basePage?: new (url: string, id: string, options?: Framework.PageConstructOptions) => Framework.Page;    //!< Page 機能を提供する基底インスタンス\r\n    }\r\n\r\n    /**\r\n     * @class PageView\r\n     * @brief CDP.Framework.Page と Backbone.View の両方の機能を提供するページの基底クラス\r\n     */\r\n    export class PageView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> implements Framework.IPage, IStatusManager {\r\n\r\n        protected _pageOptions: PageViewConstructOptions<TModel> = null;\r\n        protected _basePage: Framework.Page = null;\r\n        private _statusMgr: StatusManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                   [in] ページ URL\r\n         * @param id      {String}                   [in] ページ ID\r\n         * @param options {PageViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // PageView 設定\r\n            this._pageOptions = $.extend({}, { owner: this }, options);\r\n            this._basePage = this._pageOptions.basePage ? new this._pageOptions.basePage(url, id, this._pageOptions) : new BasePage(url, id, this._pageOptions);\r\n\r\n            // StatusManager\r\n            this._statusMgr = new StatusManager();\r\n            // Backbone.View 用の初期化\r\n            const delegates = (<any>this).events ? true : false;\r\n            this.setElement(this.$page, delegates);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IStatusManager 状態管理\r\n\r\n        /**\r\n         * 状態変数の参照カウントのインクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusAddRef(status: string): number {\r\n            return this._statusMgr.statusAddRef(status);\r\n        }\r\n\r\n        /**\r\n         * 状態変数の参照カウントのデクリメント\r\n         *\r\n         * @param status {String} [in] 状態識別子\r\n         */\r\n        statusRelease(status: string): number {\r\n            return this._statusMgr.statusRelease(status);\r\n        }\r\n\r\n        /**\r\n         * 処理スコープ毎に状態変数を設定\r\n         *\r\n         * @param status   {String}   [in] 状態識別子\r\n         * @param callback {Function} [in] 処理コールバック\r\n         */\r\n        statusScope(status: string, callback: () => void | Promise<any>): void {\r\n            this._statusMgr.statusScope(status, callback);\r\n        }\r\n\r\n        /**\r\n         * 指定した状態中であるか確認\r\n         *\r\n         * @param status {String}   [in] 状態識別子\r\n         * @return {Boolean} true: 状態内 / false: 状態外\r\n         */\r\n        isStatusIn(status: string): boolean {\r\n            return this._statusMgr.isStatusIn(status);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // IPage stub stuff.\r\n\r\n        get active(): boolean                   { return this._basePage.active;                     }\r\n        get url(): string                       { return this._basePage.url;                        }\r\n        get id(): string                        { return this._basePage ? this._basePage.id : null; }\r\n        get $page(): JQuery                     { return this._basePage.$page;                      }\r\n        get $header(): JQuery                   { return this._basePage.$header;                    }\r\n        get $footer(): JQuery                   { return this._basePage.$footer;                    }\r\n        get intent(): Framework.Intent          { return this._basePage.intent;                     }\r\n        set intent(newIntent: Framework.Intent) { this._basePage.intent = newIntent;                }\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this.trigger(PAGEVIEW_EVENTS.ORIENTATION_CHANGED, newOrientation);\r\n        }\r\n\r\n        /**\r\n         * H/W Back Button ハンドラ\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onHardwareBackButton(event?: JQuery.Event): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Router \"before route change\" ハンドラ\r\n         * ページ遷移直前に非同期処理を行うことが可能\r\n         *\r\n         * @return {IPromiseBase} Promise オブジェクト\r\n         */\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        /**\r\n         * 汎用コマンドを受信\r\n         *\r\n         * @param  event {JQuery.Event} [in] event object\r\n         * @param  event {kind}              [in] command kind string\r\n         * @return {Boolean} true: 既定の処理を行わない / false: 既定の処理を行う\r\n         */\r\n        onCommand(event?: JQuery.Event, kind?: string): boolean {\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.INITIALZSE, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            this.setElement(this.$page, true);\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_CREATE, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_INIT, event);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_SHOW, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_SHOW, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_BEFORE_HIDE, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_HIDE, event, data);\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.trigger(PAGEVIEW_EVENTS.PAGE_REMOVE, event);\r\n            this.remove();\r\n            this.el  = null;\r\n            this.$el = null;\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n    import Framework = CDP.Framework;\r\n\r\n    const TAG = \"[CDP.UI.PageContainerView] \";\r\n\r\n    /**\r\n     * @interface PageContainerViewOptions\r\n     * @brief PageContainer のオプション\r\n     */\r\n    export interface PageContainerViewOptions<TModel extends Framework.Model = Framework.Model> extends Framework.ViewOptions<TModel> {\r\n        owner: PageView;\r\n        $el?: JQuery;\r\n    }\r\n\r\n    /**\r\n     * @class PageContainerView\r\n     * @brief PageView と連携可能な コンテナビュークラス\r\n     */\r\n    export class PageContainerView<TModel extends Framework.Model = Framework.Model> extends Framework.View<TModel> {\r\n\r\n        private _owner: PageView = null;\r\n\r\n        /**\r\n         * constructor\r\n         */\r\n        constructor(options: PageContainerViewOptions<TModel>) {\r\n            super(options);\r\n            this._owner = options.owner;\r\n            if (options.$el) {\r\n                const delegates = (<any>this).events ? true : false;\r\n                this.setElement(options.$el, delegates);\r\n            }\r\n            // set event listener\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.ORIENTATION_CHANGED, this.onOrientationChanged.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.INITIALZSE, this.onInitialize.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_CREATE, this.onPageBeforeCreate.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_INIT, this.onPageInit.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_SHOW, this.onPageBeforeShow.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_SHOW, this.onPageShow.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_BEFORE_HIDE, this.onPageBeforeHide.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_HIDE, this.onPageHide.bind(this));\r\n            this.listenTo(this._owner, PAGEVIEW_EVENTS.PAGE_REMOVE, this.onPageRemove.bind(this));\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // short cut methods\r\n\r\n        //! Owner 取得\r\n        get owner(): PageView {\r\n            return this._owner;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Handle PageView events\r\n\r\n        /**\r\n         * Orientation の変更を受信\r\n         *\r\n         * @param newOrientation {Orientation} [in] new orientation code.\r\n         */\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * 最初の OnPageInit() のときにのみコールされる\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onInitialize(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforecreate\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageBeforeCreate(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecreate\" (旧:\"pageinit\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageInit(event: JQuery.Event): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforeshow\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {ShowEventData}     [in] 付加情報\r\n         */\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagebeforehide\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageBeforeHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pagecontainerhide\" (旧:\"pagehide\") に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         * @param data  {HideEventData}     [in] 付加情報\r\n         */\r\n        onPageHide(event: JQuery.Event, data?: Framework.HideEventData): void {\r\n            // Override\r\n        }\r\n\r\n        /**\r\n         * jQM event: \"pageremove\" に対応\r\n         *\r\n         * @param event {JQuery.Event} [in] イベントオブジェクト\r\n         */\r\n        onPageRemove(event: JQuery.Event): void {\r\n            this.stopListening();\r\n        }\r\n    }\r\n}\r\n","// for non flipsnap user.\r\ninterface IFlipsnap {\r\n    [x: string]: any;\r\n}\r\ninterface FlipsnapOptions {\r\n}\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model                        = Framework.Model;\r\n    import IOrientationChangedListener  = Framework.IOrientationChangedListener;\r\n    import Orientation                  = Framework.Orientation;\r\n\r\n    const TAG = \"[CDP.UI.TabHostView] \";\r\n\r\n    namespace _Config {\r\n        export const TABVIEW_CLASS = \"ui-tabview\";\r\n        export const TABVIEW_SELECTOR = \".\" + TABVIEW_CLASS;\r\n        export const TABHOST_CLASS = \"ui-tabhost\";\r\n        export const TABHOST_SELECTOR = \".\" + TABHOST_CLASS;\r\n        export const TABHOST_REFRESH_COEFF = 1.0;       // flipsnap 切り替え時に duration に対して更新を行う係数\r\n        export const TABHOST_REFRESH_INTERVAL = 200;    // flipsnap の更新に使用する間隔 [msec]\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface ITabView\r\n     * @brief TabHostView にアタッチ可能な View インターフェイス\r\n     */\r\n    export interface ITabView extends IListView, IOrientationChangedListener {\r\n        host: TabHostView;      // host にアクセス\r\n        $el: JQuery;            // 管理 DOM にアクセス\r\n        needRebuild?: boolean;  // rebuild 状態にアクセス\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods: Framework\r\n\r\n        /**\r\n         * 状態に応じたスクロール位置の保存/復元\r\n         * Browser の Native Scroll 時にコールされる\r\n         */\r\n        treatScrollPosition(): void;\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // public methods: Event\r\n\r\n        /**\r\n         * Scroller の初期化時にコールされる\r\n         */\r\n        onInitialize(host: TabHostView, $root: JQuery): void;\r\n\r\n        /**\r\n         * Scroller の破棄時にコールされる\r\n         */\r\n        onDestroy(): void;\r\n\r\n        /**\r\n         * visibility 属性が変更されたときにコールされる\r\n         * active ページとその両端のページが対象\r\n         *\r\n         * @param visible [in] true: 表示 / false: 非表示\r\n         */\r\n        onVisibilityChanged(visible: boolean): void;\r\n\r\n        /**\r\n         * ページが表示完了したときにコールされる\r\n         */\r\n        onTabSelected(): void;\r\n\r\n        /**\r\n         * ページが非表示に切り替わったときにコールされる\r\n         */\r\n        onTabReleased(): void;\r\n\r\n        /**\r\n         * ドラッグ中にコールされる\r\n         *\r\n         * @param position [in] 現在の tab index\r\n         * @param offset   [in] 移動量\r\n         */\r\n        onTabScrolling(position: number, offset: number): void;\r\n    }\r\n\r\n    /**\r\n     * @interface TabViewContextOptions\r\n     * @brief TabViewContext に指定するオプション\r\n     */\r\n    export interface TabViewContextOptions<TModel extends Model = Model> extends ListViewConstructOptions<TModel> {\r\n        delayRegister?: boolean;    // 遅延登録を行う場合は true\r\n    }\r\n\r\n    /**\r\n     * @interface TabViewConstructionOptions\r\n     * @brief TabView のオプション\r\n     */\r\n    export interface TabViewConstructionOptions<TModel extends Model = Model> extends TabViewContextOptions<TModel> {\r\n        host: TabHostView;  // host を指定\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface TabViewContext\r\n     * @brief ITabView を初期化するための情報を格納\r\n     */\r\n    export interface TabViewContext<TModel extends Model = Model> {\r\n        ctor?: new (options?: TabViewConstructionOptions<TModel>) => ITabView;  // ITabView のコンストラクタ\r\n        options?: TabViewContextOptions<TModel>;                                // 構築時の基底オプション\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @interface TabHostViewConstructOptions\r\n     * @brief TabHostView の初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface TabHostViewConstructOptions<TModel extends Model = Model> extends PageContainerViewOptions<TModel>, FlipsnapOptions {\r\n        inactiveVisibleTabDistance?: number;    // 非選択時の visible タブ数 ex) 1: 両サイド\r\n        tabContexts?: TabViewContext[];         // TabViewContext の配列\r\n        enableBounce?: boolean;                 // 終端で bounce する場合には true\r\n        initialWidth?: number;                  // width の初期値\r\n        initialHeight?: number;                 // height の初期値\r\n        initImmediate?: boolean;                // コンストラクタで TabView を初期化する場合 true\r\n    }\r\n\r\n    //___________________________________________________________________________________________________________________//\r\n\r\n    /**\r\n     * @class TabHostView\r\n     * @brief タブ切り替え機能を持つ View クラス\r\n     */\r\n    export class TabHostView<TModel extends Model = Model> extends PageContainerView<TModel> implements IOrientationChangedListener {\r\n\r\n        private _tabs: ITabView[] = [];                                         // ITabView を格納\r\n\r\n        private _activeTabIndex: number = 0;                                    // active tab\r\n        private _flipsnap: IFlipsnap = null;                                    // flipsnap オブジェクト\r\n        private _flipEndEventHandler: (event: JQuery.Event) => void = null;     // \"fstouchend\"\r\n        private _flipMoveEventHandler: (event: JQuery.Event) => void = null;    // \"fstouchmove\"\r\n        private _flipDeltaCache: number = 0;                                    // \"flip 距離のキャッシュ\"\r\n        private _scrollEndEventHandler: (event: JQuery.Event) => void = null;   // tabview \"scrollstop\"\r\n        private _scrollMoveEventHandler: (event: JQuery.Event) => void = null;  // tabview \"scroll\"\r\n        private _refreshTimerId: number = null;                                 // refresh() 反映確認用\r\n        private _settings: TabHostViewConstructOptions<TModel>;                 // TabHostView 設定値\r\n\r\n        public static EVENT_SCROLL_MOVE = \"tabhost:scrollmove\";\r\n        public static EVENT_SCROLL_STOP = \"tabhost:scrollstop\";\r\n        public static EVENT_TAB_MOVE    = \"tabhost:tabmove\";\r\n        public static EVENT_TAB_STOP    = \"tabhost:tavstop\";\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param options [in] オプション\r\n         */\r\n        constructor(options: TabHostViewConstructOptions<TModel>) {\r\n            super(options);\r\n\r\n            // check runtime condition\r\n            if (null == global.Flipsnap) {\r\n                console.error(TAG + \"flipsnap module doesn't load.\");\r\n                return;\r\n            }\r\n\r\n            this._settings = $.extend({\r\n                tabContexts: [],\r\n                tabMoveHandler: (delta: number): void => { /* noop */ },\r\n                tabStopHandler: (newIndex: number, moved: boolean): void => { /* noop */ }\r\n            }, options);\r\n\r\n            // setup event handlers\r\n            this._flipEndEventHandler = (event: JQuery.Event) => {\r\n                const fsEvent: any = event.originalEvent;\r\n                this._flipDeltaCache = 0;\r\n                this.onTabChanged(fsEvent.newPoint, fsEvent.moved);\r\n            };\r\n\r\n            this._flipMoveEventHandler = (event: JQuery.Event) => {\r\n                const fsEvent: any = event.originalEvent;\r\n                this._flipDeltaCache += fsEvent.delta;\r\n\r\n                // bounce のガード\r\n                if (!this._settings.enableBounce && (\r\n                    (-1 === fsEvent.direction && 0 === this._activeTabIndex && 0 < this._flipDeltaCache) ||\r\n                    (1 === fsEvent.direction && this._activeTabIndex === this._tabs.length - 1 && this._flipDeltaCache < 0)\r\n                )) {\r\n                    event.preventDefault();\r\n                    this._flipsnap.moveToPoint(fsEvent.newPoint);\r\n                } else {\r\n                    this.onTabMoving(fsEvent.delta);\r\n                    this._tabs.forEach((tabview: ITabView) => {\r\n                        tabview.onTabScrolling(this._activeTabIndex, fsEvent.delta);\r\n                    });\r\n                    this.preprocess(this._activeTabIndex);\r\n                }\r\n            };\r\n\r\n            this._scrollEndEventHandler = (event: JQuery.Event) => {\r\n                this.onScrollStop();\r\n            };\r\n\r\n            this._scrollMoveEventHandler = (event: JQuery.Event) => {\r\n                this.onScroll();\r\n            };\r\n\r\n            // setup tabs\r\n            if (this._settings.initialWidth) {\r\n                this.$el.width(this._settings.initialWidth);\r\n            }\r\n            if (this._settings.initialHeight) {\r\n                this.$el.height(this._settings.initialHeight);\r\n\r\n            }\r\n            const initialWidth  = this._settings.initialWidth;\r\n            const initialHeight = this.$el.height();\r\n\r\n            const tabContexts = this._settings.tabContexts.slice();\r\n            if (0 < tabContexts.length) {\r\n                tabContexts.forEach((context) => {\r\n                    /* tslint:disable:no-unused-expression */\r\n                    new context.ctor($.extend({\r\n                        initialHeight: initialHeight,\r\n                    }, context.options, { host: this, delayRegister: false }));\r\n                    /* tslint:enable:no-unused-expression */\r\n                });\r\n            } else {\r\n                // ITabView インスタンス化要求\r\n                this.onTabViewSetupRequest(initialHeight);\r\n            }\r\n\r\n            if (this._settings.initImmediate) {\r\n                this.initializeTabViews();\r\n            }\r\n\r\n            // Flipsnap\r\n            this.setFlipsnapCondition($.extend({}, {\r\n                distance: initialWidth,\r\n            }, this._settings));\r\n            this.setActiveTab(this._activeTabIndex, 0, true);\r\n        }\r\n\r\n        /**\r\n         * 配下の TabView を初期化\r\n         */\r\n        public initializeTabViews(): void {\r\n            // ITabView に $tabHost をアサインする\r\n            // NOTE: 現在は DOM の順序は固定\r\n            const $tabs = this.$el.find(_Config.TABVIEW_SELECTOR);\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                tabview.onInitialize(this, $($tabs[index]));\r\n            });\r\n        }\r\n\r\n        /**\r\n         * 破棄のヘルパー関数\r\n         * メンバーの破棄のタイミングを変える場合、本メソッドをコールする\r\n         */\r\n        public destroy(): void {\r\n            this.resetFlipsnapCondition();\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.onDestroy();\r\n            });\r\n            this._tabs = [];\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Framework methods:\r\n\r\n        // ページの基準値を取得\r\n        public getBaseHeight(): number {\r\n            return this.$el.height();\r\n        }\r\n\r\n        /**\r\n         * TabView を登録\r\n         * Framework が使用\r\n         *\r\n         * @param tabview [in] ITabView のインスタンス\r\n         */\r\n        public registerTabView(tabview: ITabView): void {\r\n            if (null == this.getTabIndexOf(tabview)) {\r\n                this._tabs.push(tabview);\r\n            } else {\r\n                console.warn(TAG + \"tab instance already registered.\");\r\n            }\r\n        }\r\n\r\n        /**\r\n         * TabView の Tab index を取得\r\n         * Framework が使用\r\n         *\r\n         * @param tabview [in] ITabView のインスタンス\r\n         * @return 指定インスタンスのインデックス\r\n         */\r\n        public getTabIndexOf(tabview: ITabView): number {\r\n            for (let i = 0, n = this._tabs.length; i < n; i++) {\r\n                if (tabview === this._tabs[i]) {\r\n                    return i;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // タブポジションの初期化\r\n        protected resetTabPosition(): void {\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.scrollTo(0, false, 0);\r\n                tabview.refresh();\r\n            });\r\n            this.setActiveTab(0, 0, true);\r\n        }\r\n\r\n        // ITabView 設定リクエスト時にコールされる\r\n        protected onTabViewSetupRequest(initialHeight: number): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Tab control methods:\r\n\r\n        // アクティブ Tab を設定\r\n        public setActiveTab(index: number, transitionDuration?: number, initial?: boolean): boolean {\r\n            if (this.validTab(index) && (initial || (this._activeTabIndex !== index))) {\r\n                // 遷移前に scroll 位置の view を更新\r\n                this.preprocess(index);\r\n\r\n                const lastActiveTabIndex = this._activeTabIndex;\r\n                this._activeTabIndex = index;\r\n                this._flipsnap.moveToPoint(this._activeTabIndex, transitionDuration);\r\n\r\n                {// 遷移後に listview の状態を変更\r\n                    const changeTab = () => {\r\n                        this.postprocess(lastActiveTabIndex);\r\n                        this.onTabChanged(this._activeTabIndex, false);\r\n                    };\r\n\r\n                    transitionDuration = transitionDuration || parseInt(this._flipsnap.transitionDuration, 10);\r\n                    if (0 === transitionDuration) {\r\n                        changeTab();\r\n                    } else {\r\n                        setTimeout(() => {\r\n                            changeTab();\r\n                        }, transitionDuration * _Config.TABHOST_REFRESH_COEFF);\r\n                    }\r\n                }\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * タブの数を取得\r\n         *\r\n         * @return {Number} タブ数\r\n         */\r\n        public getTabCount(): number {\r\n            return this._tabs.length;\r\n        }\r\n\r\n        // アクティブなタブ Index を取得\r\n        public getActiveTabIndex(): number {\r\n            return this._activeTabIndex;\r\n        }\r\n\r\n        // swipe 移動量を取得 (swipe 中に delta の加算値を返却)\r\n        public getSwipeDelta(): number {\r\n            return this._flipDeltaCache;\r\n        }\r\n\r\n        // タブ移動イベント\r\n        protected onTabMoving(delta: number): void {\r\n            this.trigger(TabHostView.EVENT_TAB_MOVE, delta);\r\n        }\r\n\r\n        // タブ変更完了イベント\r\n        protected onTabChanged(newIndex: number, moved: boolean): void {\r\n            if (moved) {\r\n                this.setActiveTab(newIndex);\r\n            }\r\n            this.trigger(TabHostView.EVENT_TAB_STOP, newIndex, moved);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Scroll control methods:\r\n\r\n        // スクロール位置を取得\r\n        getScrollPos(): number {\r\n            if (this._activeTabView) {\r\n                return this._activeTabView.getScrollPos();\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        // スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            if (this._activeTabView) {\r\n                return this._activeTabView.getScrollPosMax();\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        // スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.scrollTo(pos, animate, time);\r\n            }\r\n        }\r\n\r\n        // スクロールイベント\r\n        protected onScroll(): void {\r\n            this.trigger(TabHostView.EVENT_SCROLL_MOVE);\r\n        }\r\n\r\n        // スクロール完了イベント\r\n        protected onScrollStop(): void {\r\n            this.trigger(TabHostView.EVENT_SCROLL_STOP);\r\n        }\r\n\r\n        // スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.setScrollHandler(handler, on);\r\n            }\r\n        }\r\n\r\n        // スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            if (this._activeTabView) {\r\n                this._activeTabView.setScrollStopHandler(handler, on);\r\n            }\r\n        }\r\n\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Host event hooks:\r\n\r\n        // Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Orientation): void {\r\n            super.onOrientationChanged(newOrientation);\r\n\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                tabview.onOrientationChanged(newOrientation);\r\n            });\r\n\r\n            if (null != this._refreshTimerId) {\r\n                clearTimeout(this._refreshTimerId);\r\n            }\r\n\r\n            if (this._flipsnap && 0 < this._tabs.length) {\r\n                const proc = () => {\r\n                    // リトライ\r\n                    if (this._flipsnap && this._flipsnap._maxPoint !== (this._tabs.length - 1)) {\r\n                        this._flipsnap.refresh();\r\n                        this._refreshTimerId = setTimeout(proc, _Config.TABHOST_REFRESH_INTERVAL);\r\n                    } else {\r\n                        this._refreshTimerId = null;\r\n                    }\r\n                };\r\n                this._flipsnap.refresh();\r\n                this._refreshTimerId = setTimeout(proc, _Config.TABHOST_REFRESH_INTERVAL);\r\n            }\r\n        }\r\n\r\n        // jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this.rebuild();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: ScrollManager Profile 管理\r\n\r\n        // ページアサインを再構成\r\n        rebuild(): void {\r\n            this._tabs.forEach((tabview: ITabView) => {\r\n                if (tabview.needRebuild) {\r\n                    tabview.rebuild();\r\n                    tabview.needRebuild = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private methods:\r\n\r\n        // flipsnap 環境設定\r\n        private setFlipsnapCondition(options: FlipsnapOptions): void {\r\n            this._flipsnap = global.Flipsnap(_Config.TABHOST_SELECTOR, options);\r\n            $(this._flipsnap.element).on(\"fstouchend\", this._flipEndEventHandler.bind(this));\r\n            $(this._flipsnap.element).on(\"fstouchmove\", this._flipMoveEventHandler.bind(this));\r\n        }\r\n\r\n        // flipsnap 環境破棄\r\n        private resetFlipsnapCondition(): void {\r\n            if (this._flipsnap) {\r\n                $(this._flipsnap.element).off(\"fstouchmove\", this._flipMoveEventHandler.bind(this));\r\n                $(this._flipsnap.element).off(\"fstouchend\", this._flipEndEventHandler.bind(this));\r\n                this._flipsnap.destroy();\r\n                this._flipsnap = null;\r\n            }\r\n            this._flipDeltaCache = 0;\r\n        }\r\n\r\n        // Tab 切り替えの前処理\r\n        private preprocess(toIndex: number): void {\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                if (index !== this._activeTabIndex) {\r\n                    tabview.treatScrollPosition();\r\n                }\r\n                // 移動範囲を可視化 NOTE: loop 対応時に条件見直し\r\n                if ((this._activeTabIndex < toIndex && (this._activeTabIndex < index && index <= toIndex)) ||\r\n                    (toIndex < this._activeTabIndex && (toIndex <= index && index < this._activeTabIndex))\r\n                ) {\r\n                    tabview.$el.css(\"visibility\", \"visible\");\r\n                }\r\n            });\r\n        }\r\n\r\n        // Tab 切り替えの後処理\r\n        private postprocess(lastActiveTabIndex: number): void {\r\n            this._tabs.forEach((tabview: ITabView, index) => {\r\n                if (null != this._settings.inactiveVisibleTabDistance) {\r\n                    // NOTE: loop 対応時に条件対応\r\n                    const distance = this._settings.inactiveVisibleTabDistance;\r\n                    if (this._activeTabIndex - distance <= index && index <= this._activeTabIndex + distance) {\r\n                        tabview.$el.css(\"visibility\", \"visible\");\r\n                        tabview.onVisibilityChanged(true);\r\n                    } else {\r\n                        tabview.$el.css(\"visibility\", \"hidden\");\r\n                        tabview.onVisibilityChanged(false);\r\n                    }\r\n                }\r\n                if (index === this._activeTabIndex) {\r\n                    tabview.onTabSelected();\r\n                    tabview.setScrollHandler(this._scrollMoveEventHandler, true);\r\n                    tabview.setScrollStopHandler(this._scrollEndEventHandler, true);\r\n                } else if (index === lastActiveTabIndex) {\r\n                    tabview.setScrollHandler(this._scrollMoveEventHandler, false);\r\n                    tabview.setScrollStopHandler(this._scrollEndEventHandler, false);\r\n                    tabview.onTabReleased();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Tab Index を検証\r\n        private validTab(index: number): boolean {\r\n            if (0 === this._tabs.length) {\r\n                return false;\r\n            } else if (0 <= index && index < this._tabs.length) {\r\n                return true;\r\n            } else {\r\n                console.error(TAG + \"invalid tab index. index: \" + index);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // アクティブなタブ ScrollManager を取得\r\n        private get _activeTabView(): ITabView {\r\n            return this._tabs[this._activeTabIndex];\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.TabView] \";\r\n    const SUPPRESS_WARNING_INITIAL_HEIGHT = 1;\r\n\r\n    /**\r\n     * @class TabView\r\n     * @brief TabHostView にアタッチ可能な View クラス\r\n     */\r\n    export class TabView<TModel extends Model = Model> extends ListView<TModel> implements ITabView {\r\n\r\n        private _host: TabHostView = null;\r\n        private _needRebuild: boolean = false;  // ページ表示時に rebuild() をコールするための内部変数\r\n        private _tabIndex: number;              // 自身の Tab Index\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         */\r\n        constructor(options: TabViewConstructionOptions<TModel>) {\r\n            super($.extend({}, { initialHeight: SUPPRESS_WARNING_INITIAL_HEIGHT }, options));\r\n            this._host = options.host;\r\n            if (!options.delayRegister) {\r\n                this._host.registerTabView(this);\r\n            }\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IViewPager properties.\r\n\r\n        // BaseTabPageView にアクセス\r\n        public get host(): TabHostView {\r\n            return this._host;\r\n        }\r\n\r\n        // rebuild 状態へアクセス\r\n        public get needRebuild(): boolean {\r\n            return this._needRebuild;\r\n        }\r\n\r\n        // rebuild 状態を設定\r\n        public set needRebuild(rebuild: boolean) {\r\n            this._needRebuild = rebuild;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IViewPager Framework.\r\n\r\n        // 状態に応じたスクロール位置の保存/復元\r\n        treatScrollPosition(): void {\r\n            this.core.treatScrollPosition();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: ITabView Events.\r\n\r\n        // Scroller の初期化時にコールされる\r\n        onInitialize(host: TabHostView, $root: JQuery): void {\r\n            this._host = host;\r\n            this.core.initialize($root, host.getBaseHeight());\r\n            Backbone.View.prototype.setElement.call(this, $root, true);\r\n        }\r\n\r\n        // Scroller の破棄時にコールされる\r\n        onDestroy(): void {\r\n            this.remove();\r\n            this._host = null;\r\n        }\r\n\r\n        // visibility 属性が変更されたときにコールされる\r\n        onVisibilityChanged(visible: boolean): void {\r\n            // override\r\n        }\r\n\r\n        // ページが表示完了したときにコールされる\r\n        onTabSelected(): void {\r\n            this.core.setActiveState(true);\r\n        }\r\n\r\n        // ページが非表示に切り替わったときにコールされる\r\n        onTabReleased(): void {\r\n            this.core.setActiveState(false);\r\n        }\r\n\r\n        // ドラッグ中にコールされる\r\n        onTabScrolling(position: number, offset: number): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IOrientationChangedListener events.\r\n\r\n        // Orientation の変更を受信\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            // override\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: IListView\r\n\r\n        // core framework access\r\n        get core(): ScrollManager {\r\n            return (<any>this)._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // protected methods\r\n\r\n        // 自身の Tab Index を取得\r\n        protected get tabIndex(): number {\r\n            if (null == this._tabIndex) {\r\n                this._tabIndex = this._host.getTabIndexOf(this);\r\n            }\r\n            return this._tabIndex;\r\n        }\r\n\r\n        // 自身が active か判定\r\n        protected isActive(): boolean {\r\n            return this.tabIndex === this._host.getActiveTabIndex();\r\n        }\r\n    }\r\n}\r\n","/* tslint:disable:max-line-length */\r\n\r\nnamespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageListView] \";\r\n\r\n    /**\r\n     * @interface PageListViewConstructOptions\r\n     * @brief PageListView への初期化情報を格納するインターフェイスクラス\r\n     */\r\n    export interface PageListViewConstructOptions<TModel extends Model = Model> extends ListViewOptions, PageViewConstructOptions<TModel> {\r\n        autoDestoryElement?: boolean;        //!< ページ遷移前に List Element を破棄する場合は true を指定\r\n    }\r\n\r\n    /**\r\n     * @class PageListView\r\n     * @brief 仮想リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageListView<TModel extends Model = Model> extends PageView<TModel> implements IListView {\r\n\r\n        private _scrollMgr: ScrollManager = null;    //!< scroll コアロジック\r\n        private _needRebuild: boolean = false;       //!< ページ表示時に rebuild() をコールするための内部変数\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, $.extend({}, {\r\n                autoDestoryElement: false,\r\n            }, options));\r\n            this._scrollMgr = new ScrollManager(options);\r\n        }\r\n\r\n        //! rebuild() のスケジューリング\r\n        public reserveRebuild(): void {\r\n            this._needRebuild = true;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageView\r\n\r\n        //! Orientation の変更検知\r\n        onOrientationChanged(newOrientation: Framework.Orientation): void {\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n        }\r\n\r\n        //! ページ遷移直前イベント処理\r\n        onBeforeRouteChange(): IPromiseBase<any> {\r\n            if ((<PageListViewConstructOptions<TModel>>this._pageOptions).autoDestoryElement) {\r\n                this._scrollMgr.destroy();\r\n            }\r\n            return super.onBeforeRouteChange();\r\n        }\r\n\r\n        //! jQM event: \"pagebeforeshow\" に対応\r\n        onPageBeforeShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageBeforeShow(event, data);\r\n            this._scrollMgr.initialize(this.$page, this.getPageBaseHeight());\r\n        }\r\n\r\n        //! jQM event: \"pagecontainershow\" (旧:\"pageshow\") に対応\r\n        onPageShow(event: JQuery.Event, data?: Framework.ShowEventData): void {\r\n            super.onPageShow(event, data);\r\n            this._scrollMgr.setBaseHeight(this.getPageBaseHeight());\r\n            if (this._needRebuild) {\r\n                this.rebuild();\r\n                this._needRebuild = false;\r\n            }\r\n        }\r\n\r\n        //! jQM event: \"pageremove\" に対応\r\n        onPageRemove(event: JQuery.Event): void {\r\n            super.onPageRemove(event);\r\n            this.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile 管理\r\n\r\n        //! 初期化済みか判定\r\n        isInitialized(): boolean {\r\n            return this._scrollMgr.isInitialized();\r\n        }\r\n\r\n        //! プロパティを指定して、ListItem を管理\r\n        addItem(\r\n            height: number,\r\n            initializer: new (options?: any) => BaseListItemView,\r\n            info: any,\r\n            insertTo?: number\r\n            ): void {\r\n            this._addLine(new LineProfile(this._scrollMgr, Math.floor(height), initializer, info), insertTo);\r\n        }\r\n\r\n        //! 指定した Item を削除\r\n        removeItem(index: number, size?: number, delay?: number): void;\r\n        removeItem(index: number[], delay?: number): void;\r\n        removeItem(index: any, arg2?: number, arg3?: number): void {\r\n            this._scrollMgr.removeItem(index, arg2, arg3);\r\n        }\r\n\r\n        //! 指定した Item に設定した情報を取得\r\n        getItemInfo(target: number): any;\r\n        getItemInfo(target: JQuery.Event): any;\r\n        getItemInfo(target: any): any {\r\n            return this._scrollMgr.getItemInfo(target);\r\n        }\r\n\r\n        //! アクティブページを更新\r\n        refresh(): void {\r\n            this._scrollMgr.refresh();\r\n        }\r\n\r\n        //! 未アサインページを構築\r\n        update(): void {\r\n            this._scrollMgr.update();\r\n        }\r\n\r\n        //! ページアサインを再構成\r\n        rebuild(): void {\r\n            this._scrollMgr.rebuild();\r\n        }\r\n\r\n        //! 管轄データを破棄\r\n        release(): void {\r\n            this._scrollMgr.release();\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Profile Backup / Restore\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._scrollMgr.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            const retval = this._scrollMgr.restore(key, rebuild);\r\n            if (retval && !rebuild) {\r\n                this.reserveRebuild();\r\n            }\r\n            return retval;\r\n        }\r\n\r\n        //! バックアップデータの有無\r\n        hasBackup(key: string): boolean {\r\n            return this._scrollMgr.hasBackup(key);\r\n        }\r\n\r\n        //! バックアップデータの破棄\r\n        clearBackup(key?: string): boolean {\r\n            return this._scrollMgr.clearBackup(key);\r\n        }\r\n\r\n        //! バックアップデータにアクセス\r\n        get backupData(): any {\r\n            return this._scrollMgr.backupData;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Scroll\r\n\r\n        //! スクロールイベントハンドラ設定/解除\r\n        setScrollHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール終了イベントハンドラ設定/解除\r\n        setScrollStopHandler(handler: (event: JQuery.Event) => void, on: boolean): void {\r\n            this._scrollMgr.setScrollStopHandler(handler, on);\r\n        }\r\n\r\n        //! スクロール位置を取得\r\n        getScrollPos(): number {\r\n            return this._scrollMgr.getScrollPos();\r\n        }\r\n\r\n        //! スクロール位置の最大値を取得\r\n        getScrollPosMax(): number {\r\n            return this._scrollMgr.getScrollPosMax();\r\n        }\r\n\r\n        //! スクロール位置を指定\r\n        scrollTo(pos: number, animate?: boolean, time?: number): void {\r\n            this._scrollMgr.scrollTo(pos, animate, time);\r\n        }\r\n\r\n        //! 指定された ListItemView の表示を保証\r\n        ensureVisible(index: number, options?: EnsureVisibleOptions): void {\r\n            this._scrollMgr.ensureVisible(index, options);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Properties\r\n\r\n        //! core framework access\r\n        get core(): IListViewFramework {\r\n            return this._scrollMgr;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IListView Internal I/F\r\n\r\n        //! 登録 framework が使用する\r\n        _addLine(_line: any, insertTo?: number): void {\r\n            this._scrollMgr._addLine(_line, insertTo);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // private method:\r\n\r\n        //! ページの基準値を取得\r\n        private getPageBaseHeight(): number {\r\n            return $(window).height() - parseInt(this.$page.css(\"padding-top\"), 10);\r\n        }\r\n    }\r\n}\r\n","namespace CDP.UI {\r\n\r\n    import Model = CDP.Framework.Model;\r\n\r\n    const TAG = \"[CDP.UI.PageExpandableListView] \";\r\n\r\n    /**\r\n     * @class PageExpandableListView\r\n     * @brief 開閉リストビュー機能を持つ PageView クラス\r\n     */\r\n    export class PageExpandableListView<TModel extends Model = Model> extends PageListView<TModel> implements IExpandableListView {\r\n\r\n        private _expandManager: ExpandManager = null;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @param url     {String}                       [in] page template に使用する URL\r\n         * @param id      {String}                       [in] page に振られた ID\r\n         * @param options {PageListViewConstructOptions} [in] オプション\r\n         */\r\n        constructor(url: string, id: string, options?: PageListViewConstructOptions<TModel>) {\r\n            super(url, id, options);\r\n            this._expandManager = new ExpandManager(this);\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Implements: IExpandableListView\r\n\r\n        //! 新規 GroupProfile を作成\r\n        newGroup(id?: string): GroupProfile {\r\n            return this._expandManager.newGroup(id);\r\n        }\r\n\r\n        //! 登録済み Group を取得\r\n        getGroup(id: string): GroupProfile {\r\n            return this._expandManager.getGroup(id);\r\n        }\r\n\r\n        //! 第1階層の Group 登録\r\n        registerTopGroup(topGroup: GroupProfile): void {\r\n            this._expandManager.registerTopGroup(topGroup);\r\n        }\r\n\r\n        //! 第1階層の Group を取得\r\n        getTopGroups(): GroupProfile[] {\r\n            return this._expandManager.getTopGroups();\r\n        }\r\n\r\n        //! すべてのグループを展開 (1階層)\r\n        expandAll(): void {\r\n            this._expandManager.expandAll();\r\n        }\r\n\r\n        //! すべてのグループを収束 (1階層)\r\n        collapseAll(delay?: number): void {\r\n            this._expandManager.collapseAll(delay);\r\n        }\r\n\r\n        //! 展開中か判定\r\n        isExpanding(): boolean {\r\n            return this._expandManager.isExpanding();\r\n        }\r\n\r\n        //! 収束中か判定\r\n        isCollapsing(): boolean {\r\n            return this._expandManager.isCollapsing();\r\n        }\r\n\r\n        //! 開閉中か判定\r\n        isSwitching(): boolean {\r\n            return this._expandManager.isSwitching();\r\n        }\r\n\r\n        //! layout key を取得\r\n        get layoutKey(): string {\r\n            return this._expandManager.layoutKey;\r\n        }\r\n\r\n        //! layout key を設定\r\n        set layoutKey(key: string) {\r\n            this._expandManager.layoutKey = key;\r\n        }\r\n\r\n        ///////////////////////////////////////////////////////////////////////\r\n        // Override: PageListView\r\n\r\n        //! データを破棄\r\n        release(): void {\r\n            super.release();\r\n            this._expandManager.release();\r\n        }\r\n\r\n        //! 内部データをバックアップ\r\n        backup(key: string): boolean {\r\n            return this._expandManager.backup(key);\r\n        }\r\n\r\n        //! 内部データをリストア\r\n        restore(key: string, rebuild: boolean = true): boolean {\r\n            return this._expandManager.restore(key, rebuild);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    ripple(options?: CDP.UI.DomExtensionOptions): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    // jQuery plugin\r\n    $.fn.ripple = function (options?: DomExtensionOptions): JQuery {\r\n        const $el = $(this);\r\n        if ($el.length <= 0) {\r\n            return $el;\r\n        }\r\n        return $el.on(Framework.Patch.s_vclickEvent, function (event: JQuery.Event) {\r\n            const surface = $(this);\r\n\r\n            // create surface if it doesn't exist\r\n            if (surface.find(\".ui-ripple-ink\").length === 0) {\r\n                surface.prepend(\"<div class='ui-ripple-ink'></div>\");\r\n            }\r\n\r\n            let ink = surface.find(\".ui-ripple-ink\");\r\n\r\n            // stop the previous animation\r\n            ink.removeClass(\"ui-ripple-animate\");\r\n\r\n            // ink size:\r\n            if (!ink.height() && !ink.width()) {\r\n                const d = Math.max(surface.outerWidth(), surface.outerHeight());\r\n                ink.css({ height: d, width: d });\r\n            }\r\n\r\n            const x = event.pageX - surface.offset().left - (ink.width() / 2);\r\n            const y = event.pageY - surface.offset().top - (ink.height() / 2);\r\n\r\n            const rippleColor = surface.data(\"ripple-color\");\r\n\r\n            // animation end handler\r\n            const ANIMATION_END_EVENT = \"animationend webkitAnimationEnd\";\r\n            ink.on(ANIMATION_END_EVENT, function (ev: JQuery.Event) {\r\n                ink.off();\r\n                ink.removeClass(\"ui-ripple-animate\");\r\n                ink = null;\r\n            });\r\n\r\n            // set the position and add class .animate\r\n            ink.css({\r\n                top: y + \"px\",\r\n                left: x + \"px\",\r\n                background: rippleColor\r\n            }).addClass(\"ui-ripple-animate\");\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Material Design Ripple 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const NO_RIPPLE_CLASS = [\r\n            \".ui-ripple-none\",\r\n            \".ui-flipswitch-on\",\r\n            \".ui-slider-handle\",\r\n            \".ui-input-clear\",\r\n        ];\r\n\r\n        let selector = \".ui-btn\";\r\n        if ($ui.hasClass(\"ui-page\")) {\r\n            selector = \".ui-content .ui-btn\"; // header は自動 ripple 化対象外\r\n        }\r\n\r\n        $ui.find(selector)\r\n            .filter((index, elem) => {\r\n                const $elem = $(elem);\r\n                if ($elem.is(NO_RIPPLE_CLASS.join(\",\"))) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n            .addClass(\"ui-ripple\");\r\n\r\n        // ripplify\r\n        $ui.find(\".ui-ripple\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).ripple(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","/**\r\n * jQuery plugin definition\r\n */\r\ninterface JQuery {\r\n    spinner(options?: CDP.UI.DomExtensionOptions | \"refresh\"): JQuery;\r\n}\r\n\r\nnamespace CDP.UI.Extension {\r\n\r\n    import Template = CDP.Tools.Template;\r\n    import JST      = CDP.Tools.JST;\r\n\r\n    let _template: JST;\r\n\r\n    // jQuery plugin\r\n    $.fn.spinner = function (options?: DomExtensionOptions | \"refresh\") {\r\n        if (\"string\" === typeof options) {\r\n            return refresh($(this));\r\n        } else {\r\n            return spinnerify($(this), options);\r\n        }\r\n    };\r\n\r\n    function spinnerify($target: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if ($target.length <= 0) {\r\n            return $target;\r\n        }\r\n\r\n        if (!_template) {\r\n            _template = Template.getJST(`\r\n                <script type=\"text/template\">\r\n                    <span class=\"ui-spinner-base\">\r\n                        <span class=\"ui-spinner-inner\">\r\n                            <span class=\"ui-spinner-inner-gap\" {{borderTop}}></span>\r\n                            <span class=\"ui-spinner-inner-left\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                            <span class=\"ui-spinner-inner-right\">\r\n                                <span class=\"ui-spinner-inner-half-circle\" {{border}}></span>\r\n                            </span>\r\n                        </span>\r\n                    </span>\r\n                </script>\r\n            `);\r\n        }\r\n\r\n        const makeTemplateParam = (clr: string): object => {\r\n            return {\r\n                borderTop: \"style=border-top-color:\" + clr + \";\",\r\n                border: \"style=border-color:\" + clr + \";\",\r\n            };\r\n        };\r\n\r\n        const color = $target.data(\"spinner-color\");\r\n        let param = null;\r\n        if (color) {\r\n            $target.css({ \"background-color\": color });\r\n            param = makeTemplateParam(color);\r\n        }\r\n        $target.append(_template(param));\r\n\r\n        return refresh($target);\r\n    }\r\n\r\n    // iOS 10.2+ SVG SMIL アニメーションが 2回目以降動かない問題の対策\r\n    // data:image/svg+xml;<cache bust string>;base64,... とすることで data-url にも cache busting が有効になる\r\n    function refresh($target: JQuery): JQuery {\r\n        const PREFIX = [\"-webkit-\", \"\"];\r\n\r\n        const valid = (prop) => {\r\n            return (prop && \"none\" !== prop);\r\n        };\r\n\r\n        let dataUrl: string;\r\n        for (let i = 0, n = PREFIX.length; i < n; i++) {\r\n            if (!valid(dataUrl)) {\r\n                dataUrl = $target.css(PREFIX[i] + \"mask-image\");\r\n                if (valid(dataUrl)) {\r\n                    // iOS では url(data***); 内に '\"' は入らない\r\n                    const match = dataUrl.match(/(url\\(data:image\\/svg\\+xml;)([\\s\\S]*)?(base64,[\\s\\S]*\\))/);\r\n                    if (match) {\r\n                        dataUrl = `${match[1]}bust=${Date.now().toString(36)};${match[3]}`;\r\n                    } else {\r\n                        dataUrl = null;\r\n                    }\r\n                }\r\n            }\r\n            if (valid(dataUrl)) {\r\n                $target.css(PREFIX[i] + \"mask-image\", dataUrl);\r\n            }\r\n        }\r\n\r\n        return $target;\r\n    }\r\n\r\n    /**\r\n     * Material Design Spinner 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-spinner, .ui-icon-loading\")\r\n            .each((index: number, elem: Element) => {\r\n                $(elem).spinner(options);\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * Text Input 用 Floating Label 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        const update = (elem: Element, floating: boolean) => {\r\n            const $elem = $(elem);\r\n            if (floating) {\r\n                $elem.addClass(\"ui-float-label-floating\");\r\n            } else {\r\n                $elem.removeClass(\"ui-float-label-floating\");\r\n            }\r\n        };\r\n\r\n        const floatingify = (elem: Element) => {\r\n            const id = $(elem).attr(\"for\");\r\n            const $input = $ui.find(\"#\" + id);\r\n            if (\"search\" === $input.jqmData(\"type\")) {\r\n                $(elem).addClass(\"ui-float-label-has-icon\");\r\n            }\r\n            update(elem, !!$input.val());\r\n            $input.on(\"keyup change input focus blur cut paste\", (event: JQuery.Event) => {\r\n                update(elem, !!$(event.target).val());\r\n            });\r\n        };\r\n\r\n        $ui.find(\"label.ui-float-label, .ui-float-label label\")\r\n            .each((index: number, elem: Element) => {\r\n                floatingify(elem);\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    import Framework = CDP.Framework;\r\n\r\n    /**\r\n     * jQuery Mobile Flip Switch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        /*\r\n         * flipswitch に紐づく label は OS によって event 発行形式が異なるためフックして独自イベントで対応する.\r\n         * また flipswitch は内部で click を発行しているが、vclick に変更する.\r\n         */\r\n\r\n        const _getAllSwitches = (): JQuery => {\r\n            return $ui.find(\".ui-flipswitch\");\r\n        };\r\n\r\n        const _getInputFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = $switch.find(\"input\");\r\n            if ($input.length) {\r\n                return $input;\r\n            }\r\n            const $select = $switch.find(\"select\");\r\n            if ($select.length) {\r\n                return $select;\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const _change = ($input: JQuery, to: boolean): void => {\r\n            if ($input) {\r\n                if (\"INPUT\" === $input[0].nodeName) {\r\n                    $input.prop(\"checked\", to).flipswitch(\"refresh\");\r\n                } else if (\"SELECT\" === $input[0].nodeName) {\r\n                    $input.val(to ? \"on\" : \"off\").flipswitch(\"refresh\");\r\n                }\r\n            }\r\n        };\r\n\r\n        const _getLabelsFromSwitch = ($switch: JQuery): JQuery => {\r\n            const $input = _getInputFromSwitch($switch);\r\n            if ($input) {\r\n                const labels = (<any>$input[0]).labels;\r\n                if (labels) {\r\n                    return $(labels);\r\n                }\r\n            }\r\n            return $();\r\n        };\r\n\r\n        const _getSwitchFromLabel = ($label: JQuery): JQuery => {\r\n            const name = $label.attr(\"for\");\r\n            return _getAllSwitches().find(\"[name='\" + name + \"']\");\r\n        };\r\n\r\n        _getAllSwitches()\r\n            .on(\"vclick _change_flipswich\", (event: JQuery.Event) => {\r\n                const $switch = $(event.currentTarget);\r\n                const $target = $(event.target);\r\n                const $input = _getInputFromSwitch($switch);\r\n                const changeTo = !$switch.hasClass(\"ui-flipswitch-active\");\r\n\r\n                if ($target.hasClass(\"ui-flipswitch-input\")) {\r\n                    _change($input, changeTo);\r\n                } else if ($target.hasClass(\"ui-flipswitch-on\")) {\r\n                    if (Framework.Platform.Mobile && Framework.Patch.isSupportedVclick()) {\r\n                        _change($input, changeTo);\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            })\r\n            .each((index: number, flipswitch: Element) => {\r\n                _getLabelsFromSwitch($(flipswitch))\r\n                    .on(\"vclick\", (event: JQuery.Event) => {\r\n                        const $switch = _getSwitchFromLabel($(event.target));\r\n                        if (!$switch.parent().hasClass(\"ui-state-disabled\")) {\r\n                            $switch.trigger(\"_change_flipswich\");\r\n                        }\r\n                        event.preventDefault();\r\n                    });\r\n            });\r\n\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    /**\r\n     * jQuery Mobile Slider 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyDomExtension($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        $ui.find(\".ui-slider-input\")\r\n            .on(\"slidestop\", (event: JQuery.Event) => {\r\n                const $handles = $(event.currentTarget)\r\n                    .parent()\r\n                    .find(\".ui-slider-handle\");\r\n                $handles.blur();\r\n            });\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyDomExtension);\r\n}\r\n","namespace CDP.UI.Extension {\r\n\r\n    //! iScroll.click patch\r\n    const patch_IScroll_utils_click = function (event: Event): void {\r\n        const target: any = event.target;\r\n        const e: any = event;\r\n        let ev: MouseEvent;\r\n\r\n        // [CDP modified]: set target.clientX.\r\n        if (null == target.clientX || null == target.clientY) {\r\n            if (null != e.pageX && null != e.pageY) {\r\n                target.clientX = e.pageX;\r\n                target.clientY = e.pageY;\r\n            } else if (e.changedTouches && e.changedTouches[0]) {\r\n                target.clientX = e.changedTouches[0].pageX;\r\n                target.clientY = e.changedTouches[0].pageY;\r\n            }\r\n        }\r\n\r\n        if (!(/(SELECT|INPUT|TEXTAREA)/i).test(target.tagName)) {\r\n            ev = document.createEvent(\"MouseEvents\");\r\n            ev.initMouseEvent(\"click\", true, true, e.view, 1,\r\n                target.screenX, target.screenY, target.clientX, target.clientY,\r\n                e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,\r\n                0, null);\r\n\r\n            (<any>ev)._constructed = true;\r\n            target.dispatchEvent(ev);\r\n        }\r\n    };\r\n\r\n    let s_applied = false;\r\n\r\n    /**\r\n     * iScroll Patch 拡張\r\n     *\r\n     * @param {jQuery}              $ui       [in] 検索対象の jQuery オブジェクト\r\n     * @param {DomExtensionOptions} [options] [in] オプション\r\n     */\r\n    function applyPatch($ui: JQuery, options?: DomExtensionOptions): JQuery {\r\n        if (!s_applied && global.IScroll && global.IScroll.utils) {\r\n            global.IScroll.utils.click = patch_IScroll_utils_click;\r\n            s_applied = true;\r\n        }\r\n        return $ui;\r\n    }\r\n\r\n    // 登録\r\n    ExtensionManager.registerDomExtension(applyPatch);\r\n}\r\n"]}