{"version":3,"sources":["dist/cdp.promise.js"],"names":["root","factory","define","amd","$","CDP","exports","module","require","jQuery","this","self","global","TAG","makeCancelable","df","options","extendOptions","cancel","cancelCallback","_abort","info","originalMessage","message","undefined","detail","extend","dependency","abort","console","error","callReject","state","reject","_dependOn","promise","_this","always","_target","target","dependOn","makePromise","cancelable","bind","wait","deferreds","_i","arguments","length","_deferreds","concat","apply","Deferred","results","isFinished","some","element","status","forEach","deferred","index","push","args","then","resolve","race","PromiseManager","_pool","_id","prototype","add","cookie","id","filter","promises","map","PromiseConstructor","executor","value","reason","all","when","Promise"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.promise.js 2.1.0\n *\n * Date: 2018-01-24T03:43:48.989Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"jquery\"], function ($) { return factory(root.CDP || (root.CDP = {}), $, root); }); } else if (typeof exports === \"object\") { module.exports = factory(root.CDP || (root.CDP = {}), require(\"jquery\"), root); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$, root); } }(((this || 0).self || global), function (CDP, $, root) {\nvar CDP;\n(function (CDP) {\n    var TAG = \"[CDP.Promise] \";\n    /**\n     * Cancel 可能オブジェクトの作成\n     *\n     * @internal <br>\n     *\n     * @param df jQueryDeferred instance を指定\n     * @param options jQueryPromise を拡張するオブジェクト or キャンセル時に呼び出される関数を指定\n     * @returns Cancelable property\n     */\n    function makeCancelable(df, options) {\n        var extendOptions;\n        var cancel;\n        if (\"function\" === typeof options) {\n            cancel = options;\n        }\n        else {\n            extendOptions = options;\n            if (extendOptions && extendOptions.cancelCallback) {\n                cancel = extendOptions.cancelCallback;\n            }\n            else {\n                cancel = function () { };\n            }\n        }\n        var _abort = function (info) {\n            var originalMessage = (info && info.message) ? info.message : undefined;\n            var detail = info ? $.extend({}, info, { message: \"abort\", originalMessage: originalMessage }) : { message: \"abort\" };\n            cancel(detail);\n            if (null != this.dependency) {\n                if (this.dependency.abort) {\n                    this.dependency.abort(detail);\n                }\n                else {\n                    console.error(TAG + \"[call] dependency object doesn't have 'abort()' method.\");\n                }\n                if (this.callReject && \"pending\" === this.state()) {\n                    df.reject(detail);\n                }\n            }\n            else if (\"pending\" === this.state()) {\n                df.reject(detail);\n            }\n        };\n        var _dependOn = function (promise) {\n            var _this = this;\n            if (promise.abort) {\n                this.dependency = promise;\n                promise\n                    .always(function () {\n                    _this.dependency = null;\n                });\n            }\n            else {\n                console.error(TAG + \"[set] dependency object doesn't have 'abort()' method.\");\n            }\n            return promise;\n        };\n        var _target = $.extend({}, {\n            dependency: null,\n            callReject: false,\n        }, extendOptions);\n        return {\n            df: df,\n            target: _target,\n            abort: _abort,\n            dependOn: _dependOn,\n        };\n    }\n    /**\n     * @en make [[IPromise]] object.\n     * @ja [[IPromise]] オブジェクトの作成\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  // pipe line operation\n     *  function procPipeline(): IPromise<SomeData> {\n     *      const df = $.Deferred();            // create jQueryDeferred instance.\n     *      const promise = makePromise(df);    // create IPromise instance.\n     *\n     *      // async1(), async2(), async3() are async function and returned IPromise instance.\n     *      promsie.dependOn(async1())\n     *          .then(() => {\n     *              return promsie.dependOn(async2());\n     *          })\n     *          .then(() => {\n     *              return promsie.dependOn(async3());\n     *          })\n     *          .done(() => {\n     *              df.resolve({ somedata: \"hoge\" });\n     *          })\n     *          .fail((error) => {\n     *              df.reject(error);\n     *          });\n     *\n     *      return promise;\n     *  }\n     *\n     *  // client of pipe line operation\n     *  function procCaller(): void {\n     *      const promise = procPipeline();\n     *      setTimeout(() => {\n     *          promise.abort(); // The whole cancellation is possible by optional timing.\n     *          // In whichever processing of async1(), async2() or async3(),\n     *          // it can be canceled appropriately.\n     *      });\n     *  }\n     *\n     * ```\n     *\n     * @param df\n     *  - `en` set the jQueryDeferred instance.\n     *  - `ja` jQueryDeferred instance を指定\n     * @param options\n     *  - `en` set the extend object or cancel callback function.\n     *  - `ja` jQueryPromise を拡張するオブジェクト or キャンセル時に呼び出される関数を指定\n     * @returns\n     */\n    function makePromise(df, options) {\n        var cancelable = makeCancelable(df, options);\n        var promise = df.promise(cancelable.target);\n        if (null == promise.abort) {\n            promise.abort = cancelable.abort.bind(promise);\n        }\n        if (null == promise.dependOn) {\n            promise.dependOn = cancelable.dependOn.bind(promise);\n        }\n        return promise;\n    }\n    CDP.makePromise = makePromise;\n    function wait() {\n        var deferreds = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            deferreds[_i] = arguments[_i];\n        }\n        // 1次元配列に保証\n        var _deferreds = [].concat.apply([], deferreds);\n        // 実際の作業\n        var df = $.Deferred();\n        var results = [];\n        var isFinished = function () {\n            return !results.some(function (element) {\n                return \"pending\" === element.status;\n            });\n        };\n        _deferreds.forEach(function (deferred, index) {\n            results.push({\n                status: \"pending\",\n                args: null,\n            });\n            deferred\n                .then(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                results[index].status = \"resolved\";\n                results[index].args = args;\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                results[index].status = \"rejected\";\n                results[index].args = args;\n            })\n                .always(function () {\n                if (isFinished()) {\n                    df.resolve(results);\n                }\n            });\n        });\n        return df.promise();\n    }\n    CDP.wait = wait;\n    function race() {\n        var deferreds = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            deferreds[_i] = arguments[_i];\n        }\n        var df = $.Deferred();\n        var _deferreds = [].concat.apply([], deferreds);\n        _deferreds.forEach(function (deferred, index) {\n            deferred\n                .then(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (\"pending\" === df.state()) {\n                    df.resolve(args);\n                }\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (\"pending\" === df.state()) {\n                    df.reject(args);\n                }\n            });\n        });\n        return df.promise();\n    }\n    CDP.race = race;\n    //___________________________________________________________________________________________________________________//\n    /**\n     * @en The class provides the operation for multiple [[IPromise]] object.\n     * @ja 複数の [[IPromise]] を一括管理するクラス\n     *\n     * @example <br>\n     *\n     * ```ts\n     *  let _prmsManager = new PromiseManager();\n     *\n     *  function procCaller(): void {\n     *      // add parallel operations under the management.\n     *      _prmsManager.add(async1);\n     *      _prmsManager.add(async2);\n     *      _prmsManager.add(async3);\n     *  }\n     *\n     *  function allCancel(): void {\n     *      // just one call. all parallel ops are canceled.\n     *      _prmsManager.cancel();\n     *  }\n     * ```\n     */\n    var PromiseManager = /** @class */ (function () {\n        function PromiseManager() {\n            this._pool = [];\n            this._id = 0;\n        }\n        ///////////////////////////////////////////////////////////////////////\n        // public method\n        /**\n         * @en add Promise object that has abort() method.\n         * @ja abort() を持つ Promise オブジェクトを管理下に追加\n         */\n        PromiseManager.prototype.add = function (promise) {\n            var _this = this;\n            if (promise == null) {\n                return null;\n            }\n            // abort() を持っていない場合はエラー\n            if (!promise.abort) {\n                console.error(TAG + \"[add] promise object doesn't have 'abort()' method.\");\n                return promise;\n            }\n            var cookie = {\n                promise: promise,\n                id: this._id++,\n            };\n            this._pool.push(cookie);\n            promise\n                .always(function () {\n                _this._pool = _this._pool.filter(function (element) {\n                    if (element.id !== cookie.id) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                });\n            });\n            return promise;\n        };\n        /**\n         * @en call abort() to under the management Promises.\n         * @ja 管理対象の Promise に対して abort を発行\n         *\n         * @param info\n         *  - `en` abort() argument\n         *  - `ja` abort() に渡される引数\n         * @returns\n         *  - `en` The cancellation to cancel processing is prohibited.\n         *  - `ja` キャンセル処理に対するキャンセルは不可\n         */\n        PromiseManager.prototype.cancel = function (info) {\n            var promises = this.promises();\n            promises.forEach(function (element) {\n                if (element.abort) {\n                    element.abort(info);\n                }\n            });\n            return wait.apply(null, promises);\n        };\n        /**\n         * @en get Promise objects as array. <br>\n         *     only pending state object are returned.\n         * @ja 管理対象の Promise を配列で取得 <br>\n         *     pending 状態のオブジェクトのみが返る.\n         */\n        PromiseManager.prototype.promises = function () {\n            return this._pool.map(function (element) {\n                return element.promise;\n            });\n        };\n        return PromiseManager;\n    }());\n    CDP.PromiseManager = PromiseManager;\n    //___________________________________________________________________________________________________________________//\n    /**\n     * @en Cancelable Promise class for ES2015 Promiise compatible.\n     * @ja ES2015 Promise 互換のキャンセル可能な Promise オブジェクト\n     */\n    var PromiseConstructor = /** @class */ (function () {\n        /**\n         * @example <br>\n         *\n         * ```ts\n         *  // override global \"Promise\" for using Cancelable Promise in this module scope.\n         *  import { Promise } from \"cdp\";\n         *\n         *  function (): IPromise<SomeData> => {\n         *      return new Promise((resolve, reject, dependOn) => {\n         *          // async1(), async2() are async function and returned IPromise instance.\n         *          dependOn(async1())\n         *              .then(() => {\n         *                  return dependOn(async2());\n         *              })\n         *              .then(() => {\n         *                  resolve({ somedata: \"hoge\" });\n         *              })\n         *              .catch((error) => {\n         *                  reject(error);\n         *              });\n         *          });\n         *      };\n         *  }\n         * ```\n         *\n         * @param executor\n         *  - `en` ES2015 Promise executer compatible with `dependOn` 3rd arg.\n         *  - `ja` ES6 Promise 互換引数. (dependOn を第3引数に渡す)\n         * @param options\n         *  - `en` set the extend object or cancel callback function.\n         *  - `ja` jQueryPromise を拡張するオブジェクト or キャンセル時に呼び出される関数を指定\n         */\n        function PromiseConstructor(executor, options) {\n            // apply mixin\n            var cancelable = makeCancelable($.Deferred(), options);\n            $.extend(true, this, cancelable.df, cancelable.target);\n            this.abort = cancelable.abort.bind(this);\n            this.dependOn = cancelable.dependOn.bind(this);\n            executor(this.resolve, this.reject, this.dependOn);\n        }\n        ///////////////////////////////////////////////////////////////////////\n        // static methods:\n        PromiseConstructor.resolve = function (value) {\n            return $.Deferred().resolve(value);\n        };\n        PromiseConstructor.reject = function (reason) {\n            return $.Deferred().reject(reason);\n        };\n        PromiseConstructor.all = function () {\n            var deferreds = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                deferreds[_i] = arguments[_i];\n            }\n            return $.when.apply(this, [].concat.apply([], deferreds));\n        };\n        PromiseConstructor.wait = function () {\n            var deferreds = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                deferreds[_i] = arguments[_i];\n            }\n            return wait([].concat.apply([], deferreds));\n        };\n        PromiseConstructor.race = function () {\n            var deferreds = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                deferreds[_i] = arguments[_i];\n            }\n            return race([].concat.apply([], deferreds));\n        };\n        return PromiseConstructor;\n    }());\n    CDP.PromiseConstructor = PromiseConstructor;\n    CDP.Promise = PromiseConstructor;\n})(CDP || (CDP = {}));\n\nroot.Promise = root.Promise || CDP.Promise; return CDP; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}