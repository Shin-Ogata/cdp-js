{"version":3,"sources":["dist/cdp.tools.js"],"names":["root","factory","define","amd","CDP","jQuery","$","this","self","global","Tools","RESULT_CODE_BASE","_MODULE_RESULT_CODE_RANGE_CDP","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","RESULT_CODE","DECLARE_ERROR_CODE","CDP_TOOLS","FUNCTIONS","BLOB","Promise","TAG","Binary","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","makeErrorInfoFromDOMError","resultCode","cause","tag","message","_cause","name","makeErrorInfo","newBlob","blobParts","options","Blob","blobBuilderObject","blobBuilder","parts","Array","append","getBlob","type","arrayBufferToBlob","buf","mimeType","base64ToBlob","base64","base64ToArrayBuffer","dataUrlToBlob","dataUrl","split","bytes","window","atob","arrayBuffer","ArrayBuffer","length","data","Uint8Array","i","len","charCodeAt","base64ToUint8Array","encoded","arrayBufferToBase64","uint8ArrayToBase64","byteLength","String","fromCharCode","btoa","readBlobAsArrayBuffer","blob","reader","FileReader","cancel","abort","resolve","reject","onload","result","onerror","ERROR_CDP_TOOLS_FILE_READER_ERROR","error","readAsArrayBuffer","readBlobAsUint8Array","dependOn","then","catch","readBlobAsText","encode","readAsText","readBlobAsDataURL","readAsDataURL","blobURL","URL","webkitURL","xhrSuccessStatus","0","1223","ajaxTransport","originalOptions","jqXHR","FormData","dataType","abortCallback_1","send","headers","callback","xhr","XMLHttpRequest","url","async","responseType","username","password","_callback","addEventListener","_data","response","status","statusText","getAllResponseHeaders","open","hasOwnProperty","setRequestHeader","abs","x","max","lhs","rhs","min","toZeroPadding","no","limit","signed","Number","isNaN","join","slice","getStringSize","src","size","toStringChunks","chunks","setChunk","input","half","Math","floor","push","makeChunk","work","failures","shift","inherit","subClass","superClass","_prototype","prototype","_inherit","constructor","extend","mixin","derived","bases","_i","arguments","forEach","base","Object","getOwnPropertyNames","protoProps","staticProps","parent","child","apply","Surrogate","__super__","getDevicePixcelRatio","mediaQuery","is_firefox","navigator","userAgent","toLowerCase","indexOf","devicePixelRatio","matchMedia","matches","s_canvasFactory","getCanvas","document","createElement","cloneNode","ensureImageLoaded","img","Image","destroy","event","ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED","resizeImage","longSideLength","canvas","ih","height","iw","width","ia","cw","ch","ERROR_CDP_TOOLS_INVALID_IMAGE","round","getContext","drawImage","toDataURL","DateTime","computeDate","add","target","date","Date","getTime","setUTCFullYear","getUTCFullYear","setUTCMonth","getUTCMonth","setUTCDate","getUTCDate","setUTCHours","getUTCHours","setUTCMinutes","getUTCMinutes","setUTCSeconds","getUTCSeconds","setUTCMilliseconds","getUTCMilliseconds","console","warn","convertISOStringToDate","dateString","convertDateToISOString","isoDateString","toISOString","offset","substr","convertFileSystemStringToDate","dateTime","replace","timeArray","timeString","convertDateToFileSystemString","fileSystemString","Template","getTemplateElement","key","cache","mapElement","getElementMap","$element","html","findHtmlFromSource","find","exception","empty","_mapElement","_mapSource","getJST","template","jst","Hogan","compile","text","render","_","getSourceMap","mapSource","ajax","method","success","__assign","assign","t","s","n","p","call","ProgressCounter","reset","_settings","beginTime","now","allowIncrementRemain","lastRemainTime","Infinity","compute","progress","passTime","remainTime"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.tools.js 2.2.0\n *\n * Date: 2018-01-09T03:19:04.096Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"cdp.core\", \"cdp.promise\"], function () { return factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); }); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); } }(((this || 0).self || global), function (CDP, $) { CDP.Tools = CDP.Tools || {};\nvar CDP;\n(function (CDP) {\n    /**\n     * @enum  RESULT_CODE_BASE\n     * @brief リザルトコードのオフセット値\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS_DECLARERATION\"] = 0] = \"CDP_TOOLS_DECLARERATION\";\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS\"] = 4 * CDP._MODULE_RESULT_CODE_RANGE_CDP] = \"CDP_TOOLS\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    /**\n     * @enum  LOCAL_CODE_BASE\n     * @brief cdp.tools 内のローカルコードオフセット値\n     */\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"FUNCTIONS\"] = 0] = \"FUNCTIONS\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"BLOB\"] = 1 * FUNCTION_CODE_RANGE] = \"BLOB\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /* tslint:disable:max-line-length */\n    /**\n     * @enum  RESULT_CODE\n     * @brief cdp.tools のエラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_DECLARATION\"] = 0] = \"ERROR_CDP_TOOLS_DECLARATION\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 1, \"image load failed.\")] = \"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_INVALID_IMAGE\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 2, \"invalid image.\")] = \"ERROR_CDP_TOOLS_INVALID_IMAGE\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_FILE_READER_ERROR\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.BLOB + 1, \"FileReader method failed.\")] = \"ERROR_CDP_TOOLS_FILE_READER_ERROR\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /* tslint:enable:max-line-length */\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Binary] \";\n        /**\n         * @class Binary\n         * @brief バイナリユーティリティ\n         */\n        var Binary = /** @class */ (function () {\n            // private constructor\n            function Binary() {\n                // noop\n            }\n            /**\n             * Get BlobBuilder\n             *\n             * @obsolete\n             * @return {any} BlobBuilder\n             */\n            Binary.getBlobBuilder = function () {\n                return CDP.global.BlobBuilder || CDP.global.WebKitBlobBuilder || CDP.global.MozBlobBuilder || CDP.global.MSBlobBuilder;\n            };\n            /**\n             * エラー情報生成 from DOMError\n             *\n             * @param resultCode [in] RESULT_CODE を指定\n             * @param cause      [in] 下位の DOM エラーを指定\n             * @param [tag]      [in] TAG を指定\n             * @param [message]  [in] メッセージを指定\n             * @returns エラーオブジェクト\n             */\n            Binary.makeErrorInfoFromDOMError = function (resultCode, cause, tag, message) {\n                var _cause;\n                if (cause) {\n                    _cause = {\n                        name: cause.name,\n                        message: cause.name,\n                    };\n                }\n                return CDP.makeErrorInfo(resultCode, tag, message, _cause);\n            };\n            /**\n             * Get BlobBuilder\n             *\n             * @obsolete\n             * @return 構築済み Blob オブジェクト\n             */\n            Binary.newBlob = function (blobParts, options) {\n                if (CDP.global.Blob) {\n                    return new CDP.global.Blob(blobParts, options);\n                }\n                else {\n                    // under Android 4.4 KitKat\n                    options = options || {};\n                    var blobBuilderObject = Binary.getBlobBuilder();\n                    var blobBuilder = new blobBuilderObject();\n                    var parts = (blobParts instanceof Array) ? blobParts[0] : blobParts;\n                    blobBuilder.append(parts);\n                    return blobBuilder.getBlob(options.type);\n                }\n            };\n            /**\n             * ArrayBuffer to Blob\n             *\n             * @param buf [in] ArrayBuffer data\n             * @param mimeType [in] MimeType of data\n             * @returns Blob data\n             */\n            Binary.arrayBufferToBlob = function (buf, mimeType) {\n                return Binary.newBlob([buf], { type: mimeType });\n            };\n            /**\n             * Base64 string to Blob\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            Binary.base64ToBlob = function (base64, mimeType) {\n                return Binary.newBlob([Binary.base64ToArrayBuffer(base64)], { type: mimeType });\n            };\n            /**\n             * data-url 形式画像から Blob オブジェクトへ変換\n             *\n             * @param  {String} dataUrl    [in] data url\n             * @param  {String} [mimeType] [in] mime type を指定. 既定では \"image/png\"\n             * @return {Blob} Blob インスタンス\n             */\n            Binary.dataUrlToBlob = function (dataUrl, mimeType) {\n                if (mimeType === void 0) { mimeType = \"image/png\"; }\n                var base64 = dataUrl.split(\",\")[1];\n                return Binary.base64ToBlob(base64, mimeType);\n            };\n            /**\n             * Base64 string to ArrayBuffer\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {ArrayBuffer} ArrayBuffer data\n             */\n            Binary.base64ToArrayBuffer = function (base64) {\n                var bytes = window.atob(base64);\n                var arrayBuffer = new ArrayBuffer(bytes.length);\n                var data = new Uint8Array(arrayBuffer);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return arrayBuffer;\n            };\n            /**\n             * Base64 string to Uint8Array\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @return {Uint8Array} Uint8Array data\n             */\n            Binary.base64ToUint8Array = function (encoded) {\n                var bytes = window.atob(encoded);\n                var data = new Uint8Array(bytes.length);\n                for (var i = 0, len = bytes.length; i < len; ++i) {\n                    data[i] = bytes.charCodeAt(i);\n                }\n                return data;\n            };\n            /**\n             * ArrayBuffer to base64 string\n             *\n             * @param arrayBuffer {ArrayBuffer} [in] ArrayBuffer data\n             * @return {string} base64 data\n             */\n            Binary.arrayBufferToBase64 = function (arrayBuffer) {\n                var bytes = new Uint8Array(arrayBuffer);\n                return Binary.uint8ArrayToBase64(bytes);\n            };\n            /**\n             * Uint8Array to base64 string\n             *\n             * @param bytes {Uint8Array} [in] Uint8Array data\n             * @return {string} base64 data\n             */\n            Binary.uint8ArrayToBase64 = function (bytes) {\n                var data = \"\";\n                for (var i = 0, len = bytes.byteLength; i < len; ++i) {\n                    data += String.fromCharCode(bytes[i]);\n                }\n                return window.btoa(data);\n            };\n            /**\n             * read Blob as ArrayBuffer\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<ArrayBuffer>} promise object\n             */\n            Binary.readBlobAsArrayBuffer = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsArrayBuffer() failed.\"));\n                    };\n                    reader.readAsArrayBuffer(blob);\n                }, cancel);\n            };\n            /**\n             * read Blob as Uint8Array\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsUint8Array = function (blob) {\n                return new Promise(function (resolve, reject, dependOn) {\n                    dependOn(Binary.readBlobAsArrayBuffer(blob))\n                        .then(function (result) {\n                        resolve(new Uint8Array(result));\n                    })\n                        .catch(function (error) {\n                        reject(error);\n                    });\n                });\n            };\n            /**\n             * read Blob as text string\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsText = function (blob, encode) {\n                if (encode === void 0) { encode = \"utf-8\"; }\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsText() failed.\"));\n                    };\n                    reader.readAsText(blob, encode);\n                }, cancel);\n            };\n            /**\n             * read Blob as Data URL\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<string>} promise object\n             */\n            Binary.readBlobAsDataURL = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsDataURL() failed.\"));\n                    };\n                    reader.readAsDataURL(blob);\n                }, cancel);\n            };\n            /**\n             * URL Object\n             *\n             * @obsolete\n             * @return {any} URL Object\n             */\n            Binary.blobURL = (function () {\n                return CDP.global.URL || CDP.global.webkitURL;\n            })();\n            return Binary;\n        }());\n        Tools.Binary = Binary;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/**\n * @file  BinaryTransport.ts\n * @brief jQuery ajax transport for making binary data type requests.\n *\n *        original: https://github.com/henrya/js-jquery/blob/master/BinaryTransport/jquery.binarytransport.js\n *        author:   Henry Algus <henryalgus@gmail.com>\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // Support file protocol. (as same as official way)\n        var xhrSuccessStatus = {\n            0: 200,\n            1223: 204\n        };\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n            if (CDP.global.FormData &&\n                ((options.dataType && (options.dataType === \"binary\")) ||\n                    (options.data && ((CDP.global.ArrayBuffer && options.data instanceof ArrayBuffer) ||\n                        (CDP.global.Blob && options.data instanceof CDP.global.Blob))))) {\n                var abortCallback_1;\n                return {\n                    send: function (headers, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest();\n                        var url = options.url;\n                        var type = options.type;\n                        var async = options.async || true;\n                        // blob or arraybuffer. Default is blob\n                        var dataType = options.responseType || \"blob\";\n                        var data = options.data || null;\n                        var username = options.username || null;\n                        var password = options.password || null;\n                        var _callback = callback || (function () { });\n                        // succeeded handler\n                        xhr.addEventListener(\"load\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            _callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // error handler\n                        xhr.addEventListener(\"error\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort handler\n                        xhr.addEventListener(\"abort\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort callback\n                        abortCallback_1 = function () {\n                            xhr.abort();\n                        };\n                        xhr.open(type, url, async, username, password);\n                        // setup custom headers\n                        for (var i in headers) {\n                            if (headers.hasOwnProperty(i)) {\n                                xhr.setRequestHeader(i, headers[i]);\n                            }\n                        }\n                        xhr.responseType = dataType;\n                        xhr.send(data);\n                    },\n                    abort: function () {\n                        if (abortCallback_1) {\n                            abortCallback_1();\n                        }\n                    }\n                };\n            }\n        });\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Functions] \";\n        /**\n         * Math.abs よりも高速な abs\n         */\n        function abs(x) {\n            return x >= 0 ? x : -x;\n        }\n        Tools.abs = abs;\n        /**\n         * Math.max よりも高速な max\n         */\n        function max(lhs, rhs) {\n            return lhs >= rhs ? lhs : rhs;\n        }\n        Tools.max = max;\n        /**\n         * Math.min よりも高速な min\n         */\n        function min(lhs, rhs) {\n            return lhs <= rhs ? lhs : rhs;\n        }\n        Tools.min = min;\n        /**\n         * 数値を 0 詰めして文字列を生成\n         */\n        function toZeroPadding(no, limit) {\n            var signed = \"\";\n            no = Number(no);\n            if (isNaN(no) || isNaN(limit) || limit <= 0) {\n                return null;\n            }\n            if (no < 0) {\n                no = Tools.abs(no);\n                signed = \"-\";\n            }\n            return signed + (Array(limit).join(\"0\") + no).slice(-limit);\n        }\n        Tools.toZeroPadding = toZeroPadding;\n        /**\n         * 文字列のバイト数をカウント\n         */\n        function getStringSize(src) {\n            return (Tools.Binary.newBlob([src], { type: \"text/plain\" })).size;\n        }\n        Tools.getStringSize = getStringSize;\n        /**\n         * 文字列をバイト制限して分割\n         */\n        function toStringChunks(src, limit) {\n            var chunks = [];\n            var setChunk = function (input) {\n                if (limit < getStringSize(input)) {\n                    var half = Math.floor(input.length / 2);\n                    var lhs = input.slice(0, half);\n                    var rhs = input.slice(half);\n                    return [lhs, rhs];\n                }\n                else {\n                    chunks.push(input);\n                    return [];\n                }\n            };\n            var makeChunk = function (work) {\n                var failures = setChunk(work);\n                while (0 < failures.length) {\n                    makeChunk(failures.shift());\n                }\n            };\n            makeChunk(src);\n            return chunks;\n        }\n        Tools.toStringChunks = toStringChunks;\n        /**\n         * 多重継承のための実行時継承関数\n         *\n         * Sub Class 候補オブジェクトに対して Super Class 候補オブジェクトを直前の Super Class として挿入する。\n         * prototype のみコピーする。\n         * インスタンスメンバをコピーしたい場合、Super Class が疑似コンストラクタを提供する必要がある。\n         * 詳細は cdp.tools.Functions.spec.ts を参照。\n         *\n         * @param subClass   {constructor} [in] オブジェクトの constructor を指定\n         * @param superClass {constructor} [in] オブジェクトの constructor を指定\n         */\n        function inherit(subClass, superClass) {\n            var _prototype = subClass.prototype;\n            function _inherit() {\n                this.constructor = subClass;\n            }\n            _inherit.prototype = superClass.prototype;\n            subClass.prototype = new _inherit();\n            $.extend(subClass.prototype, _prototype);\n        }\n        Tools.inherit = inherit;\n        /**\n         * mixin 関数\n         *\n         * TypeScript Official Site に載っている mixin 関数\n         * http://www.typescriptlang.org/Handbook#mixins\n         * 既に定義されているオブジェクトから、新規にオブジェクトを合成する。\n         *\n         * @param derived {constructor}    [in] 合成されるオブジェクトの constructor を指定\n         * @param bases   {constructor...} [in] 合成元オブジェクトの constructor を指定 (可変引数)\n         */\n        function mixin(derived) {\n            var bases = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                bases[_i - 1] = arguments[_i];\n            }\n            bases.forEach(function (base) {\n                Object.getOwnPropertyNames(base.prototype).forEach(function (name) {\n                    derived.prototype[name] = base.prototype[name];\n                });\n            });\n        }\n        Tools.mixin = mixin;\n        /**\n         * \\~english\n         * Helper function to correctly set up the prototype chain, for subclasses.\n         * The function behavior is same as extend() function of Backbone.js.\n         *\n         * @param protoProps  {Object} [in] set prototype properties as object.\n         * @param staticProps {Object} [in] set static properties as object.\n         * @return {Object} subclass constructor.\n         *\n         * \\~japanese\n         * クラス継承のためのヘルパー関数\n         * Backbone.js extend() 関数と同等\n         *\n         * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定\n         * @param staticProps {Object} [in] static properties をオブジェクトで指定\n         * @return {Object} サブクラスのコンストラクタ\n         */\n        function extend(protoProps, staticProps) {\n            var parent = this;\n            var child;\n            if (protoProps && protoProps.hasOwnProperty(\"constructor\")) {\n                child = protoProps.constructor;\n            }\n            else {\n                child = function () {\n                    return parent.apply(this, arguments);\n                };\n            }\n            $.extend(child, parent, staticProps);\n            var Surrogate = function () {\n                this.constructor = child;\n            };\n            Surrogate.prototype = parent.prototype;\n            child.prototype = new Surrogate;\n            if (protoProps) {\n                $.extend(child.prototype, protoProps);\n            }\n            child.__super__ = parent.prototype;\n            return child;\n        }\n        Tools.extend = extend;\n        /**\n         * DPI 取得\n         */\n        function getDevicePixcelRatio() {\n            var mediaQuery;\n            var is_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            if (null != window.devicePixelRatio && !is_firefox) {\n                return window.devicePixelRatio;\n            }\n            else if (window.matchMedia) {\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                    (min--moz-device-pixel-ratio: 1.5),\\\n                    (-o-min-device-pixel-ratio: 3/2),\\\n                    (min-resolution: 1.5dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 1.5;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 2),\\\n                    (min--moz-device-pixel-ratio: 2),\\\n                    (-o-min-device-pixel-ratio: 2/1),\\\n                    (min-resolution: 2dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 2;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 0.75),\\\n                    (min--moz-device-pixel-ratio: 0.75),\\\n                    (-o-min-device-pixel-ratio: 3/4),\\\n                    (min-resolution: 0.75dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 0.7;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        Tools.getDevicePixcelRatio = getDevicePixcelRatio;\n        // Canvas element のキャッシュ\n        var s_canvasFactory;\n        // キャッシュ済みの Canvas を取得する\n        function getCanvas() {\n            s_canvasFactory = s_canvasFactory || document.createElement(\"canvas\");\n            return s_canvasFactory.cloneNode(false);\n        }\n        Tools.getCanvas = getCanvas;\n        /**\n         * 画像リソースのロード完了を保証\n         * ブラウザ既定のプログレッシブロードを走らせないため.\n         *\n         * @param  {String} url [in] url (data-url)\n         * @return {IPromise<string>} 表示可能な url\n         */\n        function ensureImageLoaded(url) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    destroy();\n                    resolve(url);\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [url: \" + url + \"]\"));\n                };\n                img.src = url;\n            }, destroy);\n        }\n        Tools.ensureImageLoaded = ensureImageLoaded;\n        /**\n         * 画像のリサイズ\n         * 指定した長辺の長さにアスペクト比を維持してリサイズを行う\n         * longSideLength より小さな場合はオリジナルサイズで data-url を返却する\n         *\n         * @param  {String} src            [in] image に指定するソース\n         * @param  {Number} longSideLength [in] リサイズに使用する長辺の最大値を指定\n         * @return {IPromise<string>} base64 data url を返却\n         */\n        function resizeImage(src, longSideLength) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    var canvas = getCanvas();\n                    var ih = img.height, iw = img.width, ia = ih / iw;\n                    var cw, ch;\n                    if (iw === 0 || 0 === ia) {\n                        reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_INVALID_IMAGE, TAG, \"invalid image. [src: \" + src + \"]\"));\n                    }\n                    else {\n                        if (longSideLength <= 0) {\n                            longSideLength = (ia < 1) ? iw : ih;\n                        }\n                        if (ia < 1) {\n                            cw = (longSideLength < iw) ? longSideLength : iw;\n                            ch = Math.round(cw * ia);\n                        }\n                        else {\n                            ch = (longSideLength < ih) ? longSideLength : ih;\n                            cw = Math.round(ch / ia);\n                        }\n                        canvas.width = cw;\n                        canvas.height = ch;\n                        canvas.getContext(\"2d\").drawImage(img, 0, 0, cw, ch);\n                        resolve(canvas.toDataURL());\n                    }\n                    destroy();\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [src: \" + src + \"]\"));\n                };\n                img.src = src;\n            });\n        }\n        Tools.resizeImage = resizeImage;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/* tslint:disable:max-line-length */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.DateTime] \";\n        /**\n         * @class DateTime\n         * @brief 時刻操作のユーティリティクラス\n         */\n        var DateTime = /** @class */ (function () {\n            function DateTime() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // public static method\n            /**\n             * 基点となる日付から、n日後、n日前を算出\n             *\n             * @param base   {Date}   [in] 基準日\n             * @param add    {Number} [in] 加算日. マイナス指定でn日前も設定可能\n             * @param target {String} [in] { year | month | date | hour | min | sec | msec }\n             * @return {Date} 日付オブジェクト\n             */\n            DateTime.computeDate = function (base, add, target) {\n                if (target === void 0) { target = \"date\"; }\n                var date = new Date(base.getTime());\n                switch (target) {\n                    case \"year\":\n                        date.setUTCFullYear(base.getUTCFullYear() + add);\n                        break;\n                    case \"month\":\n                        date.setUTCMonth(base.getUTCMonth() + add);\n                        break;\n                    case \"date\":\n                        date.setUTCDate(base.getUTCDate() + add);\n                        break;\n                    case \"hour\":\n                        date.setUTCHours(base.getUTCHours() + add);\n                        break;\n                    case \"min\":\n                        date.setUTCMinutes(base.getUTCMinutes() + add);\n                        break;\n                    case \"sec\":\n                        date.setUTCSeconds(base.getUTCSeconds() + add);\n                        break;\n                    case \"msec\":\n                        date.setUTCMilliseconds(base.getUTCMilliseconds() + add);\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        date.setUTCDate(base.getUTCDate() + add);\n                }\n                return date;\n            };\n            /**\n             * Convert string to date object\n             *\n             * @param {String} date string ex) YYYY-MM-DDTHH:mm:ss.sssZ\n             * @return {Object} date object\n             */\n            DateTime.convertISOStringToDate = function (dateString) {\n                return new Date(dateString);\n            };\n            /**\n             * Convert date object into string (the ISO 8601 Extended Format)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] { year | month | date | min | sec | msec | tz }\n             * @return {String} date string\n             */\n            DateTime.convertDateToISOString = function (date, target) {\n                if (target === void 0) { target = \"tz\"; }\n                var isoDateString = date.toISOString();\n                var offset = 0;\n                if (27 === isoDateString.length) {\n                    offset = 3;\n                }\n                switch (target) {\n                    case \"year\":\n                        return isoDateString.substr(0, offset + 4);\n                    case \"month\":\n                        return isoDateString.substr(0, offset + 7);\n                    case \"date\":\n                        return isoDateString.substr(0, offset + 10);\n                    case \"min\":\n                        return isoDateString.substr(0, offset + 16);\n                    case \"sec\":\n                        return isoDateString.substr(0, offset + 19);\n                    case \"msec\":\n                        return isoDateString.substr(0, offset + 23);\n                    case \"tz\":\n                        return isoDateString;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        return isoDateString;\n                }\n            };\n            /**\n             * Convert file system compatible string to date object\n             *\n             * @param {String} date string ex) YYYY_MM_DDTHH_mm_ss_sss\n             * @return {Object} date object\n             */\n            DateTime.convertFileSystemStringToDate = function (dateString) {\n                var dateTime = dateString.split(\"T\");\n                var isoDateString = dateTime[0].replace(/_/g, \"-\");\n                if (dateTime[1]) {\n                    var timeArray = dateTime[1].split(\"_\");\n                    var timeString = \"T\";\n                    if (timeArray.length < 4) {\n                        timeString += timeArray.join(\":\");\n                    }\n                    else {\n                        timeString += timeArray.slice(0, 3).join(\":\");\n                        timeString += \".\" + timeArray[3];\n                    }\n                    isoDateString += timeString;\n                }\n                return new Date(isoDateString);\n            };\n            /**\n             * Convert date object into string in file system compatible format (YYYY_MM_DDTHH_mm_ss_sss)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] { year | month | date | min | sec | msec | tz }\n             * @return {String} file system compatible string\n             */\n            DateTime.convertDateToFileSystemString = function (date, target) {\n                if (target === void 0) { target = \"tz\"; }\n                var isoDateString = DateTime.convertDateToISOString(date, target);\n                var fileSystemString = isoDateString.replace(/[-:.]/g, \"_\");\n                return fileSystemString;\n            };\n            return DateTime;\n        }());\n        Tools.DateTime = DateTime;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Template] \";\n        //___________________________________________________________________________________________________________________//\n        /**\n         * @class Template\n         * @brief template script を管理するユーティリティクラス\n         */\n        var Template = /** @class */ (function () {\n            function Template() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // 公開メソッド\n            /**\n             * 指定した id, class 名, Tag 名をキーにテンプレートの JQuery Element を取得する。\n             *\n             * @param {String}  key     [in] id, class, tag を表す文字列\n             * @param {String}  [src]   [in] 外部 html を指定する場合は url を設定\n             * @param {Boolean} [cache] [in] src html をキャッシュする場合は true. src が指定されているときのみ有効\n             * @return template が格納されている JQuery Element\n             */\n            Template.getTemplateElement = function (key, src, cache) {\n                if (src === void 0) { src = null; }\n                if (cache === void 0) { cache = true; }\n                var mapElement = Template.getElementMap();\n                var $element = mapElement[key];\n                try {\n                    if (!$element) {\n                        if (src) {\n                            var html = Template.findHtmlFromSource(src);\n                            $element = $(html).find(key);\n                        }\n                        else {\n                            $element = $(key);\n                        }\n                        // 要素の検証\n                        if ($element <= 0) {\n                            throw (\"invalid [key, src] = [\" + key + \", \" + src + \"]\");\n                        }\n                        if (src && cache) {\n                            mapElement[key] = $element;\n                        }\n                    }\n                }\n                catch (exception) {\n                    console.error(TAG + exception);\n                    return null;\n                }\n                return $element;\n            };\n            /**\n             * Map オブジェクトの削除\n             * 明示的にキャッシュを開放する場合は本メソッドをコールする\n             */\n            Template.empty = function () {\n                Template._mapElement = null;\n                Template._mapSource = null;\n            };\n            Template.getJST = function (key, src, cache) {\n                var template = null;\n                var jst;\n                var $element;\n                if (key instanceof jQuery) {\n                    $element = key;\n                }\n                else {\n                    $element = Template.getTemplateElement(key, src, cache);\n                }\n                if (null != CDP.global.Hogan) {\n                    template = Hogan.compile($element.text());\n                    jst = function (data) {\n                        return template.render(data);\n                    };\n                }\n                else if (null != CDP.global._) {\n                    template = _.template($element.html());\n                    jst = function (data) {\n                        // 改行とタブは削除する\n                        return template(data).replace(/\\n|\\t/g, \"\");\n                    };\n                }\n                else {\n                    console.warn(TAG + \"cannot find template engine module.\");\n                    console.warn(\"    'hogan' or 'underscore' is required.\");\n                }\n                return jst;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // 内部メソッド\n            //! Element Map オブジェクトの取得\n            Template.getElementMap = function () {\n                if (!Template._mapElement) {\n                    Template._mapElement = {};\n                }\n                return Template._mapElement;\n            };\n            //! URL Map オブジェクトの取得\n            Template.getSourceMap = function () {\n                if (!Template._mapSource) {\n                    Template._mapSource = {};\n                }\n                return Template._mapSource;\n            };\n            //! URL Map から HTML を検索. 失敗した場合は undefined が返る\n            Template.findHtmlFromSource = function (src) {\n                var mapSource = Template.getSourceMap();\n                var html = mapSource[src];\n                if (!html) {\n                    $.ajax({\n                        url: src,\n                        method: \"GET\",\n                        async: false,\n                        dataType: \"html\",\n                        success: function (data) {\n                            html = data;\n                        },\n                        error: function (data, status) {\n                            throw (\"ajax request failed. status: \" + status);\n                        }\n                    });\n                    // キャッシュに格納\n                    mapSource[src] = html;\n                }\n                return html;\n            };\n            return Template;\n        }());\n        Tools.Template = Template;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.ProgressCounter] \";\n        /**\n         * @class ProgressCounter\n         * @brief 進捗の時間を扱うユーティリティクラス\n         */\n        var ProgressCounter = /** @class */ (function () {\n            /**\n             * constructor\n             *\n             * @param [options] オプション\n             */\n            function ProgressCounter(options) {\n                this.reset(options);\n            }\n            /**\n             * 開始時間を初期化\n             */\n            ProgressCounter.prototype.reset = function (options) {\n                this._settings = __assign({\n                    max: 100,\n                    beginTime: Date.now(),\n                    allowIncrementRemain: false,\n                    lastRemainTime: Infinity,\n                }, options);\n            };\n            /**\n             * 経過時間と推定残り時間を取得する\n             * 進捗値が 0 の場合は、推定残り時間に Infinity を返す\n             *\n             * @param   progress [in] 進捗値\n             * @returns 経過時間と推定残り時間 [msec]\n             */\n            ProgressCounter.prototype.compute = function (progress) {\n                var passTime = Date.now() - this._settings.beginTime;\n                var remainTime = Infinity;\n                if (null != progress && 0 !== progress) {\n                    remainTime = passTime * this._settings.max / progress - passTime;\n                }\n                if (this._settings.allowIncrementRemain || (remainTime < this._settings.lastRemainTime)) {\n                    this._settings.lastRemainTime = remainTime;\n                }\n                else {\n                    remainTime = this._settings.lastRemainTime;\n                }\n                return { passTime: passTime, remainTime: remainTime };\n            };\n            return ProgressCounter;\n        }());\n        Tools.ProgressCounter = ProgressCounter;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n\nreturn CDP.Tools; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}