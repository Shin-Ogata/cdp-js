{"version":3,"sources":["dist/cdp.tools.js"],"names":["root","factory","define","amd","CDP","jQuery","$","this","self","global","Tools","RESULT_CODE_BASE","_MODULE_RESULT_CODE_RANGE_CDP","FUNCTION_CODE_RANGE","LOCAL_CODE_BASE","RESULT_CODE","DECLARE_ERROR_CODE","CDP_TOOLS","FUNCTIONS","BLOB","Promise","TAG","Binary","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","makeErrorInfoFromDOMError","resultCode","cause","tag","message","_cause","name","makeErrorInfo","newBlob","blobParts","options","Blob","blobBuilderObject","blobBuilder","parts","Array","append","getBlob","type","arrayBufferToBlob","buffer","mimeType","uint8ArrayToBlob","array","dataURLToBlob","dataURL","result","execDataURLRegExp","base64","base64ToBlob","data","textToBlob","bytes","base64ToByteString","byteStringToUint8Array","text","readBlobAsArrayBuffer","blob","reader","FileReader","cancel","abort","resolve","reject","onload","onerror","ERROR_CDP_TOOLS_FILE_READER_ERROR","error","readAsArrayBuffer","readBlobAsUint8Array","dependOn","then","Uint8Array","catch","readBlobAsDataURL","readAsDataURL","readBlobAsBase64","split","readBlobAsText","encoding","decodeURIComponent","readAsText","dataURLToArrayBuffer","dataURLToUint8Array","base64ToUint8Array","textToUint8Array","base64ToArrayBuffer","textToArrayBuffer","textToByteString","arrayBufferToDataURL","uint8ArrayToDataURL","arrayBufferToBase64","uint8ArrayToBase64","arrayBufferToText","uint8ArrayToText","uint8ArrayToByteString","byteStringToBase64","byteStringToText","dataURLToText","base64ToText","textToDataURL","textToBase64","reDataURL","exec","component","test","prototype","map","call","i","String","fromCharCode","join","window","atob","encodeURIComponent","replace","match","p1","parseInt","c","charCodeAt","btoa","toString","slice","blobURL","URL","webkitURL","xhrSuccessStatus","0","1223","ajaxTransport","originalOptions","jqXHR","FormData","dataType","ArrayBuffer","abortCallback_1","send","headers","callback","xhr","XMLHttpRequest","url","async","responseType","username","password","_callback","addEventListener","_data","response","status","statusText","getAllResponseHeaders","open","hasOwnProperty","setRequestHeader","abs","x","max","lhs","rhs","min","toZeroPadding","no","limit","signed","Number","isNaN","getStringSize","src","size","toStringChunks","chunks","setChunk","input","half","Math","floor","length","push","makeChunk","work","failures","shift","inherit","subClass","superClass","_prototype","_inherit","constructor","extend","mixin","derived","bases","_i","arguments","forEach","base","Object","getOwnPropertyNames","protoProps","staticProps","parent","child","apply","Surrogate","__super__","getDevicePixcelRatio","mediaQuery","is_firefox","navigator","userAgent","toLowerCase","indexOf","devicePixelRatio","matchMedia","matches","s_canvasFactory","getCanvas","document","createElement","cloneNode","ensureImageLoaded","img","Image","destroy","event","ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED","resizeImage","longSideLength","canvas","ih","height","iw","width","ia","cw","ch","ERROR_CDP_TOOLS_INVALID_IMAGE","round","getContext","drawImage","toDataURL","DateTime","computeDate","add","target","date","Date","getTime","setUTCFullYear","getUTCFullYear","setUTCMonth","getUTCMonth","setUTCDate","getUTCDate","setUTCHours","getUTCHours","setUTCMinutes","getUTCMinutes","setUTCSeconds","getUTCSeconds","setUTCMilliseconds","getUTCMilliseconds","console","warn","convertISOStringToDate","dateString","dateValue","convertISOStringToDateValue","convertDateToISOString","isoDateString","toISOString","offset","substr","convertFileSystemStringToDate","convertFileSystemStringToDateValue","convertDateToFileSystemString","fileSystemString","isoString","reYear","reMonth","reDay","reDate","RegExp","source","reHours","reMinutes","reSeconds","reMs","reTime","reTz","reISOString","NaN","year","month","hours","minutes","seconds","ms","UTC","reFileSystemString","Template","getTemplateElement","key","cache","mapElement","getElementMap","$element","html","findHtmlFromSource","find","empty","_mapElement","_mapSource","getJST","jst","Hogan","template_1","compile","render","_","template_2","template","getSourceMap","mapSource","ajax","method","success","__assign","assign","t","s","n","p","ProgressCounter","reset","_settings","beginTime","now","allowIncrementRemain","lastRemainTime","Infinity","compute","progress","passTime","remainTime"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp.tools.js 2.2.0\n *\n * Date: 2018-03-23T11:34:42.024Z\n */\n(function (root, factory) { if (typeof define === \"function\" && define.amd) { define([\"cdp.core\", \"cdp.promise\"], function () { return factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); }); } else { factory(root.CDP || (root.CDP = {}), root.jQuery || root.$); } }(((this || 0).self || global), function (CDP, $) { CDP.Tools = CDP.Tools || {};\nvar CDP;\n(function (CDP) {\n    /**\n     * @enum  RESULT_CODE_BASE\n     * @brief リザルトコードのオフセット値\n     */\n    var RESULT_CODE_BASE;\n    (function (RESULT_CODE_BASE) {\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS_DECLARERATION\"] = 0] = \"CDP_TOOLS_DECLARERATION\";\n        RESULT_CODE_BASE[RESULT_CODE_BASE[\"CDP_TOOLS\"] = 4 * CDP._MODULE_RESULT_CODE_RANGE_CDP] = \"CDP_TOOLS\";\n    })(RESULT_CODE_BASE = CDP.RESULT_CODE_BASE || (CDP.RESULT_CODE_BASE = {}));\n    ///////////////////////////////////////////////////////////////////////\n    // module error declaration:\n    var FUNCTION_CODE_RANGE = 10;\n    /**\n     * @enum  LOCAL_CODE_BASE\n     * @brief cdp.tools 内のローカルコードオフセット値\n     */\n    var LOCAL_CODE_BASE;\n    (function (LOCAL_CODE_BASE) {\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"FUNCTIONS\"] = 0] = \"FUNCTIONS\";\n        LOCAL_CODE_BASE[LOCAL_CODE_BASE[\"BLOB\"] = 1 * FUNCTION_CODE_RANGE] = \"BLOB\";\n    })(LOCAL_CODE_BASE || (LOCAL_CODE_BASE = {}));\n    /* tslint:disable:max-line-length */\n    /**\n     * @enum  RESULT_CODE\n     * @brief cdp.tools のエラーコード定義\n     */\n    var RESULT_CODE;\n    (function (RESULT_CODE) {\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_DECLARATION\"] = 0] = \"ERROR_CDP_TOOLS_DECLARATION\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 1, \"image load failed.\")] = \"ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_INVALID_IMAGE\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.FUNCTIONS + 2, \"invalid image.\")] = \"ERROR_CDP_TOOLS_INVALID_IMAGE\";\n        RESULT_CODE[RESULT_CODE[\"ERROR_CDP_TOOLS_FILE_READER_ERROR\"] = CDP.DECLARE_ERROR_CODE(RESULT_CODE_BASE.CDP_TOOLS, LOCAL_CODE_BASE.BLOB + 1, \"FileReader method failed.\")] = \"ERROR_CDP_TOOLS_FILE_READER_ERROR\";\n    })(RESULT_CODE = CDP.RESULT_CODE || (CDP.RESULT_CODE = {}));\n    /* tslint:enable:max-line-length */\n})(CDP || (CDP = {}));\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Binary] \";\n        /**\n         * @class Binary\n         * @brief バイナリユーティリティ\n         */\n        var Binary = /** @class */ (function () {\n            // private constructor\n            function Binary() {\n                // noop\n            }\n            /**\n             * Get BlobBuilder\n             *\n             * @obsolete\n             * @return {any} BlobBuilder\n             */\n            Binary.getBlobBuilder = function () {\n                return CDP.global.BlobBuilder || CDP.global.WebKitBlobBuilder || CDP.global.MozBlobBuilder || CDP.global.MSBlobBuilder;\n            };\n            /**\n             * エラー情報生成 from DOMError\n             *\n             * @param resultCode [in] RESULT_CODE を指定\n             * @param cause      [in] 下位の DOM エラーを指定\n             * @param [tag]      [in] TAG を指定\n             * @param [message]  [in] メッセージを指定\n             * @returns エラーオブジェクト\n             */\n            Binary.makeErrorInfoFromDOMError = function (resultCode, cause, tag, message) {\n                var _cause;\n                if (cause) {\n                    _cause = {\n                        name: cause.name,\n                        message: cause.name,\n                    };\n                }\n                return CDP.makeErrorInfo(resultCode, tag, message, _cause);\n            };\n            /**\n             * Get BlobBuilder\n             *\n             * @obsolete\n             * @return 構築済み Blob オブジェクト\n             */\n            Binary.newBlob = function (blobParts, options) {\n                if (blobParts === void 0) { blobParts = []; }\n                if (options === void 0) { options = {}; }\n                if (CDP.global.Blob) {\n                    return new CDP.global.Blob(blobParts, options);\n                }\n                else {\n                    // under Android 4.4 KitKat\n                    options = options || {};\n                    var blobBuilderObject = Binary.getBlobBuilder();\n                    var blobBuilder = new blobBuilderObject();\n                    var parts = (blobParts instanceof Array) ? blobParts[0] : blobParts;\n                    blobBuilder.append(parts);\n                    return blobBuilder.getBlob(options.type);\n                }\n            };\n            /**\n             * ArrayBuffer to Blob\n             *\n             * @param buffer [in] ArrayBuffer data\n             * @param mimeType [in] MimeType of data\n             * @returns Blob data\n             */\n            Binary.arrayBufferToBlob = function (buffer, mimeType) {\n                if (mimeType === void 0) { mimeType = \"application/octet-stream\"; }\n                return Binary.newBlob([buffer], { type: mimeType });\n            };\n            /**\n             * Uint8Array to Blob\n             *\n             * @param array [in] Uint8Array data\n             * @param mimeType [in] MimeType of data\n             * @returns Blob data\n             */\n            Binary.uint8ArrayToBlob = function (array, mimeType) {\n                if (mimeType === void 0) { mimeType = \"application/octet-stream\"; }\n                return Binary.newBlob([array], { type: mimeType });\n            };\n            /**\n             * data URL string to Blob\n             *\n             * @param  {String} dataURL [in] data URL string\n             * @return {Blob} Blob data\n             */\n            Binary.dataURLToBlob = function (dataURL) {\n                var result = Binary.execDataURLRegExp(dataURL);\n                if (result.base64) {\n                    return Binary.base64ToBlob(result.data, result.mimeType);\n                }\n                else {\n                    return Binary.textToBlob(result.data, result.mimeType);\n                }\n            };\n            /**\n             * Base64 string to Blob\n             *\n             * @param base64 {string} [in] Base64 string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            Binary.base64ToBlob = function (base64, mimeType) {\n                if (mimeType === void 0) { mimeType = \"text/plain\"; }\n                var bytes = Binary.base64ToByteString(base64);\n                var array = Binary.byteStringToUint8Array(bytes);\n                return Binary.uint8ArrayToBlob(array, mimeType);\n            };\n            /**\n             * text string to Blob\n             *\n             * @param text {string} [in] text string data\n             * @param mimeType {string} [in] MimeType of data\n             * @return {Blob} Blob data\n             */\n            Binary.textToBlob = function (text, mimeType) {\n                if (mimeType === void 0) { mimeType = \"text/plain\"; }\n                return Binary.newBlob([text], { type: mimeType });\n            };\n            /**\n             * read Blob as ArrayBuffer\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<ArrayBuffer>} promise object\n             */\n            Binary.readBlobAsArrayBuffer = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsArrayBuffer() failed.\"));\n                    };\n                    reader.readAsArrayBuffer(blob);\n                }, cancel);\n            };\n            /**\n             * read Blob as Uint8Array\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsUint8Array = function (blob) {\n                return new Promise(function (resolve, reject, dependOn) {\n                    dependOn(Binary.readBlobAsArrayBuffer(blob))\n                        .then(function (buffer) {\n                        resolve(new Uint8Array(buffer));\n                    })\n                        .catch(function (error) {\n                        reject(error);\n                    });\n                });\n            };\n            /**\n             * read Blob as data URL\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<string>} promise object\n             */\n            Binary.readBlobAsDataURL = function (blob) {\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(reader.result);\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsDataURL() failed.\"));\n                    };\n                    reader.readAsDataURL(blob);\n                }, cancel);\n            };\n            /**\n             * read Blob as Base64 string\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<string>} promise object\n             */\n            Binary.readBlobAsBase64 = function (blob) {\n                return new Promise(function (resolve, reject, dependOn) {\n                    dependOn(Binary.readBlobAsDataURL(blob))\n                        .then(function (dataURL) {\n                        // dataURL is always encoded base64\n                        var base64 = dataURL.split(\",\")[1];\n                        resolve(base64);\n                    })\n                        .catch(function (error) {\n                        reject(error);\n                    });\n                });\n            };\n            /**\n             * read Blob as text string\n             *\n             * @param  {Blob} blob [in] blob data\n             * @return {CDP.IPromise<Uint8Array>} promise object\n             */\n            Binary.readBlobAsText = function (blob, encoding) {\n                if (encoding === void 0) { encoding = \"utf-8\"; }\n                var reader = new FileReader();\n                var cancel = function () { return reader.abort(); };\n                return new Promise(function (resolve, reject) {\n                    reader.onload = function () {\n                        resolve(decodeURIComponent(reader.result));\n                    };\n                    reader.onerror = function () {\n                        reject(Binary.makeErrorInfoFromDOMError(CDP.RESULT_CODE.ERROR_CDP_TOOLS_FILE_READER_ERROR, reader.error, TAG, \"FileReader.readAsText() failed.\"));\n                    };\n                    reader.readAsText(blob, encoding);\n                }, cancel);\n            };\n            /**\n             * data URL string to ArrayBuffer\n             */\n            Binary.dataURLToArrayBuffer = function (dataURL) {\n                var array = Binary.dataURLToUint8Array(dataURL);\n                return array.buffer;\n            };\n            /**\n             * data URL string to Uint8Array\n             */\n            Binary.dataURLToUint8Array = function (dataURL) {\n                var result = Binary.execDataURLRegExp(dataURL);\n                if (result.base64) {\n                    return Binary.base64ToUint8Array(result.data);\n                }\n                else {\n                    return Binary.textToUint8Array(result.data);\n                }\n            };\n            /**\n             * Base64 string to ArrayBuffer\n             */\n            Binary.base64ToArrayBuffer = function (base64) {\n                var array = Binary.base64ToUint8Array(base64);\n                return array.buffer;\n            };\n            /**\n             * Base64 string to Uint8Array\n             */\n            Binary.base64ToUint8Array = function (base64) {\n                var bytes = Binary.base64ToByteString(base64);\n                return Binary.byteStringToUint8Array(bytes);\n            };\n            /**\n             * text string to ArrayBuffer\n             */\n            Binary.textToArrayBuffer = function (text) {\n                var array = Binary.textToUint8Array(text);\n                return array.buffer;\n            };\n            /**\n             * text string to Uint8Array\n             */\n            Binary.textToUint8Array = function (text) {\n                var bytes = Binary.textToByteString(text);\n                return Binary.byteStringToUint8Array(bytes);\n            };\n            /**\n             * ArrayBuffer to data URL string\n             */\n            Binary.arrayBufferToDataURL = function (buffer, mimeType) {\n                if (mimeType === void 0) { mimeType = \"text/plain\"; }\n                return Binary.uint8ArrayToDataURL(new Uint8Array(buffer), mimeType);\n            };\n            /**\n             * ArrayBuffer to Base64 string\n             */\n            Binary.arrayBufferToBase64 = function (buffer) {\n                return Binary.uint8ArrayToBase64(new Uint8Array(buffer));\n            };\n            /**\n             * ArrayBuffer to text string\n             */\n            Binary.arrayBufferToText = function (buffer) {\n                return Binary.uint8ArrayToText(new Uint8Array(buffer));\n            };\n            /**\n             * Uint8Array to data URL string\n             */\n            Binary.uint8ArrayToDataURL = function (array, mimeType) {\n                if (mimeType === void 0) { mimeType = \"text/plain\"; }\n                var base64 = Binary.uint8ArrayToBase64(array);\n                return \"data:\" + mimeType + \";base64,\" + base64;\n            };\n            /**\n             * Uint8Array to Base64 string\n             */\n            Binary.uint8ArrayToBase64 = function (array) {\n                var bytes = Binary.uint8ArrayToByteString(array);\n                return Binary.byteStringToBase64(bytes);\n            };\n            /**\n             * Uint8Array to text string\n             */\n            Binary.uint8ArrayToText = function (array) {\n                var bytes = Binary.uint8ArrayToByteString(array);\n                return Binary.byteStringToText(bytes);\n            };\n            /**\n             * data URL string to text string\n             */\n            Binary.dataURLToText = function (dataURL) {\n                var result = Binary.execDataURLRegExp(dataURL);\n                if (result.base64) {\n                    return Binary.base64ToText(result.data);\n                }\n                else {\n                    return decodeURIComponent(result.data);\n                }\n            };\n            /**\n             * Base64 string to text string\n             */\n            Binary.base64ToText = function (base64) {\n                var bytes = Binary.base64ToByteString(base64);\n                return Binary.byteStringToText(bytes);\n            };\n            /**\n             * text string to data URL string\n             */\n            Binary.textToDataURL = function (text, mimeType) {\n                if (mimeType === void 0) { mimeType = \"text/plain\"; }\n                var base64 = Binary.textToBase64(text);\n                return \"data:\" + mimeType + \";base64,\" + base64;\n            };\n            /**\n             * text string to Base64 string\n             */\n            Binary.textToBase64 = function (text) {\n                var bytes = Binary.textToByteString(text);\n                return Binary.byteStringToBase64(bytes);\n            };\n            /**\n             * data URI 形式の正規表現\n             * 参考: https://developer.mozilla.org/ja/docs/data_URIs\n             */\n            Binary.execDataURLRegExp = function (dataURL) {\n                /**\n                 * [match] 1: MimeType\n                 *         2: \";base64\" を含むオプション\n                 *         3: data 本体\n                 */\n                var reDataURL = /^data:(.+?\\/.+?)?(;.+?)?,(.*)$/;\n                var result = reDataURL.exec(dataURL);\n                var component = {\n                    mimeType: \"\",\n                    base64: true,\n                    data: \"\",\n                };\n                if (null != result) {\n                    component.mimeType = result[1];\n                    component.base64 = /;base64/.test(result[2]);\n                    component.data = result[3];\n                }\n                return component;\n            };\n            Binary.uint8ArrayToByteString = function (array) {\n                return Array.prototype.map.call(array, function (i) { return String.fromCharCode(i); }).join(\"\");\n            };\n            Binary.base64ToByteString = function (base64) {\n                return window.atob(base64);\n            };\n            Binary.textToByteString = function (text) {\n                // first we use encodeURIComponent to get percent-encoded UTF-8,\n                // then we convert the percent encodings into raw bytes which\n                // can be fed into btoa.\n                return encodeURIComponent(text).replace(/%([0-9A-F]{2})/g, function (match, p1) { return String.fromCharCode(parseInt(p1, 16)); });\n            };\n            Binary.byteStringToUint8Array = function (bytes) {\n                var array = bytes.split(\"\").map(function (c) { return c.charCodeAt(0); });\n                return new Uint8Array(array);\n            };\n            Binary.byteStringToBase64 = function (bytes) {\n                return window.btoa(bytes);\n            };\n            Binary.byteStringToText = function (bytes) {\n                // going backwards: from bytestream, to percent-encoding, to original string.\n                return decodeURIComponent(bytes.split(\"\").map(function (c) { return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2); }).join(\"\"));\n            };\n            /**\n             * URL Object\n             *\n             * @obsolete\n             * @return {any} URL Object\n             */\n            Binary.blobURL = (function () {\n                return CDP.global.URL || CDP.global.webkitURL;\n            })();\n            return Binary;\n        }());\n        Tools.Binary = Binary;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/**\n * @file  BinaryTransport.ts\n * @brief jQuery ajax transport for making binary data type requests.\n *\n *        original: https://github.com/henrya/js-jquery/blob/master/BinaryTransport/jquery.binarytransport.js\n *        author:   Henry Algus <henryalgus@gmail.com>\n */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        // Support file protocol. (as same as official way)\n        var xhrSuccessStatus = {\n            0: 200,\n            1223: 204\n        };\n        $.ajaxTransport(\"+binary\", function (options, originalOptions, jqXHR) {\n            if (CDP.global.FormData &&\n                ((options.dataType && (options.dataType === \"binary\")) ||\n                    (options.data && ((CDP.global.ArrayBuffer && options.data instanceof ArrayBuffer) ||\n                        (CDP.global.Blob && options.data instanceof CDP.global.Blob))))) {\n                var abortCallback_1;\n                return {\n                    send: function (headers, callback) {\n                        // setup all variables\n                        var xhr = new XMLHttpRequest();\n                        var url = options.url;\n                        var type = options.type;\n                        var async = options.async || true;\n                        // blob or arraybuffer. Default is blob\n                        var dataType = options.responseType || \"blob\";\n                        var data = options.data || null;\n                        var username = options.username || null;\n                        var password = options.password || null;\n                        var _callback = callback || (function () { });\n                        // succeeded handler\n                        xhr.addEventListener(\"load\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            _callback(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // error handler\n                        xhr.addEventListener(\"error\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort handler\n                        xhr.addEventListener(\"abort\", function () {\n                            var _data = {};\n                            _data[options.dataType] = xhr.response;\n                            // make callback and send data\n                            _callback(xhr.status, xhr.statusText, _data, xhr.getAllResponseHeaders());\n                        });\n                        // abort callback\n                        abortCallback_1 = function () {\n                            xhr.abort();\n                        };\n                        xhr.open(type, url, async, username, password);\n                        // setup custom headers\n                        for (var i in headers) {\n                            if (headers.hasOwnProperty(i)) {\n                                xhr.setRequestHeader(i, headers[i]);\n                            }\n                        }\n                        xhr.responseType = dataType;\n                        xhr.send(data);\n                    },\n                    abort: function () {\n                        if (abortCallback_1) {\n                            abortCallback_1();\n                        }\n                    }\n                };\n            }\n        });\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var Promise = CDP.Promise;\n        var TAG = \"[CDP.Tools.Functions] \";\n        /**\n         * Math.abs よりも高速な abs\n         */\n        function abs(x) {\n            return x >= 0 ? x : -x;\n        }\n        Tools.abs = abs;\n        /**\n         * Math.max よりも高速な max\n         */\n        function max(lhs, rhs) {\n            return lhs >= rhs ? lhs : rhs;\n        }\n        Tools.max = max;\n        /**\n         * Math.min よりも高速な min\n         */\n        function min(lhs, rhs) {\n            return lhs <= rhs ? lhs : rhs;\n        }\n        Tools.min = min;\n        /**\n         * 数値を 0 詰めして文字列を生成\n         */\n        function toZeroPadding(no, limit) {\n            var signed = \"\";\n            no = Number(no);\n            if (isNaN(no) || isNaN(limit) || limit <= 0) {\n                return null;\n            }\n            if (no < 0) {\n                no = Tools.abs(no);\n                signed = \"-\";\n            }\n            return signed + (Array(limit).join(\"0\") + no).slice(-limit);\n        }\n        Tools.toZeroPadding = toZeroPadding;\n        /**\n         * 文字列のバイト数をカウント\n         */\n        function getStringSize(src) {\n            return (Tools.Binary.newBlob([src], { type: \"text/plain\" })).size;\n        }\n        Tools.getStringSize = getStringSize;\n        /**\n         * 文字列をバイト制限して分割\n         */\n        function toStringChunks(src, limit) {\n            var chunks = [];\n            var setChunk = function (input) {\n                if (limit < getStringSize(input)) {\n                    var half = Math.floor(input.length / 2);\n                    var lhs = input.slice(0, half);\n                    var rhs = input.slice(half);\n                    return [lhs, rhs];\n                }\n                else {\n                    chunks.push(input);\n                    return [];\n                }\n            };\n            var makeChunk = function (work) {\n                var failures = setChunk(work);\n                while (0 < failures.length) {\n                    makeChunk(failures.shift());\n                }\n            };\n            makeChunk(src);\n            return chunks;\n        }\n        Tools.toStringChunks = toStringChunks;\n        /**\n         * 多重継承のための実行時継承関数\n         *\n         * Sub Class 候補オブジェクトに対して Super Class 候補オブジェクトを直前の Super Class として挿入する。\n         * prototype のみコピーする。\n         * インスタンスメンバをコピーしたい場合、Super Class が疑似コンストラクタを提供する必要がある。\n         * 詳細は cdp.tools.Functions.spec.ts を参照。\n         *\n         * @param subClass   {constructor} [in] オブジェクトの constructor を指定\n         * @param superClass {constructor} [in] オブジェクトの constructor を指定\n         */\n        function inherit(subClass, superClass) {\n            var _prototype = subClass.prototype;\n            function _inherit() {\n                this.constructor = subClass;\n            }\n            _inherit.prototype = superClass.prototype;\n            subClass.prototype = new _inherit();\n            $.extend(subClass.prototype, _prototype);\n        }\n        Tools.inherit = inherit;\n        /**\n         * mixin 関数\n         *\n         * TypeScript Official Site に載っている mixin 関数\n         * http://www.typescriptlang.org/Handbook#mixins\n         * 既に定義されているオブジェクトから、新規にオブジェクトを合成する。\n         *\n         * @param derived {constructor}    [in] 合成されるオブジェクトの constructor を指定\n         * @param bases   {constructor...} [in] 合成元オブジェクトの constructor を指定 (可変引数)\n         */\n        function mixin(derived) {\n            var bases = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                bases[_i - 1] = arguments[_i];\n            }\n            bases.forEach(function (base) {\n                Object.getOwnPropertyNames(base.prototype).forEach(function (name) {\n                    derived.prototype[name] = base.prototype[name];\n                });\n            });\n        }\n        Tools.mixin = mixin;\n        /**\n         * \\~english\n         * Helper function to correctly set up the prototype chain, for subclasses.\n         * The function behavior is same as extend() function of Backbone.js.\n         *\n         * @param protoProps  {Object} [in] set prototype properties as object.\n         * @param staticProps {Object} [in] set static properties as object.\n         * @return {Object} subclass constructor.\n         *\n         * \\~japanese\n         * クラス継承のためのヘルパー関数\n         * Backbone.js extend() 関数と同等\n         *\n         * @param protoProps  {Object} [in] prototype properties をオブジェクトで指定\n         * @param staticProps {Object} [in] static properties をオブジェクトで指定\n         * @return {Object} サブクラスのコンストラクタ\n         */\n        function extend(protoProps, staticProps) {\n            var parent = this;\n            var child;\n            if (protoProps && protoProps.hasOwnProperty(\"constructor\")) {\n                child = protoProps.constructor;\n            }\n            else {\n                child = function () {\n                    return parent.apply(this, arguments);\n                };\n            }\n            $.extend(child, parent, staticProps);\n            var Surrogate = function () {\n                this.constructor = child;\n            };\n            Surrogate.prototype = parent.prototype;\n            child.prototype = new Surrogate;\n            if (protoProps) {\n                $.extend(child.prototype, protoProps);\n            }\n            child.__super__ = parent.prototype;\n            return child;\n        }\n        Tools.extend = extend;\n        /**\n         * DPI 取得\n         */\n        function getDevicePixcelRatio() {\n            var mediaQuery;\n            var is_firefox = navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            if (null != window.devicePixelRatio && !is_firefox) {\n                return window.devicePixelRatio;\n            }\n            else if (window.matchMedia) {\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 1.5),\\\n                    (min--moz-device-pixel-ratio: 1.5),\\\n                    (-o-min-device-pixel-ratio: 3/2),\\\n                    (min-resolution: 1.5dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 1.5;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 2),\\\n                    (min--moz-device-pixel-ratio: 2),\\\n                    (-o-min-device-pixel-ratio: 2/1),\\\n                    (min-resolution: 2dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 2;\n                }\n                mediaQuery =\n                    \"(-webkit-min-device-pixel-ratio: 0.75),\\\n                    (min--moz-device-pixel-ratio: 0.75),\\\n                    (-o-min-device-pixel-ratio: 3/4),\\\n                    (min-resolution: 0.75dppx)\";\n                if (window.matchMedia(mediaQuery).matches) {\n                    return 0.7;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        Tools.getDevicePixcelRatio = getDevicePixcelRatio;\n        // Canvas element のキャッシュ\n        var s_canvasFactory;\n        // キャッシュ済みの Canvas を取得する\n        function getCanvas() {\n            s_canvasFactory = s_canvasFactory || document.createElement(\"canvas\");\n            return s_canvasFactory.cloneNode(false);\n        }\n        Tools.getCanvas = getCanvas;\n        /**\n         * 画像リソースのロード完了を保証\n         * ブラウザ既定のプログレッシブロードを走らせないため.\n         *\n         * @param  {String} url [in] url (data-url)\n         * @return {IPromise<string>} 表示可能な url\n         */\n        function ensureImageLoaded(url) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    destroy();\n                    resolve(url);\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [url: \" + url + \"]\"));\n                };\n                img.src = url;\n            }, destroy);\n        }\n        Tools.ensureImageLoaded = ensureImageLoaded;\n        /**\n         * 画像のリサイズ\n         * 指定した長辺の長さにアスペクト比を維持してリサイズを行う\n         * longSideLength より小さな場合はオリジナルサイズで data-url を返却する\n         *\n         * @param  {String} src            [in] image に指定するソース\n         * @param  {Number} longSideLength [in] リサイズに使用する長辺の最大値を指定\n         * @return {IPromise<string>} base64 data url を返却\n         */\n        function resizeImage(src, longSideLength) {\n            var img = new Image();\n            var destroy = function () {\n                if (img) {\n                    img.src = \"\"; // 読み込み停止\n                    img = null;\n                }\n            };\n            return new Promise(function (resolve, reject) {\n                img.onload = function (event) {\n                    var canvas = getCanvas();\n                    var ih = img.height, iw = img.width, ia = ih / iw;\n                    var cw, ch;\n                    if (iw === 0 || 0 === ia) {\n                        reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_INVALID_IMAGE, TAG, \"invalid image. [src: \" + src + \"]\"));\n                    }\n                    else {\n                        if (longSideLength <= 0) {\n                            longSideLength = (ia < 1) ? iw : ih;\n                        }\n                        if (ia < 1) {\n                            cw = (longSideLength < iw) ? longSideLength : iw;\n                            ch = Math.round(cw * ia);\n                        }\n                        else {\n                            ch = (longSideLength < ih) ? longSideLength : ih;\n                            cw = Math.round(ch / ia);\n                        }\n                        canvas.width = cw;\n                        canvas.height = ch;\n                        canvas.getContext(\"2d\").drawImage(img, 0, 0, cw, ch);\n                        resolve(canvas.toDataURL());\n                    }\n                    destroy();\n                };\n                img.onerror = function (event) {\n                    destroy();\n                    reject(CDP.makeErrorInfo(CDP.RESULT_CODE.ERROR_CDP_TOOLS_IMAGE_LOAD_FAILED, TAG, \"image load failed. [src: \" + src + \"]\"));\n                };\n                img.src = src;\n            });\n        }\n        Tools.resizeImage = resizeImage;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/* tslint:disable:max-line-length */\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.DateTime] \";\n        /**\n         * @class DateTime\n         * @brief 時刻操作のユーティリティクラス\n         */\n        var DateTime = /** @class */ (function () {\n            function DateTime() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // public static method\n            /**\n             * 基点となる日付から、n日後、n日前を算出\n             *\n             * @param base   {Date}   [in] 基準日\n             * @param add    {Number} [in] 加算日. マイナス指定でn日前も設定可能\n             * @param target {String} [in] { year | month | date | hour | min | sec | msec }\n             * @return {Date} 日付オブジェクト\n             */\n            DateTime.computeDate = function (base, add, target) {\n                if (target === void 0) { target = \"date\"; }\n                var date = new Date(base.getTime());\n                switch (target) {\n                    case \"year\":\n                        date.setUTCFullYear(base.getUTCFullYear() + add);\n                        break;\n                    case \"month\":\n                        date.setUTCMonth(base.getUTCMonth() + add);\n                        break;\n                    case \"date\":\n                        date.setUTCDate(base.getUTCDate() + add);\n                        break;\n                    case \"hour\":\n                        date.setUTCHours(base.getUTCHours() + add);\n                        break;\n                    case \"min\":\n                        date.setUTCMinutes(base.getUTCMinutes() + add);\n                        break;\n                    case \"sec\":\n                        date.setUTCSeconds(base.getUTCSeconds() + add);\n                        break;\n                    case \"msec\":\n                        date.setUTCMilliseconds(base.getUTCMilliseconds() + add);\n                        break;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        date.setUTCDate(base.getUTCDate() + add);\n                }\n                return date;\n            };\n            /**\n             * Convert string to date object\n             *\n             * @param {String} date string ex) YYYY-MM-DDTHH:mm:ss.sssZ\n             * @return {Object} date object\n             */\n            DateTime.convertISOStringToDate = function (dateString) {\n                var dateValue = this.convertISOStringToDateValue(dateString);\n                return new Date(dateValue);\n            };\n            /**\n             * Convert date object into string (the ISO 8601 Extended Format)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] { year | month | date | min | sec | msec | tz }\n             * @return {String} date string\n             */\n            DateTime.convertDateToISOString = function (date, target) {\n                if (target === void 0) { target = \"tz\"; }\n                var isoDateString = date.toISOString();\n                // need offset if extended format (±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n                var offset = 27 === isoDateString.length ? 3 : 0;\n                switch (target) {\n                    case \"year\":\n                        return isoDateString.substr(0, offset + 4);\n                    case \"month\":\n                        return isoDateString.substr(0, offset + 7);\n                    case \"date\":\n                        return isoDateString.substr(0, offset + 10);\n                    case \"min\":\n                        return isoDateString.substr(0, offset + 16);\n                    case \"sec\":\n                        return isoDateString.substr(0, offset + 19);\n                    case \"msec\":\n                        return isoDateString.substr(0, offset + 23);\n                    case \"tz\":\n                        return isoDateString;\n                    default:\n                        console.warn(TAG + \"unknown target: \" + target);\n                        return isoDateString;\n                }\n            };\n            /**\n             * Convert file system compatible string to date object\n             *\n             * @param {String} date string ex) YYYY_MM_DDTHH_mm_ss_sss\n             * @return {Object} date object\n             */\n            DateTime.convertFileSystemStringToDate = function (dateString) {\n                var dateValue = this.convertFileSystemStringToDateValue(dateString);\n                return new Date(dateValue);\n            };\n            /**\n             * Convert date object into string in file system compatible format (YYYY_MM_DDTHH_mm_ss_sss)\n             *\n             * @param date   {Date}   [in] date object\n             * @param target {String} [in] { year | month | date | min | sec | msec }\n             * @return {String} file system compatible string\n             */\n            DateTime.convertDateToFileSystemString = function (date, target) {\n                if (target === void 0) { target = \"msec\"; }\n                var isoDateString = DateTime.convertDateToISOString(date, target);\n                var fileSystemString = isoDateString.replace(/[-:.]/g, \"_\");\n                return fileSystemString;\n            };\n            /**\n             * Convert ISO string to value of date (milliseconds)\n             *\n             * @param isoString {String} [in] date string\n             * @return {Number} value of date (ms)\n             */\n            DateTime.convertISOStringToDateValue = function (isoString) {\n                var reYear = /(\\d{4}|[-+]\\d{6})/;\n                var reMonth = /(\\d{2})/;\n                var reDay = /(\\d{2})/;\n                var reDate = new RegExp(reYear.source + \"(?:-\" + reMonth.source + \"(?:-\" + reDay.source + \")*)*\");\n                var reHours = /(\\d{2})/;\n                var reMinutes = /(\\d{2})/;\n                var reSeconds = /(\\d{2})/;\n                var reMs = /(\\d{3})/;\n                var reTime = new RegExp(\"T\" + reHours.source + \":\" + reMinutes.source + \"(?::\" + reSeconds.source + \"(?:.\" + reMs.source + \")*)*\");\n                var reTz = /(Z|[-+]\\d{2}:\\d{2})/;\n                var reISOString = new RegExp(\"^\" + reDate.source + \"(?:\" + reTime.source + \"(?:\" + reTz.source + \")*)*$\");\n                var result = reISOString.exec(isoString);\n                if (null == result) {\n                    // invalid ISO string\n                    return NaN;\n                }\n                var year = parseInt(result[1], 10);\n                var month = parseInt(result[2], 10) - 1 || 0;\n                var date = parseInt(result[3], 10) || 1;\n                var hours = parseInt(result[4], 10) || 0;\n                var minutes = parseInt(result[5], 10) || 0;\n                var seconds = parseInt(result[6], 10) || 0;\n                var ms = parseInt(result[7], 10) || 0;\n                if (result[8]) {\n                    // timezone offset\n                    switch (result[8][0]) {\n                        case \"Z\":\n                            break;\n                        case \"-\":\n                            // -HH:mm\n                            hours += parseInt(result[8].substr(1, 2), 10) || 0;\n                            minutes += parseInt(result[8].substr(4, 2), 10) || 0;\n                            break;\n                        case \"+\":\n                            // +HH:mm\n                            hours -= parseInt(result[8].substr(1, 2), 10) || 0;\n                            minutes -= parseInt(result[8].substr(4, 2), 10) || 0;\n                            break;\n                        default:\n                            console.warn(\"invalid timezone in ISO string\");\n                    }\n                }\n                return Date.UTC(year, month, date, hours, minutes, seconds, ms);\n            };\n            /**\n             * Convert file system compatible string to to value of date (milliseconds)\n             *\n             * @param dateString {String} [in] date string (YYYY_MM_DDTHH_mm_ss_sss)\n             * @return {String} converted string\n             */\n            DateTime.convertFileSystemStringToDateValue = function (dateString) {\n                var reYear = /(\\d{4}|[-+]\\d{6})/;\n                var reMonth = /(\\d{2})/;\n                var reDay = /(\\d{2})/;\n                var reDate = new RegExp(reYear.source + \"(?:_\" + reMonth.source + \"(?:_\" + reDay.source + \")?)?\");\n                var reHours = /(\\d{2})/;\n                var reMinutes = /(\\d{2})/;\n                var reSeconds = /(\\d{2})/;\n                var reMs = /(\\d{3})/;\n                var reTime = new RegExp(\"T\" + reHours.source + \"_\" + reMinutes.source + \"(?:_\" + reSeconds.source + \"(?:_\" + reMs.source + \")?)?\");\n                var reFileSystemString = new RegExp(\"^\" + reDate.source + \"(?:\" + reTime.source + \")*$\");\n                var result = reFileSystemString.exec(dateString);\n                if (null == result) {\n                    // invalid file system string\n                    return NaN;\n                }\n                var year = parseInt(result[1], 10);\n                var month = parseInt(result[2], 10) - 1 || 0;\n                var date = parseInt(result[3], 10) || 1;\n                var hours = parseInt(result[4], 10) || 0;\n                var minutes = parseInt(result[5], 10) || 0;\n                var seconds = parseInt(result[6], 10) || 0;\n                var ms = parseInt(result[7], 10) || 0;\n                return Date.UTC(year, month, date, hours, minutes, seconds, ms);\n            };\n            return DateTime;\n        }());\n        Tools.DateTime = DateTime;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n/// <reference types=\"jquery\" />\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.Template] \";\n        //___________________________________________________________________________________________________________________//\n        /**\n         * @class Template\n         * @brief template script を管理するユーティリティクラス\n         */\n        var Template = /** @class */ (function () {\n            function Template() {\n            }\n            ///////////////////////////////////////////////////////////////////////\n            // 公開メソッド\n            /**\n             * 指定した id, class 名, Tag 名をキーにテンプレートの JQuery Element を取得する。\n             *\n             * @param {String}  key     [in] id, class, tag を表す文字列\n             * @param {String}  [src]   [in] 外部 html を指定する場合は url を設定\n             * @param {Boolean} [cache] [in] src html をキャッシュする場合は true. src が指定されているときのみ有効\n             * @return template が格納されている JQuery Element\n             */\n            Template.getTemplateElement = function (key, src, cache) {\n                if (src === void 0) { src = null; }\n                if (cache === void 0) { cache = true; }\n                var mapElement = Template.getElementMap();\n                var $element = mapElement[key];\n                if (!$element || !$element[0]) {\n                    // 要素の取得\n                    if (src) {\n                        var html = Template.findHtmlFromSource(src);\n                        $element = $(html).find(key);\n                    }\n                    else {\n                        $element = $(key);\n                    }\n                    // 要素の検証\n                    if (!$element || !$element[0]) {\n                        console.warn(TAG, \"invalid [key, src] = [\" + key + \", \" + src + \"]\");\n                    }\n                    else if (src && cache) {\n                        mapElement[key] = $element;\n                    }\n                }\n                return $element;\n            };\n            /**\n             * Map オブジェクトの削除\n             * 明示的にキャッシュを開放する場合は本メソッドをコールする\n             */\n            Template.empty = function () {\n                Template._mapElement = null;\n                Template._mapSource = null;\n            };\n            Template.getJST = function (key, src, cache) {\n                var jst = function () { return \"\"; };\n                var $element;\n                if (key instanceof jQuery) {\n                    $element = key;\n                }\n                else {\n                    $element = Template.getTemplateElement(key, src, cache);\n                }\n                if (!$element || !$element[0]) {\n                    console.warn(TAG + \"cannot generate template\");\n                }\n                else if (null != CDP.global.Hogan) {\n                    var template_1 = Hogan.compile($element.text());\n                    jst = function (data) {\n                        return template_1.render(data);\n                    };\n                }\n                else if (null != CDP.global._) {\n                    var template_2 = _.template($element.html());\n                    jst = function (data) {\n                        // 改行とタブは削除する\n                        return template_2(data).replace(/\\n|\\t/g, \"\");\n                    };\n                }\n                else {\n                    console.warn(TAG + \"cannot find template engine module.\");\n                    console.warn(\"    'hogan' or 'underscore' is required.\");\n                }\n                return jst;\n            };\n            ///////////////////////////////////////////////////////////////////////\n            // 内部メソッド\n            //! Element Map オブジェクトの取得\n            Template.getElementMap = function () {\n                Template._mapElement = Template._mapElement || {};\n                return Template._mapElement;\n            };\n            //! URL Map オブジェクトの取得\n            Template.getSourceMap = function () {\n                Template._mapSource = Template._mapSource || {};\n                return Template._mapSource;\n            };\n            //! URL Map から HTML を検索. 失敗した場合は空文字が返る\n            Template.findHtmlFromSource = function (src) {\n                var mapSource = Template.getSourceMap();\n                var html = mapSource[src] || \"\";\n                if (!html) {\n                    $.ajax({\n                        url: src,\n                        method: \"GET\",\n                        async: false,\n                        dataType: \"html\",\n                        success: function (data) {\n                            html = data;\n                        },\n                        error: function (data, status) {\n                            console.error(TAG, \"ajax request failed. status: \" + status);\n                        }\n                    });\n                    // キャッシュに格納\n                    mapSource[src] = html;\n                }\n                return html;\n            };\n            return Template;\n        }());\n        Tools.Template = Template;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar CDP;\n(function (CDP) {\n    var Tools;\n    (function (Tools) {\n        var TAG = \"[CDP.Tools.ProgressCounter] \";\n        /**\n         * @class ProgressCounter\n         * @brief 進捗の時間を扱うユーティリティクラス\n         */\n        var ProgressCounter = /** @class */ (function () {\n            /**\n             * constructor\n             *\n             * @param [options] オプション\n             */\n            function ProgressCounter(options) {\n                this.reset(options);\n            }\n            /**\n             * 開始時間を初期化\n             */\n            ProgressCounter.prototype.reset = function (options) {\n                this._settings = __assign({\n                    max: 100,\n                    beginTime: Date.now(),\n                    allowIncrementRemain: false,\n                    lastRemainTime: Infinity,\n                }, options);\n            };\n            /**\n             * 経過時間と推定残り時間を取得する\n             * 進捗値が 0 の場合は、推定残り時間に Infinity を返す\n             *\n             * @param   progress [in] 進捗値\n             * @returns 経過時間と推定残り時間 [msec]\n             */\n            ProgressCounter.prototype.compute = function (progress) {\n                var passTime = Date.now() - this._settings.beginTime;\n                var remainTime = Infinity;\n                if (null != progress && 0 !== progress) {\n                    remainTime = passTime * this._settings.max / progress - passTime;\n                }\n                if (this._settings.allowIncrementRemain || (remainTime < this._settings.lastRemainTime)) {\n                    this._settings.lastRemainTime = remainTime;\n                }\n                else {\n                    remainTime = this._settings.lastRemainTime;\n                }\n                return { passTime: passTime, remainTime: remainTime };\n            };\n            return ProgressCounter;\n        }());\n        Tools.ProgressCounter = ProgressCounter;\n    })(Tools = CDP.Tools || (CDP.Tools = {}));\n})(CDP || (CDP = {}));\n\nreturn CDP.Tools; }));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}