/*!
 * @cdp/core-utils 0.9.0
 *   core framework utilities
 */

/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any */
function is(x) {
    return x != null;
}
function isNil(x) {
    return x == null;
}
function isString(x) {
    return typeof x === 'string';
}
function isNumber(x) {
    return typeof x === 'number';
}
function isBoolean(x) {
    return typeof x === 'boolean';
}
function isSymbol(x) {
    return typeof x === 'symbol';
}
function isPrimitive(x) {
    return !x || typeof x !== 'function' && typeof x !== 'object';
}
function isObject(x) {
    return Boolean(x) && typeof x === 'object';
}
function isFunction(x) {
    return typeof x === 'function';
}
function typeOf(type, x) {
    return typeof x === type;
}
function isIterable(x) {
    return Symbol.iterator in Object(x);
}
function instanceOf(C, x) {
    return typeof C === 'function' && x instanceof C;
}
function ownInstanceOf(C, x) {
    return typeof C === 'function' && Object.getPrototypeOf(x) === Object(C.prototype);
}
function className(x) {
    if (x != null) {
        const toStringTagName = x[Symbol.toStringTag];
        if (isString(toStringTagName)) {
            return toStringTagName;
        }
        const C = x.constructor;
        if (isFunction(C) && C === Object(C.prototype).constructor) {
            return C.name;
        }
    }
    return Object.prototype.toString.call(x).slice(8, -1);
}
function sameType(a, b) {
    return typeof a === typeof b;
}
function sameClass(a, b) {
    return a != null && b != null && Object.getPrototypeOf(a) === Object.getPrototypeOf(b);
}
/** `pickupKeys` で指定されたプロパティのみを持つ `target` の Shallow Copy を返す */
function partialize(target, ...pickupKeys) {
    if (!target || !isObject(target)) {
        throw new TypeError(`${className(target)} is not an object.`);
    }
    return pickupKeys.reduce((obj, key) => {
        key in target && (obj[key] = target[key]);
        return obj;
    }, {}); // eslint-disable-line @typescript-eslint/no-object-literal-type-assertion
}

/* eslint-disable @typescript-eslint/no-explicit-any */
function throwIfNil(x, message) {
    if (x == null) {
        is(message) || (message = `${className(x)} is not a valid value.`);
        throw new TypeError(message);
    }
}
function throwIfNotTypeOf(type, x, message) {
    if (typeof x !== type) {
        is(message) || (message = `Type of ${className(x)} is not ${type}.`);
        throw new TypeError(message);
    }
}
function throwIfNotArray(x, message) {
    if (!Array.isArray(x)) {
        is(message) || (message = `${className(x)} is not an Array.`);
        throw new TypeError(message);
    }
}
function throwIfNotIterable(x, message) {
    if (!(Symbol.iterator in Object(x))) {
        is(message) || (message = `${className(x)} is not an iterable object.`);
        throw new TypeError(message);
    }
}
function throwIfNotInstanceOf(C, x, message) {
    if (!(x instanceof C)) {
        is(message) || (message = `${className(x)} is not an instance of ${C.name}.`);
        throw new TypeError(message);
    }
}
function throwIfOwnInstanceOf(C, x, message) {
    if (Object.getPrototypeOf(x) === Object(C.prototype)) {
        is(message) || (message = `The object passed is own instance of ${C.name}.`);
        throw new TypeError(message);
    }
}
function throwIfNotOwnInstanceOf(C, x, message) {
    if (Object.getPrototypeOf(x) !== Object(C.prototype)) {
        is(message) || (message = `The object passed is not own instance of ${C.name}.`);
        throw new TypeError(message);
    }
}
function throwIfNotHasProperty(x, p, message) {
    if (!(p in x)) {
        is(message) || (message = `The object passed does not have property ${String(p)}.`);
        throw new TypeError(message);
    }
}
function throwIfNotHasOwnProperty(x, p, message) {
    if (!Object.prototype.hasOwnProperty.call(x, p)) {
        is(message) || (message = `The object passed does not have own property ${String(p)}.`);
        throw new TypeError(message);
    }
}

// for test TODO: remove
const hoge = 'hoge';

export { className, hoge, instanceOf, is, isBoolean, isFunction, isIterable, isNil, isNumber, isObject, isPrimitive, isString, isSymbol, ownInstanceOf, partialize, sameClass, sameType, throwIfNil, throwIfNotArray, throwIfNotHasOwnProperty, throwIfNotHasProperty, throwIfNotInstanceOf, throwIfNotIterable, throwIfNotOwnInstanceOf, throwIfNotTypeOf, throwIfOwnInstanceOf, typeOf };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
