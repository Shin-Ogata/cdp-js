/*!
 * cdp.i18n.d.ts
 * This file is generated by the CDP package build process.
 *
 * Date: 2018-01-24T03:44:31.232Z
 */
/// <reference path="i18next.d.ts" />
/// <reference types="i18next" />
declare namespace CDP {
    enum RESULT_CODE_BASE {
        CDP_I18N_DECLARERATION = 0,
        CDP_I18N,
    }
    enum RESULT_CODE {
        ERROR_CDP_I18N_DECLARATION = 0,
        /** `en` [[CDP.initializeI18N]]() failer code. <br> `ja` [[CDP.initializeI18N]]() のエラーコード */
        ERROR_CDP_I18N_INITIALIZE_FAILED,
    }
}
declare namespace CDP {
    import I18next = i18next.i18n;
    namespace I18N {
        type I18n = I18next.i18n;
        type Options = I18next.InitOptions & {
            [keys: string]: any;
        };
        type TranslationOptions = I18next.TranslationOptions;
        type TranslationFunction = I18next.TranslationFunction;
        type InterpolationOptions = I18next.InterpolationOptions;
    }
    /**
     * @en Direct accessor for i18next object.
     * @ja i18next へのダイレクトアクセス
     */
    let i18n: I18N.I18n;
    /**
     * @en Options interface for localize settings
     * @ja ローカライズ設定用オプション
     */
    interface I18NSettings {
        /**
         * @es fallback string resource setting when automatic resolution failed.
         * @ja 自動解決できなかったときに使用するリソース
         *
         * @example <br>
         *
         * ```ts
         *  en: {
         *      messages: "/res/locales/messages.en-US.json",
         *  },
         *  ja: {
         *      messages: "/res/locales/messages.ja-JP.json",
         *  },
         * ```
         */
        fallbackResources?: {
            [lng: string]: {
                [ns: string]: string;
            };
        };
        /**
         * @es set preload resource name
         * @ja preload するリソース指定
         *
         * @example <br>
         *
         * ```ts
         *  preload: [
         *      "en-US",
         *      "ja-JP",
         *  ],
         * ```
         */
        preload?: string[];
        /**
         * @es i18next raw options
         * @ja i18next が提供するオプション
         */
        options?: I18N.Options;
    }
    /**
     * @en initialize i18next. <br>
     *     It'll be usually called from framework.
     * @ja i18next の初期化 <br>
     *     通常は Framework が呼び出す。
     */
    function initializeI18N(settings?: I18NSettings): IPromiseBase<any>;
}
interface JQueryStatic {
    i18n: CDP.I18N.I18n;
    t: (key: string, options?: CDP.I18N.Options) => string;
}
interface JQuery {
    localize: (options?: CDP.I18N.TranslationOptions) => JQuery;
}
declare module "cdp.i18n" {
    export = CDP;
}
